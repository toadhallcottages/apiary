FORMAT: 1A

# Introduction
Plato is the name of the API that lies behind the tabs 2 booking system.  It can be used for a whole range of applications such as websites, balance payment systems and reporting.

Plato is our 2nd generation API, as such all routes should start with /v2 please

## Data types
The following data types may be returned by Plato

 * object - { }
 * array - [ ]
 * string - "The quick brown fox"
 * number - 1 or 2.34 *(phone numbers, company numbers, etc that may start with a 0 are returned as strings)*
 * date - "2014-01-01" *(all dates will be UTC)*
 * datetime - "2014-01-01 12:23:23" *(all datetimes will be UTC)*
 * boolean - true or false

## Response Codes
We use standard [HTTP Status Codes](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html "HTTP status codes") to report back on the outcome of a request

 * 200 OK
 * 201 Created
 * 204 OK (no content)
 * 400 An error occurred
 * 404 The resource does not exist
 * 500 Server error



# Group Accounts

## Accounts [/v2/account]
### Retreive a list of Accounts [GET]

+ Response 200 (application/json)

        [
          {
            "id": 1,
            "nominalcode": "4320",
            "description": "BOOKING FEES",
            "usebranding": true
          },
          {
            "id": 2,
            "nominalcode": "1100",
            "description": "DEBTORS CONTROL ACCOUNT",
            "usebranding": true
          },
          {
            "id": 3,
            "nominalcode": "2200",
            "description": "SALES VAT CONTROL",
            "usebranding": false
          },
          {
            "id": 4,
            "nominalcode": "2102",
            "description": "OWNER RENTALS OUTSTANDING",
            "usebranding": true
          },
          {
            "id": 5,
            "nominalcode": "4300",
            "description": "COMMISSION",
            "usebranding": true
          },
          {
            "id": 6,
            "nominalcode": "4316",
            "description": "CPS 2016",
            "usebranding": true
          },
          {
            "id": 7,
            "nominalcode": "7906",
            "description": "CUSTOMER CREDIT CARD CHG",
            "usebranding": true
          },
          {
            "id": 8,
            "nominalcode": "1111",
            "description": "BAD DEBT PROVISION",
            "usebranding": false
          },
          {
            "id": 9,
            "nominalcode": "4405",
            "description": "BROCHURE FEES",
            "usebranding": true
          },
          {
            "id": 10,
            "nominalcode": "4410",
            "description": "CONTRACT CHARGES",
            "usebranding": true
          },
          {
            "id": 11,
            "nominalcode": "4430",
            "description": "VISIT BRITAIN ADMIN FEES",
            "usebranding": true
          },
          {
            "id": 12,
            "nominalcode": "4500",
            "description": "MS - CALL OUT FEES",
            "usebranding": true
          },
          {
            "id": 13,
            "nominalcode": "4501",
            "description": "MS - STOCK ITEMS AND PARTS",
            "usebranding": true
          },
          {
            "id": 14,
            "nominalcode": "4502",
            "description": "MS - THIRD PARTY SERVICES",
            "usebranding": true
          },
          {
            "id": 15,
            "nominalcode": "4503",
            "description": "MS - CONTRACT FEE",
            "usebranding": true
          },
          {
            "id": 16,
            "nominalcode": "4504",
            "description": "MS - HOUSEKEEPING INCOME",
            "usebranding": true
          },
          {
            "id": 17,
            "nominalcode": "4505",
            "description": "MS - INTERNAL PAT TESTING CHARGES",
            "usebranding": true
          },
          {
            "id": 18,
            "nominalcode": "4506",
            "description": "MS - MISCELLANEOUS INCOME",
            "usebranding": true
          },
          {
            "id": 19,
            "nominalcode": "4507",
            "description": "MS - LINEN, TOILETRIES & TOWELS - STOCK",
            "usebranding": true
          },
          {
            "id": 20,
            "nominalcode": "4508",
            "description": "MS - STOCK ITEMS & PARTS - SOLD AT COST",
            "usebranding": true
          },
          {
            "id": 21,
            "nominalcode": "2130",
            "description": "EURO CONTROL ACCOUNT",
            "usebranding": false
          },
          {
            "id": 22,
            "nominalcode": "2132",
            "description": "CHEQUE/STERLING CONTROL ACCOUNT",
            "usebranding": false
          },
          {
            "id": 23,
            "nominalcode": "7901",
            "description": "BANK CHARGES",
            "usebranding": true
          },
          {
            "id": 24,
            "nominalcode": "2106",
            "description": "CPS FUND 2016",
            "usebranding": true
          },
          {
            "id": 25,
            "nominalcode": "1104",
            "description": "HO RECOVERY",
            "usebranding": true
          },
          {
            "id": 26,
            "nominalcode": "4305",
            "description": "AGENTS COMMISSION",
            "usebranding": true
          },
          {
            "id": 27,
            "nominalcode": "1113",
            "description": "INTERHOME",
            "usebranding": false
          },
          {
            "id": 28,
            "nominalcode": "4325",
            "description": "RECTIFICATION COSTS",
            "usebranding": true
          },
          {
            "id": 29,
            "nominalcode": "2131",
            "description": "SAGE PAY CONTROL ACCOUNT",
            "usebranding": false
          },
          {
            "id": 30,
            "nominalcode": "8200",
            "description": "CONTRA TRANSFERS",
            "usebranding": false
          },
          {
            "id": 31,
            "nominalcode": "6000",
            "description": "AFFILIATES & REFERRERS",
            "usebranding": true
          },
          {
            "id": 32,
            "nominalcode": "2113",
            "description": "GIFT VOUCHER PURCHASES",
            "usebranding": false
          },
          {
            "id": 33,
            "nominalcode": "7950",
            "description": "FX GAINS/LOSSES",
            "usebranding": false
          },
          {
            "id": 34,
            "nominalcode": "2133",
            "description": "CUSTOMER BALANCES",
            "usebranding": false
          },
          {
            "id": 35,
            "nominalcode": "2134",
            "description": "OWNER PAYMENTS CONTROL",
            "usebranding": false
          },
          {
            "id": 36,
            "nominalcode": "1107",
            "description": "OWNER DEBTORS",
            "usebranding": false
          },
          {
            "id": 37,
            "nominalcode": "2112",
            "description": "SECURITY DEPOSITS",
            "usebranding": true
          }
        ]

### Create a new Account [POST]
The following fields should be provided in the POST array

* ```group``` Name of the AccountGroup the Account is in
* ```nominalcode``` The Nominal Code of the account
* ```description``` Description of the account
* ```usebranding``` Whether account entries should reference the Branding

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/account/1

## Account Detail [/v2/account/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Account to get

### Gets the details of an account [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "nominalcode": "10",
            "description": "LEASEHOLD PROPERTY",
            "usebranding": false
          }

### Update the details of an Account [PUT]

+ Request (application/x-www-form-urlencoded)

        description=Something different

+ Response 204

### Delete an Account [DELETE]

+ Response 501



## AccountingDateDefinitions [/v2/accountingdatedefinition]
### Retreive a list of AccountingDateDefinitions [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "name": "Confirmation Date",
              "description": "Date of Confirmation of a Booking, either by a tabs user, or by first payment"
            },
            {
              "id": 2,
              "name": "Created Date",
              "description": "Date the source item was created"
            },
            {
              "id": 3,
              "name": "Work Done Date",
              "description": "The date the work was done"
            },
            {
              "id": 4,
              "name": "Credit Note Date",
              "description": "The date of the Credit Note"
            },
            {
              "id": 5,
              "name": "Invoice Date",
              "description": "The date of the Invoice"
            }
          ]

### Create a new AccountingDateDefinition [POST]

+ Response 501

## AccountingDateDefinition Detail [/v2/accountingdatedefinition/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the AccountingDateDefinition to get

### Gets the details of an accountingdatedefinition [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "name": "Created Date",
            "description": "Date the source item was created"
          }

### Update the details of an AccountingDateDefinition [PUT]

+ Request (application/x-www-form-urlencoded)

        description=Something different

+ Response 204

### Delete an AccountingDateDefinition [DELETE]

+ Response 501



## AccountingPeriods [/v2/accountingperiod]
### Retreive a list of AccountingPeriods [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "name": "January 2016",
              "startdate": "2016-01-01",
              "enddate": "2016-01-31",
              "closed": "2016-02-05 12:35:02"
            },
            {
              "id": 2,
              "name": "February 2016",
              "startdate": "2016-02-01",
              "enddate": "2016-02-29",
              "closed": "2016-03-05 12:35:02"
            },
            {
              "id": 3,
              "name": "March 2016",
              "startdate": "2016-03-01",
              "enddate": "2016-03-31",
              "closed": ""
            },
            {
              "id": 4,
              "name": "April 2016",
              "startdate": "2016-04-01",
              "enddate": "2016-04-30",
              "closed": ""
            },
            {
              "id": 5,
              "name": "May 2016",
              "startdate": "2016-05-01",
              "enddate": "2016-05-31",
              "closed": ""
            },
            {
              "id": 6,
              "name": "June 2016",
              "startdate": "2016-06-01",
              "enddate": "2016-06-30",
              "closed": ""
            },
            {
              "id": 7,
              "name": "July 2016",
              "startdate": "2016-07-01",
              "enddate": "2016-07-31",
              "closed": ""
            },
            {
              "id": 8,
              "name": "August 2016",
              "startdate": "2016-08-01",
              "enddate": "2016-08-31",
              "closed": ""
            },
            {
              "id": 9,
              "name": "September 2016",
              "startdate": "2016-09-01",
              "enddate": "2016-09-30",
              "closed": ""
            },
            {
              "id": 10,
              "name": "October 2016",
              "startdate": "2016-10-01",
              "enddate": "2016-10-31",
              "closed": ""
            },
            {
              "id": 11,
              "name": "November 2016",
              "startdate": "2016-11-01",
              "enddate": "2016-11-30",
              "closed": ""
            },
            {
              "id": 12,
              "name": "December 2016",
              "startdate": "2016-12-01",
              "enddate": "2016-12-31",
              "closed": ""
            },
            {
              "id": 13,
              "name": "January 2017",
              "startdate": "2017-01-01",
              "enddate": "2017-01-31",
              "closed": ""
            },
            {
              "id": 14,
              "name": "February 2017",
              "startdate": "2017-02-01",
              "enddate": "2017-02-28",
              "closed": ""
            },
            {
              "id": 15,
              "name": "March 2017",
              "startdate": "2017-03-01",
              "enddate": "2017-03-31",
              "closed": ""
            },
            {
              "id": 16,
              "name": "April 2017",
              "startdate": "2017-04-01",
              "enddate": "2017-04-30",
              "closed": ""
            },
            {
              "id": 17,
              "name": "May 2017",
              "startdate": "2017-05-01",
              "enddate": "2017-05-31",
              "closed": ""
            },
            {
              "id": 18,
              "name": "June 2017",
              "startdate": "2017-06-01",
              "enddate": "2017-06-30",
              "closed": ""
            },
            {
              "id": 19,
              "name": "July 2017",
              "startdate": "2017-07-01",
              "enddate": "2017-07-31",
              "closed": ""
            },
            {
              "id": 20,
              "name": "August 2017",
              "startdate": "2017-08-01",
              "enddate": "2017-08-31",
              "closed": ""
            },
            {
              "id": 21,
              "name": "September 2017",
              "startdate": "2017-09-01",
              "enddate": "2017-09-30",
              "closed": ""
            },
            {
              "id": 22,
              "name": "October 2017",
              "startdate": "2017-10-01",
              "enddate": "2017-10-31",
              "closed": ""
            },
            {
              "id": 23,
              "name": "November 2017",
              "startdate": "2017-11-01",
              "enddate": "2017-11-30",
              "closed": ""
            },
            {
              "id": 24,
              "name": "December 2017",
              "startdate": "2017-12-01",
              "enddate": "2017-12-31",
              "closed": ""
            },
            {
              "id": 25,
              "name": "July 2026",
              "startdate": "2026-07-01",
              "enddate": "2026-07-31",
              "closed": ""
            }
          ]

### Create a new AccountingPeriod [POST]
The following fields should be provided in the POST array

* ```name``` Name of the AccountingPeriod, e.g. 'Jan 2016'
* ```startdate``` The start date of the period (inclusive)
* ```enddate``` The end date of the period (inclusive)
* ```closeddate``` The date the period closes (i.e. transactions can no longer be added to it)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/accountingperiod/1

## AccountingPeriod Detail [/v2/accountingperiod/{id}]

+ Parameters

    + id (required, integer, `8`) ... The id of the AccountingPeriod to get

### Gets the details of an accountingperiod [GET]

+ Response 200 (application/json)

        {
            "id": 8,
            "name": "August 2016",
            "startdate": "2016-08-01",
            "enddate": "2016-08-31",
            "closed": ""
          }

### Update the details of an AccountingPeriod [PUT]

+ Request (application/x-www-form-urlencoded)

        name=Something different

+ Response 204

### Delete an AccountingPeriod [DELETE]

+ Response 204



## AccountValueTypes [/v2/accountvaluetype]
### Retreive a list of AccountValueTypes [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "valuetype": "Full amount",
              "description": "The full amount of the payment, extra charge etc"
            },
            {
              "id": 2,
              "valuetype": "Agency amount",
              "description": "The amount due to the agency, excluding VAT"
            },
            {
              "id": 3,
              "valuetype": "Owner amount",
              "description": "The amount due to the owner, after any commission and VAT"
            },
            {
              "id": 4,
              "valuetype": "Agency VAT",
              "description": "The amount of VAT added to the agency amount"
            }
          ]

### Create a new AccountValueType [POST]

+ Response 501

## AccountValueType Detail [/v2/accountvaluetype/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the AccountValueType to get

### Gets the details of an accountvaluetype [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "valuetype": "Full amount",
            "description": "The full amount of the payment, extra charge etc"
          }

### Update the details of an AccountValueType [PUT]

+ Response 501

### Delete an AccountValueType [DELETE]

+ Response 501



## BrandSources [/v2/brandsource]
### Retreive a list of BrandSources [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "brandsource": "Booking",
              "description": "The booking's booking brand"
            },
            {
              "id": 2,
              "brandsource": "Owner",
              "description": "The booking brand of owner's first property?"
            }
          ]

### Create a new BrandSource [POST]

+ Response 501

## BrandSource Detail [/v2/brandsource/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the BrandSource to get

### Gets the details of an brandsource [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "brandsource": "Booking",
            "description": "The booking's booking brand"
          }

### Update the details of an BrandSource [PUT]

+ Response 501

### Delete an BrandSource [DELETE]

+ Response 501



## TransactionDefinition DoubleEntryDefinition Index [/v2/transactiondefinition/{id}/doubleentrydefinition]
Postman: transactiondefinition/2/doubleentrydefinition

+ Parameters

    + id (required, integer, `2`) ... The id of the TransactionDefinition

### Get all DoubleEntryDefinitions for a TransactionDefinition [GET]

+ Response 200 (application/json)

        [
            {
              "id": 2,
              "payagency": false,
              "payowner": true,
              "donotmodify": true
            },
            {
              "id": 3,
              "payagency": true,
              "payowner": false,
              "donotmodify": true
            },
            {
              "id": 4,
              "payagency": true,
              "payowner": true,
              "donotmodify": true
            }
          ]

### Add a new DoubleEntryDefinition to a TransactionDefinition Template [POST]

The following fields should be provided in the POST array

* ```payagency``` If the double entry relates to an Extra, whether it relates to extras which include agency money (optional)
* ```payowner``` If the double entry relates to an Extra, whether it relates to extras which include owner money (optional)
* ```donotmodify``` Whether the double entry details can be modified (optional, default=false)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/transactiondefinition/4/doubleentrydefinition/4

## TransactionDefinition DoubleEntryDefinition Detail [/v2/transactiondefinition/{id}/doubleentrydefinition/{id2}]
Postman: transactiondefinition/2/doubleentrydefinition/3

+ Parameters

    + id (required, integer, `2`) ... The id of the TransactionDefinition
    + id2 (required, integer, `3`) ... The id of the DoubleEntryDefinition

### Gets the details of a TransactionDefinition DoubleEntryDefinition [GET]

+ Response 200 (application/json)

        {
            "id": 3,
            "payagency": true,
            "payowner": false,
            "donotmodify": true
          }

### Update a TransactionDefinition DoubleEntryDefinition [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. payagency=false

+ Response 204

### Deletes a TransactionDefinition DoubleEntryDefinition [DELETE]

+ Response 204



## Entries [/v2/entry{?page,limit}]

+ Parameters

    + page (optional, integer, `1`) ... The page of results to return
    + limit (optional, integer, `2`) ... The number of results to return

### Retreive a list of Entries [GET]

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 9,
            "page": 1,
            "count": 2,
            "limit": 2,
            "time": 0,
            "orderBy": null,
            "filter": "",
            "previous": null,
            "next": "/plato/web/app_dev.php/v2/entry?page=2&limit=2&actorId=1",
            "elements": [
              {
                "id": 1,
                "account": {
                  "id": 70,
                  "nominalcode": "4320",
                  "description": "BOOKING FEES",
                  "usebranding": true
                },
                "amount": 22.5,
                "doubleentrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/3",
                "entrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/3/entrydefinition/1",
                "bookingbrand": {
                  "id": 3,
                  "code": "NOBB",
                  "name": "Norfolk Country Cottages",
                  "agency": "/v2/agency/4"
                },
                "transaction": {
                  "id": 1,
                  "transactiondatetime": "2016-09-06 15:42:02",
                  "accountingdate": "2026-07-31",
                  "accountingperiod": {
                    "id": 25,
                    "name": "July 2026",
                    "startdate": "2026-07-01",
                    "enddate": "2026-07-31",
                    "closed": ""
                  },
                  "transactiondefinition": {
                    "id": 2,
                    "transactionname": "Extra",
                    "description": "Addition or cancellation of an extra",
                    "accountingdatedefinition": {
                      "id": 1,
                      "name": "Confirmation Date",
                      "description": "Date of Confirmation of a Booking, either by a tabs user, or by first payment"
                    },
                    "transactionsource": {
                      "id": 2,
                      "name": "Extra",
                      "description": "Booking Extra"
                    },
                    "donotmodify": true,
                    "requiresbooking": true,
                    "requiresbookingextra": true,
                    "requirescustomer": false,
                    "requiresactorpayment": false,
                    "requiresbookingpayment": false,
                    "requiresproperty": true,
                    "requiresowner": true,
                    "requiresownercharge": false,
                    "requiresownerpayment": false
                  },
                  "booking": "/v2/booking/1",
                  "bookingextra": "/v2/booking/1/extra/1",
                  "customer": "",
                  "actorpayment": "",
                  "bookingpayment": "",
                  "owner": "/v2/owner/16",
                  "ownercharge": "",
                  "ownerpayment": "",
                  "property": "/v2/property/1"
                }
              },
              {
                "id": 2,
                "account": {
                  "id": 3,
                  "nominalcode": "1100",
                  "description": "DEBTORS CONTROL ACCOUNT",
                  "usebranding": true
                },
                "amount": -27,
                "doubleentrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/3",
                "entrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/3/entrydefinition/10",
                "bookingbrand": {
                  "id": 3,
                  "code": "NOBB",
                  "name": "Norfolk Country Cottages",
                  "agency": "/v2/agency/4"
                },
                "transaction": {
                  "id": 1,
                  "transactiondatetime": "2016-09-06 15:42:02",
                  "accountingdate": "2026-07-31",
                  "accountingperiod": {
                    "id": 25,
                    "name": "July 2026",
                    "startdate": "2026-07-01",
                    "enddate": "2026-07-31",
                    "closed": ""
                  },
                  "transactiondefinition": {
                    "id": 2,
                    "transactionname": "Extra",
                    "description": "Addition or cancellation of an extra",
                    "accountingdatedefinition": {
                      "id": 1,
                      "name": "Confirmation Date",
                      "description": "Date of Confirmation of a Booking, either by a tabs user, or by first payment"
                    },
                    "transactionsource": {
                      "id": 2,
                      "name": "Extra",
                      "description": "Booking Extra"
                    },
                    "donotmodify": true,
                    "requiresbooking": true,
                    "requiresbookingextra": true,
                    "requirescustomer": false,
                    "requiresactorpayment": false,
                    "requiresbookingpayment": false,
                    "requiresproperty": true,
                    "requiresowner": true,
                    "requiresownercharge": false,
                    "requiresownerpayment": false
                  },
                  "booking": "/v2/booking/1",
                  "bookingextra": "/v2/booking/1/extra/1",
                  "customer": "",
                  "actorpayment": "",
                  "bookingpayment": "",
                  "owner": "/v2/owner/16",
                  "ownercharge": "",
                  "ownerpayment": "",
                  "property": "/v2/property/1"
                }
              }
            ]
          }

### Create a new Entry [POST]

+ Response 501

## Entry Detail [/v2/entry/{id}]

+ Parameters

    + id (required, integer, `3`) ... The id of the Entry to get

### Gets the details of an Entry [GET]

+ Response 200 (application/json)

        {
            "id": 3,
            "account": {
              "id": 57,
              "nominalcode": "2200",
              "description": "SALES VAT CONTROL",
              "usebranding": false
            },
            "amount": 4.5,
            "doubleentrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/3",
            "entrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/3/entrydefinition/11",
            "bookingbrand": [],
            "transaction": {
              "id": 1,
              "transactiondatetime": "2016-09-06 15:42:02",
              "accountingdate": "2026-07-31",
              "accountingperiod": {
                "id": 25,
                "name": "July 2026",
                "startdate": "2026-07-01",
                "enddate": "2026-07-31",
                "closed": ""
              },
              "transactiondefinition": {
                "id": 2,
                "transactionname": "Extra",
                "description": "Addition or cancellation of an extra",
                "accountingdatedefinition": {
                  "id": 1,
                  "name": "Confirmation Date",
                  "description": "Date of Confirmation of a Booking, either by a tabs user, or by first payment"
                },
                "transactionsource": {
                  "id": 2,
                  "name": "Extra",
                  "description": "Booking Extra"
                },
                "donotmodify": true,
                "requiresbooking": true,
                "requiresbookingextra": true,
                "requirescustomer": false,
                "requiresactorpayment": false,
                "requiresbookingpayment": false,
                "requiresproperty": true,
                "requiresowner": true,
                "requiresownercharge": false,
                "requiresownerpayment": false
              },
              "booking": "/v2/booking/1",
              "bookingextra": "/v2/booking/1/extra/1",
              "customer": "",
              "actorpayment": "",
              "bookingpayment": "",
              "owner": "/v2/owner/16",
              "ownercharge": "",
              "ownerpayment": "",
              "property": "/v2/property/1"
            }
          }

### Update the details of an Entry [PUT]

+ Response 501

### Delete an Entry [DELETE]

+ Response 501



## Transaction Entry Definition Index [/v2/transactiondefinition/{id}/doubleentrydefinition/{id2}/entrydefinition]
Postman: transactiondefinition/1/doubleentrydefinition/1/entrydefinition

+ Parameters

    + id (required, integer, `1`) ... The id of the TransactionDefinition
    + id2 (required, integer, `1`) ... The id of the DoubleEntryDefinition

### Get all EntryDefinitions for a TransactionDefinition DoubleEntryDefinition [GET]

+ Response 200 (application/json)

        [
            {
              "id": 4,
              "debit": true,
              "accountvaluetype": {
                "id": 1,
                "valuetype": "Full amount",
                "description": "The full amount of the payment, extra charge etc"
              },
              "brandsource": {
                "id": 1,
                "brandsource": "Booking",
                "description": "The booking's booking brand"
              },
              "donotdelete": true,
              "type": "Standard",
              "account": {
                "id": 3,
                "nominalcode": "1100",
                "description": "DEBTORS CONTROL ACCOUNT",
                "usebranding": true
              }
            },
            {
              "id": 5,
              "debit": false,
              "accountvaluetype": {
                "id": 3,
                "valuetype": "Owner amount",
                "description": "The amount due to the owner, after any commission and VAT"
              },
              "brandsource": {
                "id": 2,
                "brandsource": "Property",
                "description": "The property's primary booking brand"
              },
              "donotdelete": true,
              "type": "Standard",
              "account": {
                "id": 32,
                "nominalcode": "2102",
                "description": "OWNER RENTALS OUTSTANDING",
                "usebranding": true
              }
            },
            {
              "id": 6,
              "debit": false,
              "accountvaluetype": {
                "id": 2,
                "valuetype": "Agency amount",
                "description": "The amount due to the agency, excluding VAT"
              },
              "brandsource": {
                "id": 1,
                "brandsource": "Booking",
                "description": "The booking's booking brand"
              },
              "donotdelete": true,
              "type": "Standard",
              "account": {
                "id": 64,
                "nominalcode": "4300",
                "description": "COMMISSION",
                "usebranding": true
              }
            },
            {
              "id": 7,
              "debit": false,
              "accountvaluetype": {
                "id": 4,
                "valuetype": "Agency VAT",
                "description": "The amount of VAT added to the agency amount"
              },
              "brandsource": {
                "id": 1,
                "brandsource": "Booking",
                "description": "The booking's booking brand"
              },
              "donotdelete": true,
              "type": "Standard",
              "account": {
                "id": 57,
                "nominalcode": "2200",
                "description": "SALES VAT CONTROL",
                "usebranding": false
              }
            }
          ]

### Add a new EntryDefinition to a DoubleEntryDefinition TransactionDefinition [POST]

The following fields should be provided in the POST array

* ```type``` The type of Entry Definition: Standard, Extra, OwnerCharge or Payment
* ```debit``` Whether the entry is a Debit or a Credit
* ```accountvaluetypeid``` The id of the Account Value Type
* ```brandsourceid``` The id of the BrandSource (optional)
* ```donotdelete``` Whether the entry can be deleted (optional, default=false)
* ```accountid``` For type=Standard only, the id of the Account the Entry should be entered in

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/transactiondefinition/1/doubleentrydefinition/2/entrydefinition

## Transaction Entry Definition Detail [/v2/transactiondefinition/{id}/doubleentrydefinition/{id2}/entrydefinition/{id3}]
Postman: transactiondefinition/1/doubleentrydefinition/1/entrydefinition/4

+ Parameters

    + id (required, integer, `1`) ... The id of the TransactionDefinition
    + id2 (required, integer, `1`) ... The id of the DoubleEntryDefinition
    + id3 (required, integer, `4`) ... The id of the EntryDefinition

### Gets the details of an Transaction Entry Definition [GET]

+ Response 200 (application/json)

        {
            "id": 4,
            "debit": true,
            "accountvaluetype": {
              "id": 1,
              "valuetype": "Full amount",
              "description": "The full amount of the payment, extra charge etc"
            },
            "brandsource": {
              "id": 1,
              "brandsource": "Booking",
              "description": "The booking's booking brand"
            },
            "donotdelete": true,
            "type": "Standard",
            "account": {
              "id": 3,
              "nominalcode": "1100",
              "description": "DEBTORS CONTROL ACCOUNT",
              "usebranding": true
            }
          }

### Update a Transaction Entry Definition [PUT]

+ Request (application/x-www-form-urlencoded)

        debit=true

+ Response 204

### Deletes a Transaction Entry Definition [DELETE]

+ Response 204




## Transaction EntryDefinition ExtraBranding Index [/v2/transactiondefinition/{id}/doubleentrydefinition/{id2}/entrydefinition/{id3}/extrabranding]
Postman: transactiondefinition/2/doubleentrydefinition/3/entrydefinition/1/extrabranding
+ Parameters

    + id (required, integer, `2`) ... The id of the TransactionDefinition
    + id2 (required, integer, `3`) ... The id of the DoubleEntryDefinition
    + id3 (required, integer, `1`) ... The id of the EntryDefinition

### Get all ExtraBrandings for an EntryDefinition [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "extrabranding": {
                    "id": 1,
                    "extra": {
                        "id": 1,
                        "extracode": "BKFE",
                        "extratype": "Booking",
                        "description": "Booking Fee",
                        "brandings": [
                            "/v2/branding/1",
                            "/v2/branding/2",
                            "/v2/branding/3",
                            "/v2/branding/4",
                            "/v2/branding/6"
                        ]
                    },
                    "branding": {
                        "id": 1,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 1,
                            "code": "MAD",
                            "name": "Marsdens Devon",
                            "agency": "/v2/agency/3",
                            "defaultbookingbrand": "/v2/bookingbrand/1",
                            "website": "www.mad.co.uk",
                            "email": "info@mad.co.uk"
                        },
                        "bookingbrand": {
                            "id": 1,
                            "code": "MAD",
                            "name": "Mardens Devon",
                            "agency": "/v2/agency/3"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 1,
                    "nominalcode": "4320",
                    "description": "BOOKING FEES",
                    "usebranding": true
                }
            },
            {
                "id": 2,
                "extrabranding": {
                    "id": 2,
                    "extra": {
                        "id": 1,
                        "extracode": "BKFE",
                        "extratype": "Booking",
                        "description": "Booking Fee",
                        "brandings": [
                            "/v2/branding/1",
                            "/v2/branding/2",
                            "/v2/branding/3",
                            "/v2/branding/4",
                            "/v2/branding/6"
                        ]
                    },
                    "branding": {
                        "id": 2,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 2,
                            "code": "MAC",
                            "name": "Marsdens Cornwall",
                            "agency": "/v2/agency/3",
                            "defaultbookingbrand": "/v2/bookingbrand/2",
                            "website": null,
                            "email": null
                        },
                        "bookingbrand": {
                            "id": 2,
                            "code": "MAC",
                            "name": "Mardens Cornwall",
                            "agency": "/v2/agency/3"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 1,
                    "nominalcode": "4320",
                    "description": "BOOKING FEES",
                    "usebranding": true
                }
            },
            {
                "id": 3,
                "extrabranding": {
                    "id": 12,
                    "extra": {
                        "id": 1,
                        "extracode": "BKFE",
                        "extratype": "Booking",
                        "description": "Booking Fee",
                        "brandings": [
                            "/v2/branding/1",
                            "/v2/branding/2",
                            "/v2/branding/3",
                            "/v2/branding/4",
                            "/v2/branding/6"
                        ]
                    },
                    "branding": {
                        "id": 3,
                        "brandinggroup": {
                            "id": 2,
                            "code": "NOAA",
                            "name": "Norfolk",
                            "agency": "/v2/agency/4",
                            "workorderssettings": [
                                "/v2/brandinggroup/2/workorderssettings/1"
                            ]
                        },
                        "marketingbrand": {
                            "id": 3,
                            "code": "NOMM",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4",
                            "defaultbookingbrand": "/v2/bookingbrand/3",
                            "website": "www.norfolk.co.uk",
                            "email": "info@norfolk.co.uk"
                        },
                        "bookingbrand": {
                            "id": 3,
                            "code": "NOBB",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31",
                        "petextrabranding": {
                            "id": 11,
                            "extra": {
                                "id": 4,
                                "extracode": "PET",
                                "extratype": "Booking",
                                "description": "Pet charge",
                                "brandings": [
                                    "/v2/branding/3"
                                ]
                            }
                        }
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 1,
                    "nominalcode": "4320",
                    "description": "BOOKING FEES",
                    "usebranding": true
                }
            },
            {
                "id": 4,
                "extrabranding": {
                    "id": 21,
                    "extra": {
                        "id": 1,
                        "extracode": "BKFE",
                        "extratype": "Booking",
                        "description": "Booking Fee",
                        "brandings": [
                            "/v2/branding/1",
                            "/v2/branding/2",
                            "/v2/branding/3",
                            "/v2/branding/4",
                            "/v2/branding/6"
                        ]
                    },
                    "branding": {
                        "id": 4,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 4,
                            "code": "MAMM",
                            "name": "Marsdens",
                            "agency": "/v2/agency/5",
                            "defaultbookingbrand": "/v2/bookingbrand/4",
                            "website": "www.mabb.co.uk",
                            "email": "info@mabb.co.uk"
                        },
                        "bookingbrand": {
                            "id": 4,
                            "code": "MABB",
                            "name": "Marsdens Devon Cottages",
                            "agency": "/v2/agency/5"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 1,
                    "nominalcode": "4320",
                    "description": "BOOKING FEES",
                    "usebranding": true
                }
            },
            {
                "id": 5,
                "extrabranding": {
                    "id": 5,
                    "extra": {
                        "id": 3,
                        "extracode": "HEAT",
                        "extratype": "Booking",
                        "description": "Heating",
                        "brandings": [
                            "/v2/branding/2",
                            "/v2/branding/3",
                            "/v2/branding/4",
                            "/v2/branding/6"
                        ]
                    },
                    "branding": {
                        "id": 2,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 2,
                            "code": "MAC",
                            "name": "Marsdens Cornwall",
                            "agency": "/v2/agency/3",
                            "defaultbookingbrand": "/v2/bookingbrand/2",
                            "website": null,
                            "email": null
                        },
                        "bookingbrand": {
                            "id": 2,
                            "code": "MAC",
                            "name": "Mardens Cornwall",
                            "agency": "/v2/agency/3"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 6,
                    "nominalcode": "4316",
                    "description": "CPS 2016",
                    "usebranding": true
                }
            },
            {
                "id": 6,
                "extrabranding": {
                    "id": 6,
                    "extra": {
                        "id": 19,
                        "extracode": "GY01",
                        "extratype": "Marketing",
                        "description": "Gym Membership",
                        "brandings": [
                            "/v2/branding/1"
                        ]
                    },
                    "branding": {
                        "id": 1,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 1,
                            "code": "MAD",
                            "name": "Marsdens Devon",
                            "agency": "/v2/agency/3",
                            "defaultbookingbrand": "/v2/bookingbrand/1",
                            "website": "www.mad.co.uk",
                            "email": "info@mad.co.uk"
                        },
                        "bookingbrand": {
                            "id": 1,
                            "code": "MAD",
                            "name": "Mardens Devon",
                            "agency": "/v2/agency/3"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 6,
                    "nominalcode": "4316",
                    "description": "CPS 2016",
                    "usebranding": true
                }
            },
            {
                "id": 7,
                "extrabranding": {
                    "id": 22,
                    "extra": {
                        "id": 2,
                        "extracode": "CANC",
                        "extratype": "Booking",
                        "description": "Cancellation Scheme",
                        "brandings": [
                            "/v2/branding/1",
                            "/v2/branding/3",
                            "/v2/branding/4",
                            "/v2/branding/6"
                        ]
                    },
                    "branding": {
                        "id": 4,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 4,
                            "code": "MAMM",
                            "name": "Marsdens",
                            "agency": "/v2/agency/5",
                            "defaultbookingbrand": "/v2/bookingbrand/4",
                            "website": "www.mabb.co.uk",
                            "email": "info@mabb.co.uk"
                        },
                        "bookingbrand": {
                            "id": 4,
                            "code": "MABB",
                            "name": "Marsdens Devon Cottages",
                            "agency": "/v2/agency/5"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 6,
                    "nominalcode": "4316",
                    "description": "CPS 2016",
                    "usebranding": true
                }
            },
            {
                "id": 8,
                "extrabranding": {
                    "id": 16,
                    "extra": {
                        "id": 10,
                        "extracode": "CCC",
                        "extratype": "Booking",
                        "description": "Credit Card Charge",
                        "brandings": [
                            "/v2/branding/3",
                            "/v2/branding/1"
                        ]
                    },
                    "branding": {
                        "id": 3,
                        "brandinggroup": {
                            "id": 2,
                            "code": "NOAA",
                            "name": "Norfolk",
                            "agency": "/v2/agency/4",
                            "workorderssettings": [
                                "/v2/brandinggroup/2/workorderssettings/1"
                            ]
                        },
                        "marketingbrand": {
                            "id": 3,
                            "code": "NOMM",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4",
                            "defaultbookingbrand": "/v2/bookingbrand/3",
                            "website": "www.norfolk.co.uk",
                            "email": "info@norfolk.co.uk"
                        },
                        "bookingbrand": {
                            "id": 3,
                            "code": "NOBB",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31",
                        "petextrabranding": {
                            "id": 11,
                            "extra": {
                                "id": 4,
                                "extracode": "PET",
                                "extratype": "Booking",
                                "description": "Pet charge",
                                "brandings": [
                                    "/v2/branding/3"
                                ]
                            }
                        }
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 7,
                    "nominalcode": "7906",
                    "description": "CUSTOMER CREDIT CARD CHG",
                    "usebranding": true
                }
            },
            {
                "id": 9,
                "extrabranding": {
                    "id": 17,
                    "extra": {
                        "id": 10,
                        "extracode": "CCC",
                        "extratype": "Booking",
                        "description": "Credit Card Charge",
                        "brandings": [
                            "/v2/branding/3",
                            "/v2/branding/1"
                        ]
                    },
                    "branding": {
                        "id": 1,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 1,
                            "code": "MAD",
                            "name": "Marsdens Devon",
                            "agency": "/v2/agency/3",
                            "defaultbookingbrand": "/v2/bookingbrand/1",
                            "website": "www.mad.co.uk",
                            "email": "info@mad.co.uk"
                        },
                        "bookingbrand": {
                            "id": 1,
                            "code": "MAD",
                            "name": "Mardens Devon",
                            "agency": "/v2/agency/3"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 7,
                    "nominalcode": "7906",
                    "description": "CUSTOMER CREDIT CARD CHG",
                    "usebranding": true
                }
            },
            {
                "id": 10,
                "extrabranding": {
                    "id": 10,
                    "extra": {
                        "id": 3,
                        "extracode": "HEAT",
                        "extratype": "Booking",
                        "description": "Heating",
                        "brandings": [
                            "/v2/branding/2",
                            "/v2/branding/3",
                            "/v2/branding/4",
                            "/v2/branding/6"
                        ]
                    },
                    "branding": {
                        "id": 3,
                        "brandinggroup": {
                            "id": 2,
                            "code": "NOAA",
                            "name": "Norfolk",
                            "agency": "/v2/agency/4",
                            "workorderssettings": [
                                "/v2/brandinggroup/2/workorderssettings/1"
                            ]
                        },
                        "marketingbrand": {
                            "id": 3,
                            "code": "NOMM",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4",
                            "defaultbookingbrand": "/v2/bookingbrand/3",
                            "website": "www.norfolk.co.uk",
                            "email": "info@norfolk.co.uk"
                        },
                        "bookingbrand": {
                            "id": 3,
                            "code": "NOBB",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31",
                        "petextrabranding": {
                            "id": 11,
                            "extra": {
                                "id": 4,
                                "extracode": "PET",
                                "extratype": "Booking",
                                "description": "Pet charge",
                                "brandings": [
                                    "/v2/branding/3"
                                ]
                            }
                        }
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 11,
                "extrabranding": {
                    "id": 3,
                    "extra": {
                        "id": 2,
                        "extracode": "CANC",
                        "extratype": "Booking",
                        "description": "Cancellation Scheme",
                        "brandings": [
                            "/v2/branding/1",
                            "/v2/branding/3",
                            "/v2/branding/4",
                            "/v2/branding/6"
                        ]
                    },
                    "branding": {
                        "id": 1,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 1,
                            "code": "MAD",
                            "name": "Marsdens Devon",
                            "agency": "/v2/agency/3",
                            "defaultbookingbrand": "/v2/bookingbrand/1",
                            "website": "www.mad.co.uk",
                            "email": "info@mad.co.uk"
                        },
                        "bookingbrand": {
                            "id": 1,
                            "code": "MAD",
                            "name": "Mardens Devon",
                            "agency": "/v2/agency/3"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 12,
                "extrabranding": {
                    "id": 4,
                    "extra": {
                        "id": 2,
                        "extracode": "CANC",
                        "extratype": "Booking",
                        "description": "Cancellation Scheme",
                        "brandings": [
                            "/v2/branding/1",
                            "/v2/branding/3",
                            "/v2/branding/4",
                            "/v2/branding/6"
                        ]
                    },
                    "branding": {
                        "id": 3,
                        "brandinggroup": {
                            "id": 2,
                            "code": "NOAA",
                            "name": "Norfolk",
                            "agency": "/v2/agency/4",
                            "workorderssettings": [
                                "/v2/brandinggroup/2/workorderssettings/1"
                            ]
                        },
                        "marketingbrand": {
                            "id": 3,
                            "code": "NOMM",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4",
                            "defaultbookingbrand": "/v2/bookingbrand/3",
                            "website": "www.norfolk.co.uk",
                            "email": "info@norfolk.co.uk"
                        },
                        "bookingbrand": {
                            "id": 3,
                            "code": "NOBB",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31",
                        "petextrabranding": {
                            "id": 11,
                            "extra": {
                                "id": 4,
                                "extracode": "PET",
                                "extratype": "Booking",
                                "description": "Pet charge",
                                "brandings": [
                                    "/v2/branding/3"
                                ]
                            }
                        }
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 13,
                "extrabranding": {
                    "id": 11,
                    "extra": {
                        "id": 4,
                        "extracode": "PET",
                        "extratype": "Booking",
                        "description": "Pet charge",
                        "brandings": [
                            "/v2/branding/3"
                        ]
                    },
                    "branding": {
                        "id": 3,
                        "brandinggroup": {
                            "id": 2,
                            "code": "NOAA",
                            "name": "Norfolk",
                            "agency": "/v2/agency/4",
                            "workorderssettings": [
                                "/v2/brandinggroup/2/workorderssettings/1"
                            ]
                        },
                        "marketingbrand": {
                            "id": 3,
                            "code": "NOMM",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4",
                            "defaultbookingbrand": "/v2/bookingbrand/3",
                            "website": "www.norfolk.co.uk",
                            "email": "info@norfolk.co.uk"
                        },
                        "bookingbrand": {
                            "id": 3,
                            "code": "NOBB",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31",
                        "petextrabranding": {
                            "id": 11,
                            "extra": {
                                "id": 4,
                                "extracode": "PET",
                                "extratype": "Booking",
                                "description": "Pet charge",
                                "brandings": [
                                    "/v2/branding/3"
                                ]
                            }
                        }
                    },
                    "petextrabranding": true
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 14,
                "extrabranding": {
                    "id": 13,
                    "extra": {
                        "id": 8,
                        "extracode": "CON",
                        "extratype": "Booking",
                        "description": "Concierge Service",
                        "brandings": [
                            "/v2/branding/3",
                            "/v2/branding/4"
                        ]
                    },
                    "branding": {
                        "id": 3,
                        "brandinggroup": {
                            "id": 2,
                            "code": "NOAA",
                            "name": "Norfolk",
                            "agency": "/v2/agency/4",
                            "workorderssettings": [
                                "/v2/brandinggroup/2/workorderssettings/1"
                            ]
                        },
                        "marketingbrand": {
                            "id": 3,
                            "code": "NOMM",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4",
                            "defaultbookingbrand": "/v2/bookingbrand/3",
                            "website": "www.norfolk.co.uk",
                            "email": "info@norfolk.co.uk"
                        },
                        "bookingbrand": {
                            "id": 3,
                            "code": "NOBB",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31",
                        "petextrabranding": {
                            "id": 11,
                            "extra": {
                                "id": 4,
                                "extracode": "PET",
                                "extratype": "Booking",
                                "description": "Pet charge",
                                "brandings": [
                                    "/v2/branding/3"
                                ]
                            }
                        }
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 15,
                "extrabranding": {
                    "id": 14,
                    "extra": {
                        "id": 9,
                        "extracode": "OFEE",
                        "extratype": "Booking",
                        "description": "Owner Fee",
                        "brandings": [
                            "/v2/branding/3",
                            "/v2/branding/6"
                        ]
                    },
                    "branding": {
                        "id": 3,
                        "brandinggroup": {
                            "id": 2,
                            "code": "NOAA",
                            "name": "Norfolk",
                            "agency": "/v2/agency/4",
                            "workorderssettings": [
                                "/v2/brandinggroup/2/workorderssettings/1"
                            ]
                        },
                        "marketingbrand": {
                            "id": 3,
                            "code": "NOMM",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4",
                            "defaultbookingbrand": "/v2/bookingbrand/3",
                            "website": "www.norfolk.co.uk",
                            "email": "info@norfolk.co.uk"
                        },
                        "bookingbrand": {
                            "id": 3,
                            "code": "NOBB",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31",
                        "petextrabranding": {
                            "id": 11,
                            "extra": {
                                "id": 4,
                                "extracode": "PET",
                                "extratype": "Booking",
                                "description": "Pet charge",
                                "brandings": [
                                    "/v2/branding/3"
                                ]
                            }
                        }
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 16,
                "extrabranding": {
                    "id": 15,
                    "extra": {
                        "id": 6,
                        "extracode": "WEEKPR",
                        "extratype": "Booking",
                        "description": "Week Priced Extra",
                        "brandings": [
                            "/v2/branding/1",
                            "/v2/branding/3"
                        ]
                    },
                    "branding": {
                        "id": 3,
                        "brandinggroup": {
                            "id": 2,
                            "code": "NOAA",
                            "name": "Norfolk",
                            "agency": "/v2/agency/4",
                            "workorderssettings": [
                                "/v2/brandinggroup/2/workorderssettings/1"
                            ]
                        },
                        "marketingbrand": {
                            "id": 3,
                            "code": "NOMM",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4",
                            "defaultbookingbrand": "/v2/bookingbrand/3",
                            "website": "www.norfolk.co.uk",
                            "email": "info@norfolk.co.uk"
                        },
                        "bookingbrand": {
                            "id": 3,
                            "code": "NOBB",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31",
                        "petextrabranding": {
                            "id": 11,
                            "extra": {
                                "id": 4,
                                "extracode": "PET",
                                "extratype": "Booking",
                                "description": "Pet charge",
                                "brandings": [
                                    "/v2/branding/3"
                                ]
                            }
                        }
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 17,
                "extrabranding": {
                    "id": 18,
                    "extra": {
                        "id": 11,
                        "extracode": "SPPR",
                        "extratype": "Booking",
                        "description": "Split Promotion",
                        "brandings": [
                            "/v2/branding/3"
                        ]
                    },
                    "branding": {
                        "id": 3,
                        "brandinggroup": {
                            "id": 2,
                            "code": "NOAA",
                            "name": "Norfolk",
                            "agency": "/v2/agency/4",
                            "workorderssettings": [
                                "/v2/brandinggroup/2/workorderssettings/1"
                            ]
                        },
                        "marketingbrand": {
                            "id": 3,
                            "code": "NOMM",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4",
                            "defaultbookingbrand": "/v2/bookingbrand/3",
                            "website": "www.norfolk.co.uk",
                            "email": "info@norfolk.co.uk"
                        },
                        "bookingbrand": {
                            "id": 3,
                            "code": "NOBB",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31",
                        "petextrabranding": {
                            "id": 11,
                            "extra": {
                                "id": 4,
                                "extracode": "PET",
                                "extratype": "Booking",
                                "description": "Pet charge",
                                "brandings": [
                                    "/v2/branding/3"
                                ]
                            }
                        }
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 18,
                "extrabranding": {
                    "id": 20,
                    "extra": {
                        "id": 13,
                        "extracode": "AGPR",
                        "extratype": "Booking",
                        "description": "Agency Promotion",
                        "brandings": [
                            "/v2/branding/3"
                        ]
                    },
                    "branding": {
                        "id": 3,
                        "brandinggroup": {
                            "id": 2,
                            "code": "NOAA",
                            "name": "Norfolk",
                            "agency": "/v2/agency/4",
                            "workorderssettings": [
                                "/v2/brandinggroup/2/workorderssettings/1"
                            ]
                        },
                        "marketingbrand": {
                            "id": 3,
                            "code": "NOMM",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4",
                            "defaultbookingbrand": "/v2/bookingbrand/3",
                            "website": "www.norfolk.co.uk",
                            "email": "info@norfolk.co.uk"
                        },
                        "bookingbrand": {
                            "id": 3,
                            "code": "NOBB",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31",
                        "petextrabranding": {
                            "id": 11,
                            "extra": {
                                "id": 4,
                                "extracode": "PET",
                                "extratype": "Booking",
                                "description": "Pet charge",
                                "brandings": [
                                    "/v2/branding/3"
                                ]
                            }
                        }
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 19,
                "extrabranding": {
                    "id": 24,
                    "extra": {
                        "id": 8,
                        "extracode": "CON",
                        "extratype": "Booking",
                        "description": "Concierge Service",
                        "brandings": [
                            "/v2/branding/3",
                            "/v2/branding/4"
                        ]
                    },
                    "branding": {
                        "id": 4,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 4,
                            "code": "MAMM",
                            "name": "Marsdens",
                            "agency": "/v2/agency/5",
                            "defaultbookingbrand": "/v2/bookingbrand/4",
                            "website": "www.mabb.co.uk",
                            "email": "info@mabb.co.uk"
                        },
                        "bookingbrand": {
                            "id": 4,
                            "code": "MABB",
                            "name": "Marsdens Devon Cottages",
                            "agency": "/v2/agency/5"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 20,
                "extrabranding": {
                    "id": 25,
                    "extra": {
                        "id": 14,
                        "extracode": "SDAW",
                        "extratype": "Booking",
                        "description": "SD Withhold to Agency",
                        "brandings": [
                            "/v2/branding/1",
                            "/v2/branding/2",
                            "/v2/branding/3",
                            "/v2/branding/4"
                        ]
                    },
                    "branding": {
                        "id": 1,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 1,
                            "code": "MAD",
                            "name": "Marsdens Devon",
                            "agency": "/v2/agency/3",
                            "defaultbookingbrand": "/v2/bookingbrand/1",
                            "website": "www.mad.co.uk",
                            "email": "info@mad.co.uk"
                        },
                        "bookingbrand": {
                            "id": 1,
                            "code": "MAD",
                            "name": "Mardens Devon",
                            "agency": "/v2/agency/3"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 21,
                "extrabranding": {
                    "id": 26,
                    "extra": {
                        "id": 14,
                        "extracode": "SDAW",
                        "extratype": "Booking",
                        "description": "SD Withhold to Agency",
                        "brandings": [
                            "/v2/branding/1",
                            "/v2/branding/2",
                            "/v2/branding/3",
                            "/v2/branding/4"
                        ]
                    },
                    "branding": {
                        "id": 2,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 2,
                            "code": "MAC",
                            "name": "Marsdens Cornwall",
                            "agency": "/v2/agency/3",
                            "defaultbookingbrand": "/v2/bookingbrand/2",
                            "website": null,
                            "email": null
                        },
                        "bookingbrand": {
                            "id": 2,
                            "code": "MAC",
                            "name": "Mardens Cornwall",
                            "agency": "/v2/agency/3"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 22,
                "extrabranding": {
                    "id": 27,
                    "extra": {
                        "id": 14,
                        "extracode": "SDAW",
                        "extratype": "Booking",
                        "description": "SD Withhold to Agency",
                        "brandings": [
                            "/v2/branding/1",
                            "/v2/branding/2",
                            "/v2/branding/3",
                            "/v2/branding/4"
                        ]
                    },
                    "branding": {
                        "id": 3,
                        "brandinggroup": {
                            "id": 2,
                            "code": "NOAA",
                            "name": "Norfolk",
                            "agency": "/v2/agency/4",
                            "workorderssettings": [
                                "/v2/brandinggroup/2/workorderssettings/1"
                            ]
                        },
                        "marketingbrand": {
                            "id": 3,
                            "code": "NOMM",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4",
                            "defaultbookingbrand": "/v2/bookingbrand/3",
                            "website": "www.norfolk.co.uk",
                            "email": "info@norfolk.co.uk"
                        },
                        "bookingbrand": {
                            "id": 3,
                            "code": "NOBB",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31",
                        "petextrabranding": {
                            "id": 11,
                            "extra": {
                                "id": 4,
                                "extracode": "PET",
                                "extratype": "Booking",
                                "description": "Pet charge",
                                "brandings": [
                                    "/v2/branding/3"
                                ]
                            }
                        }
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 23,
                "extrabranding": {
                    "id": 28,
                    "extra": {
                        "id": 14,
                        "extracode": "SDAW",
                        "extratype": "Booking",
                        "description": "SD Withhold to Agency",
                        "brandings": [
                            "/v2/branding/1",
                            "/v2/branding/2",
                            "/v2/branding/3",
                            "/v2/branding/4"
                        ]
                    },
                    "branding": {
                        "id": 4,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 4,
                            "code": "MAMM",
                            "name": "Marsdens",
                            "agency": "/v2/agency/5",
                            "defaultbookingbrand": "/v2/bookingbrand/4",
                            "website": "www.mabb.co.uk",
                            "email": "info@mabb.co.uk"
                        },
                        "bookingbrand": {
                            "id": 4,
                            "code": "MABB",
                            "name": "Marsdens Devon Cottages",
                            "agency": "/v2/agency/5"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 24,
                "extrabranding": {
                    "id": 33,
                    "extra": {
                        "id": 16,
                        "extracode": "SDTW",
                        "extratype": "Booking",
                        "description": "SD Withhold to Third Party",
                        "brandings": [
                            "/v2/branding/1",
                            "/v2/branding/2",
                            "/v2/branding/3",
                            "/v2/branding/4"
                        ]
                    },
                    "branding": {
                        "id": 1,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 1,
                            "code": "MAD",
                            "name": "Marsdens Devon",
                            "agency": "/v2/agency/3",
                            "defaultbookingbrand": "/v2/bookingbrand/1",
                            "website": "www.mad.co.uk",
                            "email": "info@mad.co.uk"
                        },
                        "bookingbrand": {
                            "id": 1,
                            "code": "MAD",
                            "name": "Mardens Devon",
                            "agency": "/v2/agency/3"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 25,
                "extrabranding": {
                    "id": 34,
                    "extra": {
                        "id": 16,
                        "extracode": "SDTW",
                        "extratype": "Booking",
                        "description": "SD Withhold to Third Party",
                        "brandings": [
                            "/v2/branding/1",
                            "/v2/branding/2",
                            "/v2/branding/3",
                            "/v2/branding/4"
                        ]
                    },
                    "branding": {
                        "id": 2,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 2,
                            "code": "MAC",
                            "name": "Marsdens Cornwall",
                            "agency": "/v2/agency/3",
                            "defaultbookingbrand": "/v2/bookingbrand/2",
                            "website": null,
                            "email": null
                        },
                        "bookingbrand": {
                            "id": 2,
                            "code": "MAC",
                            "name": "Mardens Cornwall",
                            "agency": "/v2/agency/3"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 26,
                "extrabranding": {
                    "id": 35,
                    "extra": {
                        "id": 16,
                        "extracode": "SDTW",
                        "extratype": "Booking",
                        "description": "SD Withhold to Third Party",
                        "brandings": [
                            "/v2/branding/1",
                            "/v2/branding/2",
                            "/v2/branding/3",
                            "/v2/branding/4"
                        ]
                    },
                    "branding": {
                        "id": 3,
                        "brandinggroup": {
                            "id": 2,
                            "code": "NOAA",
                            "name": "Norfolk",
                            "agency": "/v2/agency/4",
                            "workorderssettings": [
                                "/v2/brandinggroup/2/workorderssettings/1"
                            ]
                        },
                        "marketingbrand": {
                            "id": 3,
                            "code": "NOMM",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4",
                            "defaultbookingbrand": "/v2/bookingbrand/3",
                            "website": "www.norfolk.co.uk",
                            "email": "info@norfolk.co.uk"
                        },
                        "bookingbrand": {
                            "id": 3,
                            "code": "NOBB",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31",
                        "petextrabranding": {
                            "id": 11,
                            "extra": {
                                "id": 4,
                                "extracode": "PET",
                                "extratype": "Booking",
                                "description": "Pet charge",
                                "brandings": [
                                    "/v2/branding/3"
                                ]
                            }
                        }
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 27,
                "extrabranding": {
                    "id": 36,
                    "extra": {
                        "id": 16,
                        "extracode": "SDTW",
                        "extratype": "Booking",
                        "description": "SD Withhold to Third Party",
                        "brandings": [
                            "/v2/branding/1",
                            "/v2/branding/2",
                            "/v2/branding/3",
                            "/v2/branding/4"
                        ]
                    },
                    "branding": {
                        "id": 4,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 4,
                            "code": "MAMM",
                            "name": "Marsdens",
                            "agency": "/v2/agency/5",
                            "defaultbookingbrand": "/v2/bookingbrand/4",
                            "website": "www.mabb.co.uk",
                            "email": "info@mabb.co.uk"
                        },
                        "bookingbrand": {
                            "id": 4,
                            "code": "MABB",
                            "name": "Marsdens Devon Cottages",
                            "agency": "/v2/agency/5"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 28,
                "extrabranding": {
                    "id": 43,
                    "extra": {
                        "id": 1,
                        "extracode": "BKFE",
                        "extratype": "Booking",
                        "description": "Booking Fee",
                        "brandings": [
                            "/v2/branding/1",
                            "/v2/branding/2",
                            "/v2/branding/3",
                            "/v2/branding/4",
                            "/v2/branding/6"
                        ]
                    },
                    "branding": {
                        "id": 6,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 5,
                            "code": "CCMM",
                            "name": "Completely Cottages",
                            "agency": "/v2/agency/6",
                            "defaultbookingbrand": "/v2/bookingbrand/5",
                            "website": "www.comm.co.uk",
                            "email": "info@comm.co.uk"
                        },
                        "bookingbrand": {
                            "id": 5,
                            "code": "CCBB",
                            "name": "Completely Cottages",
                            "agency": "/v2/agency/6"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 1,
                    "nominalcode": "4320",
                    "description": "BOOKING FEES",
                    "usebranding": true
                }
            },
            {
                "id": 29,
                "extrabranding": {
                    "id": 41,
                    "extra": {
                        "id": 3,
                        "extracode": "HEAT",
                        "extratype": "Booking",
                        "description": "Heating",
                        "brandings": [
                            "/v2/branding/2",
                            "/v2/branding/3",
                            "/v2/branding/4",
                            "/v2/branding/6"
                        ]
                    },
                    "branding": {
                        "id": 6,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 5,
                            "code": "CCMM",
                            "name": "Completely Cottages",
                            "agency": "/v2/agency/6",
                            "defaultbookingbrand": "/v2/bookingbrand/5",
                            "website": "www.comm.co.uk",
                            "email": "info@comm.co.uk"
                        },
                        "bookingbrand": {
                            "id": 5,
                            "code": "CCBB",
                            "name": "Completely Cottages",
                            "agency": "/v2/agency/6"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 30,
                "extrabranding": {
                    "id": 42,
                    "extra": {
                        "id": 2,
                        "extracode": "CANC",
                        "extratype": "Booking",
                        "description": "Cancellation Scheme",
                        "brandings": [
                            "/v2/branding/1",
                            "/v2/branding/3",
                            "/v2/branding/4",
                            "/v2/branding/6"
                        ]
                    },
                    "branding": {
                        "id": 6,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 5,
                            "code": "CCMM",
                            "name": "Completely Cottages",
                            "agency": "/v2/agency/6",
                            "defaultbookingbrand": "/v2/bookingbrand/5",
                            "website": "www.comm.co.uk",
                            "email": "info@comm.co.uk"
                        },
                        "bookingbrand": {
                            "id": 5,
                            "code": "CCBB",
                            "name": "Completely Cottages",
                            "agency": "/v2/agency/6"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 31,
                "extrabranding": {
                    "id": 44,
                    "extra": {
                        "id": 9,
                        "extracode": "OFEE",
                        "extratype": "Booking",
                        "description": "Owner Fee",
                        "brandings": [
                            "/v2/branding/3",
                            "/v2/branding/6"
                        ]
                    },
                    "branding": {
                        "id": 6,
                        "brandinggroup": {
                            "id": 1,
                            "code": "SWAA",
                            "name": "South West",
                            "agency": "/v2/agency/5",
                            "workorderssettings": []
                        },
                        "marketingbrand": {
                            "id": 5,
                            "code": "CCMM",
                            "name": "Completely Cottages",
                            "agency": "/v2/agency/6",
                            "defaultbookingbrand": "/v2/bookingbrand/5",
                            "website": "www.comm.co.uk",
                            "email": "info@comm.co.uk"
                        },
                        "bookingbrand": {
                            "id": 5,
                            "code": "CCBB",
                            "name": "Completely Cottages",
                            "agency": "/v2/agency/6"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            },
            {
                "id": 32,
                "extrabranding": {
                    "id": 45,
                    "extra": {
                        "id": 18,
                        "extracode": "YBFE",
                        "extratype": "Booking",
                        "description": "Booking Fee Discount Extra",
                        "brandings": [
                            "/v2/branding/3"
                        ]
                    },
                    "branding": {
                        "id": 3,
                        "brandinggroup": {
                            "id": 2,
                            "code": "NOAA",
                            "name": "Norfolk",
                            "agency": "/v2/agency/4",
                            "workorderssettings": [
                                "/v2/brandinggroup/2/workorderssettings/1"
                            ]
                        },
                        "marketingbrand": {
                            "id": 3,
                            "code": "NOMM",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4",
                            "defaultbookingbrand": "/v2/bookingbrand/3",
                            "website": "www.norfolk.co.uk",
                            "email": "info@norfolk.co.uk"
                        },
                        "bookingbrand": {
                            "id": 3,
                            "code": "NOBB",
                            "name": "Norfolk Country Cottages",
                            "agency": "/v2/agency/4"
                        },
                        "lettingincomevatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "bacsbankaccount": "",
                        "bacsoutputtype": null,
                        "bacssettings": null,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31",
                        "petextrabranding": {
                            "id": 11,
                            "extra": {
                                "id": 4,
                                "extracode": "PET",
                                "extratype": "Booking",
                                "description": "Pet charge",
                                "brandings": [
                                    "/v2/branding/3"
                                ]
                            }
                        }
                    },
                    "petextrabranding": false
                },
                "account": {
                    "id": 8,
                    "nominalcode": "1111",
                    "description": "BAD DEBT PROVISION",
                    "usebranding": false
                }
            }
        ]

### Add a new ExtraBranding to an EntryDefinition [POST]

The following fields should be provided in the POST array

* ```extrabrandingid``` The ExtraBranding id
* ```accountid``` The id of the Account the ExtraBranding is assigned to

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/transactiondefinition/1/doubleentrydefinition/1/entrydefinition/1/extrabranding/1

## Transaction EntryDefinition ExtraBranding Detail [/v2/transactiondefinition/{id}/doubleentrydefinition/{id2}/entrydefinition/{id3}/extrabranding/{id4}]
Postman: transactiondefinition/2/doubleentrydefinition/3/entrydefinition/1/extrabranding/1

+ Parameters

    + id (required, integer, `2`) ... The id of the TransactionDefinition
    + id2 (required, integer, `3`) ... The id of the DoubleEntryDefinition
    + id3 (required, integer, `1`) ... The id of the EntryDefinition
    + id4 (required, integer, `1`) ... The id of the EntryDefinitionExtraBranding

### Gets the details of an EntryDefinition ExtraBranding [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "extrabranding": {
              "id": 1,
              "extra": {
                "id": 1,
                "extracode": "BKFE",
                "extratype": "Booking",
                "description": "Booking Fee",
                "brandings": [
                  "/v2/branding/1",
                  "/v2/branding/2",
                  "/v2/branding/3",
                  "/v2/branding/4",
                  "/v2/branding/6"
                ]
              },
              "branding": {
                "id": 1,
                "brandinggroup": {
                  "id": 1,
                  "code": "SWAA",
                  "name": "South West",
                  "agency": "/v2/agency/5",
                  "workorderssettings": []
                },
                "marketingbrand": {
                  "id": 1,
                  "code": "MAD",
                  "name": "Marsdens Devon",
                  "agency": "/v2/agency/3",
                  "defaultbookingbrand": "/v2/bookingbrand/1",
                  "website": "www.mad.co.uk",
                  "email": "info@mad.co.uk"
                },
                "bookingbrand": {
                  "id": 1,
                  "code": "MAD",
                  "name": "Mardens Devon",
                  "agency": "/v2/agency/3"
                },
                "lettingincomevatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "bacsbankaccount": "",
                "bacsoutputtype": null,
                "bacssettings": null,
                "allowbookingonwebuntil": "2099-12-31",
                "showpricingonwebuntil": "2099-12-31"
              },
              "petextrabranding": false
            },
            "account": {
              "id": 1,
              "nominalcode": "4320",
              "description": "BOOKING FEES",
              "usebranding": true
            }
          }

### Update an EntryDefinition ExtraBranding [PUT]

+ Request (application/x-www-form-urlencoded)

        accountid=43

+ Response 204

### Deletes an EntryDefinition ExtraBranding [DELETE]

+ Response 204




## Transaction EntryDefinition OwnerChargeCode Index [/v2/transactiondefinition/{id}/doubleentrydefinition/{id2}/entrydefinition/{id3}/ownerchargecode]
Postman: transactiondefinition/5/doubleentrydefinition/6/entrydefinition/2/ownerchargecode

+ Parameters

    + id (required, integer, `7`) ... The id of the TransactionDefinition
    + id2 (required, integer, `6`) ... The id of the DoubleEntryDefinition
    + id3 (required, integer, `2`) ... The id of the EntryDefinition

### Get all OwnerChargeCodes for an EntryDefinition [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "ownerchargecode": {
                "id": 3,
                "ownerchargecode": "4405",
                "description": "Brochure Fees",
                "vatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "recharge": false
              },
              "account": {
                "id": 75,
                "nominalcode": "4405",
                "description": "BROCHURE FEES",
                "usebranding": true
              }
            },
            {
              "id": 2,
              "ownerchargecode": {
                "id": 4,
                "ownerchargecode": "4410",
                "description": "Contract Charges",
                "vatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "recharge": false
              },
              "account": {
                "id": 76,
                "nominalcode": "4410",
                "description": "CONTRACT CHARGES",
                "usebranding": true
              }
            },
            {
              "id": 3,
              "ownerchargecode": {
                "id": 5,
                "ownerchargecode": "4430",
                "description": "VE Membership",
                "vatband": [],
                "recharge": true
              },
              "account": {
                "id": 80,
                "nominalcode": "4430",
                "description": "VISIT BRITAIN ADMIN FEES",
                "usebranding": true
              }
            },
            {
              "id": 4,
              "ownerchargecode": {
                "id": 6,
                "ownerchargecode": "4500",
                "description": "MS - Call Out Fees",
                "vatband": [],
                "recharge": true
              },
              "account": {
                "id": 83,
                "nominalcode": "4500",
                "description": "MS - CALL OUT FEES",
                "usebranding": true
              }
            },
            {
              "id": 5,
              "ownerchargecode": {
                "id": 7,
                "ownerchargecode": "4501",
                "description": "MS - Stock Items and Parts",
                "vatband": [],
                "recharge": true
              },
              "account": {
                "id": 84,
                "nominalcode": "4501",
                "description": "MS - STOCK ITEMS AND PARTS",
                "usebranding": true
              }
            },
            {
              "id": 6,
              "ownerchargecode": {
                "id": 8,
                "ownerchargecode": "4502",
                "description": "MS - Third Party Services",
                "vatband": [],
                "recharge": true
              },
              "account": {
                "id": 85,
                "nominalcode": "4502",
                "description": "MS - THIRD PARTY SERVICES",
                "usebranding": true
              }
            },
            {
              "id": 7,
              "ownerchargecode": {
                "id": 9,
                "ownerchargecode": "4503",
                "description": "MS - Contract Fees",
                "vatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "recharge": false
              },
              "account": {
                "id": 86,
                "nominalcode": "4503",
                "description": "MS - CONTRACT FEE",
                "usebranding": true
              }
            },
            {
              "id": 8,
              "ownerchargecode": {
                "id": 10,
                "ownerchargecode": "4504",
                "description": "MS - House Keeping Income",
                "vatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "recharge": false
              },
              "account": {
                "id": 87,
                "nominalcode": "4504",
                "description": "MS - HOUSEKEEPING INCOME",
                "usebranding": true
              }
            },
            {
              "id": 9,
              "ownerchargecode": {
                "id": 11,
                "ownerchargecode": "4505",
                "description": "MS - Internal Pat Testing",
                "vatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "recharge": false
              },
              "account": {
                "id": 88,
                "nominalcode": "4505",
                "description": "MS - INTERNAL PAT TESTING CHARGES",
                "usebranding": true
              }
            },
            {
              "id": 10,
              "ownerchargecode": {
                "id": 12,
                "ownerchargecode": "4506",
                "description": "MS - Miscellaneous Income",
                "vatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "recharge": false
              },
              "account": {
                "id": 89,
                "nominalcode": "4506",
                "description": "MS - MISCELLANEOUS INCOME",
                "usebranding": true
              }
            },
            {
              "id": 11,
              "ownerchargecode": {
                "id": 13,
                "ownerchargecode": "4507",
                "description": "MS - Linen, Toiletries & Towels - Stock",
                "vatband": [],
                "recharge": true
              },
              "account": {
                "id": 90,
                "nominalcode": "4507",
                "description": "MS - LINEN, TOILETRIES & TOWELS - STOCK",
                "usebranding": true
              }
            },
            {
              "id": 12,
              "ownerchargecode": {
                "id": 14,
                "ownerchargecode": "4508",
                "description": "MS - Stock Items and Parts - Sold at Cost",
                "vatband": [],
                "recharge": true
              },
              "account": {
                "id": 91,
                "nominalcode": "4508",
                "description": "MS - STOCK ITEMS & PARTS - SOLD AT COST",
                "usebranding": true
              }
            }
          ]

### Add a new OwnerChargeCode to an EntryDefinition [POST]

The following fields should be provided in the POST array

* ```ownerchargecodeid``` The OwnerChargeCode id
* ```accountid``` The id of the Account the OwnerChargeCode is assigned to

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/transactiondefinition/1/doubleentrydefinition/1/entrydefinition/1/ownerchargecode/1

## Transaction EntryDefinition OwnerChargeCode Detail [/v2/transactiondefinition/{id}/doubleentrydefinition/{id2}/entrydefinition/{id3}/ownerchargecode/{id4}]
Postman: transactiondefinition/5/doubleentrydefinition/6/entrydefinition/2/ownerchargecode/1

+ Parameters

    + id (required, integer, `7`) ... The id of the TransactionDefinition
    + id2 (required, integer, `6`) ... The id of the DoubleEntryDefinition
    + id3 (required, integer, `2`) ... The id of the EntryDefinition
    + id4 (required, integer, `1`) ... The id of the EntryDefinitionOwnerChargeCode

### Gets the details of an EntryDefinition OwnerChargeCode [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "ownerchargecode": {
              "id": 3,
              "ownerchargecode": "4405",
              "description": "Brochure Fees",
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "recharge": false
            },
            "account": {
              "id": 75,
              "nominalcode": "4405",
              "description": "BROCHURE FEES",
              "usebranding": true
            }
          }

### Update an EntryDefinition OwnerChargeCode [PUT]

+ Request (application/x-www-form-urlencoded)

        accountid=43

+ Response 204

### Deletes an EntryDefinition OwnerChargeCode [DELETE]

+ Response 204



## Transaction EntryDefinition PaymentMethod Index [/v2/transactiondefinition/{id}/doubleentrydefinition/{id2}/entrydefinition/{id3}/paymentmethod]
Postman: transactiondefinition/3/doubleentrydefinition/5/entrydefinition/3/paymentmethod

+ Parameters

    + id (required, integer, `3`) ... The id of the TransactionDefinition
    + id2 (required, integer, `5`) ... The id of the DoubleEntryDefinition
    + id3 (required, integer, `3`) ... The id of the EntryDefinition

### Get all PaymentMethods for an EntryDefinition [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "paymentmethod": {
                "id": 1,
                "paymentmethod": "B",
                "description": "Euro Transfer"
              },
              "account": {
                "id": 53,
                "nominalcode": "2130",
                "description": "EURO CONTROL ACCOUNT",
                "usebranding": false
              }
            },
            {
              "id": 2,
              "paymentmethod": {
                "id": 2,
                "paymentmethod": "C",
                "description": "Cheque"
              },
              "account": {
                "id": 55,
                "nominalcode": "2132",
                "description": "CHEQUE/STERLING CONTROL ACCOUNT",
                "usebranding": false
              }
            },
            {
              "id": 3,
              "paymentmethod": {
                "id": 3,
                "paymentmethod": "E",
                "description": "Bank Charges"
              },
              "account": {
                "id": 92,
                "nominalcode": "7901",
                "description": "BANK CHARGES",
                "usebranding": true
              }
            },
            {
              "id": 4,
              "paymentmethod": {
                "id": 4,
                "paymentmethod": "F",
                "description": "Canc Fund Xfer"
              },
              "account": {
                "id": 35,
                "nominalcode": "2106",
                "description": "CPS FUND 2016",
                "usebranding": true
              }
            },
            {
              "id": 5,
              "paymentmethod": {
                "id": 5,
                "paymentmethod": "G",
                "description": "Sterling Tfr"
              },
              "account": {
                "id": 55,
                "nominalcode": "2132",
                "description": "CHEQUE/STERLING CONTROL ACCOUNT",
                "usebranding": false
              }
            },
            {
              "id": 6,
              "paymentmethod": {
                "id": 6,
                "paymentmethod": "H",
                "description": "HO Recharge"
              },
              "account": {
                "id": 7,
                "nominalcode": "1104",
                "description": "HO RECOVERY",
                "usebranding": true
              }
            },
            {
              "id": 7,
              "paymentmethod": {
                "id": 7,
                "paymentmethod": "I",
                "description": "Agency Comm"
              },
              "account": {
                "id": 64,
                "nominalcode": "4305",
                "description": "AGENTS COMMISSION",
                "usebranding": true
              }
            },
            {
              "id": 8,
              "paymentmethod": {
                "id": 8,
                "paymentmethod": "J",
                "description": "Interhome Rcpt"
              },
              "account": {
                "id": 15,
                "nominalcode": "1113",
                "description": "INTERHOME - DO NOT USE",
                "usebranding": false
              }
            },
            {
              "id": 9,
              "paymentmethod": {
                "id": 9,
                "paymentmethod": "K",
                "description": "Rectification"
              },
              "account": {
                "id": 70,
                "nominalcode": "4325",
                "description": "RECTIFICATION COSTS",
                "usebranding": true
              }
            },
            {
              "id": 10,
              "paymentmethod": {
                "id": 11,
                "paymentmethod": "M",
                "description": "Cash Money"
              },
              "account": {
                "id": 55,
                "nominalcode": "2132",
                "description": "CHEQUE/STERLING CONTROL ACCOUNT",
                "usebranding": false
              }
            },
            {
              "id": 11,
              "paymentmethod": {
                "id": 13,
                "paymentmethod": "Q",
                "description": "Petty Cash Tin"
              },
              "account": {
                "id": 55,
                "nominalcode": "2132",
                "description": "CHEQUE/STERLING CONTROL ACCOUNT",
                "usebranding": false
              }
            },
            {
              "id": 12,
              "paymentmethod": {
                "id": 14,
                "paymentmethod": "R",
                "description": "C.Card + Comm"
              },
              "account": {
                "id": 54,
                "nominalcode": "2131",
                "description": "SAGE PAY CONTROL ACCOUNT",
                "usebranding": true
              }
            },
            {
              "id": 13,
              "paymentmethod": {
                "id": 15,
                "paymentmethod": "S",
                "description": "C.Card no Comm"
              },
              "account": {
                "id": 54,
                "nominalcode": "2131",
                "description": "SAGE PAY CONTROL ACCOUNT",
                "usebranding": true
              }
            },
            {
              "id": 14,
              "paymentmethod": {
                "id": 16,
                "paymentmethod": "T",
                "description": "Transfer"
              },
              "account": {
                "id": 96,
                "nominalcode": "8200",
                "description": "CONTRA TRANSFERS",
                "usebranding": false
              }
            },
            {
              "id": 15,
              "paymentmethod": {
                "id": 17,
                "paymentmethod": "U",
                "description": "Affiliate Cost"
              },
              "account": {
                "id": 91,
                "nominalcode": "6000",
                "description": "AFFILIATES & REFERRERS",
                "usebranding": true
              }
            },
            {
              "id": 16,
              "paymentmethod": {
                "id": 18,
                "paymentmethod": "V",
                "description": "Gift Voucher"
              },
              "account": {
                "id": 42,
                "nominalcode": "2113",
                "description": "GIFT VOUCHER PURCHASES",
                "usebranding": false
              }
            },
            {
              "id": 17,
              "paymentmethod": {
                "id": 19,
                "paymentmethod": "W",
                "description": "Web Payment"
              },
              "account": {
                "id": 54,
                "nominalcode": "2131",
                "description": "SAGE PAY CONTROL ACCOUNT",
                "usebranding": true
              }
            },
            {
              "id": 18,
              "paymentmethod": {
                "id": 20,
                "paymentmethod": "X",
                "description": "Euro Gain/Loss"
              },
              "account": {
                "id": 95,
                "nominalcode": "7950",
                "description": "FX GAINS/LOSSES",
                "usebranding": false
              }
            }
          ]

### Add a new PaymentMethod to an EntryDefinition [POST]

The following fields should be provided in the POST array

* ```paymentmethodid``` The PaymentMethod id
* ```accountid``` The id of the Account the PaymentMethod is assigned to

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/transactiondefinition/1/doubleentrydefinition/1/entrydefinition/1/paymentmethod/1

## Transaction EntryDefinition PaymentMethod Detail [/v2/transactiondefinition/{id}/doubleentrydefinition/{id2}/entrydefinition/{id3}/paymentmethod/{id4}]
Postman: transactiondefinition/3/doubleentrydefinition/5/entrydefinition/3/paymentmethod/1

+ Parameters

    + id (required, integer, `3`) ... The id of the TransactionDefinition
    + id2 (required, integer, `5`) ... The id of the DoubleEntryDefinition
    + id3 (required, integer, `3`) ... The id of the EntryDefinition
    + id4 (required, integer, `1`) ... The id of the EntryDefinitionPaymentMethod

### Gets the details of an EntryDefinition PaymentMethod [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "paymentmethod": {
              "id": 1,
              "paymentmethod": "B",
              "description": "Euro Transfer"
            },
            "account": {
              "id": 53,
              "nominalcode": "2130",
              "description": "EURO CONTROL ACCOUNT",
              "usebranding": false
            }
          }

### Update an EntryDefinition PaymentMethod [PUT]

+ Request (application/x-www-form-urlencoded)

        accountid=43

+ Response 204

### Deletes an EntryDefinition PaymentMethod [DELETE]

+ Response 204



## TabsEvents [/v2/tabsevent]
### Retreive a list of TabsEvents [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "name": "Basic price change",
              "description": "A change in the basic price of a booking, however caused"
            },
            {
              "id": 2,
              "name": "Extra sale",
              "description": "Sale or cancellation of an extra"
            },
            {
              "id": 3,
              "name": "Customer payment",
              "description": "Customer payment or refund"
            },
            {
              "id": 4,
              "name": "Booking payment",
              "description": "Booking payment or refund from/to Customer a/c"
            },
            {
              "id": 5,
              "name": "SD payment",
              "description": "SD payment or refund from/to Customer a/c"
            },
            {
              "id": 6,
              "name": "Swap",
              "description": "Move funds between Booking and SD"
            },
            {
              "id": 7,
              "name": "Owner charge",
              "description": "Owner recharge or management charge"
            },
            {
              "id": 8,
              "name": "Owner payment",
              "description": "Payment of an owner in realtion to bookings less charges"
            },
            {
              "id": 9,
              "name": "Owner receipt",
              "description": "Receipt of funds from an owner"
            }
          ]

### Create a new TabsEvent [POST]

+ Response 501

## TabsEvent Detail [/v2/tabsevent/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the TabsEvent to get

### Gets the details of an tabsevent [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "Basic price change",
            "description": "A change in the basic price of a booking, however caused"
          }

### Update the details of an TabsEvent [PUT]

+ Response 501

### Delete an TabsEvent [DELETE]

+ Response 501



## TabsEvent TransactionDefinition Index [/v2/tabsevent/{id}/transactiondefinition]
+ Parameters

    + id (required, integer, `1`) ... The id of the TabsEvent

### Get all TransactionDefinitions for a TabsEvent [GET]

+ Response 200 (application/json)

        [
            {
              "id": 2,
              "transactiondefinition": {
                "id": 1,
                "transactionname": "Basic Price change",
                "description": "Change in the Basic Price of the booking",
                "accountingdatedefinition": {
                  "id": 1,
                  "name": "Confirmation Date",
                  "description": "Date of Confirmation of a Booking, either by a tabs user, or by first payment"
                }
              }
            }
          ]

### Add a new TransactionDefinition to a TabsEvent Template [POST]

The following fields should be provided in the POST array

* ```transactiondefinitionid``` The id of the transactiondefinition

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/tabsevent/4/transactiondefinition/4

## TabsEvent TransactionDefinition Detail [/v2/tabsevent/{id}/transactiondefinition/{id2}]
+ Parameters

    + id (required, integer, `1`) ... The id of the TabsEvent
    + id2 (required, integer, `2`) ... The id of the TransactionDefinition

### Gets the details of a TabsEvent TransactionDefinition [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "transactiondefinition": {
              "id": 1,
              "transactionname": "Basic Price change",
              "description": "Change in the Basic Price of the booking",
              "accountingdatedefinition": {
                "id": 1,
                "name": "Confirmation Date",
                "description": "Date of Confirmation of a Booking, either by a tabs user, or by first payment"
              }
            }
          }

### Update a TabsEvent TransactionDefinition [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. transactiondefinitionid=6

+ Response 204

### Deletes a TabsEvent TransactionDefinition [DELETE]

+ Response 204




## Transactions [/v2/transaction{?page,limit}]
transaction?page=1&limit=2

+ Parameters

    + page (optional, integer, `1`) ... The page of results to return
    + limit (optional, integer, `2`) ... The number of results to return

### Retreive a list of Transactions [GET]

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 6,
            "page": 1,
            "count": 2,
            "limit": 2,
            "time": 0,
            "orderBy": null,
            "filter": "",
            "previous": null,
            "next": "/plato/web/app_dev.php/v2/transaction?page=2&limit=2&actorId=1",
            "elements": [
              {
                "id": 1,
                "transactiondatetime": "2016-09-06 15:42:02",
                "accountingdate": "2026-07-31",
                "accountingperiod": {
                  "id": 25,
                  "name": "July 2026",
                  "startdate": "2026-07-01",
                  "enddate": "2026-07-31",
                  "closed": ""
                },
                "transactiondefinition": {
                  "id": 2,
                  "transactionname": "Extra",
                  "description": "Addition or cancellation of an extra",
                  "accountingdatedefinition": {
                    "id": 1,
                    "name": "Confirmation Date",
                    "description": "Date of Confirmation of a Booking, either by a tabs user, or by first payment"
                  },
                  "transactionsource": {
                    "id": 2,
                    "name": "Extra",
                    "description": "Booking Extra"
                  },
                  "donotmodify": true,
                  "requiresbooking": true,
                  "requiresbookingextra": true,
                  "requirescustomer": false,
                  "requiresactorpayment": false,
                  "requiresbookingpayment": false,
                  "requiresproperty": true,
                  "requiresowner": true,
                  "requiresownercharge": false,
                  "requiresownerpayment": false
                },
                "booking": "/v2/booking/1",
                "bookingextra": "/v2/booking/1/extra/1",
                "customer": "",
                "actorpayment": "",
                "bookingpayment": "",
                "owner": "/v2/owner/16",
                "ownercharge": "",
                "ownerpayment": "",
                "property": "/v2/property/1",
                "entries": [
                  {
                    "id": 1,
                    "account": {
                      "id": 70,
                      "nominalcode": "4320",
                      "description": "BOOKING FEES",
                      "usebranding": true
                    },
                    "amount": 22.5,
                    "doubleentrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/3",
                    "entrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/3/entrydefinition/1",
                    "bookingbrand": {
                      "id": 3,
                      "code": "NOBB",
                      "name": "Norfolk Country Cottages",
                      "agency": "/v2/agency/4"
                    }
                  },
                  {
                    "id": 2,
                    "account": {
                      "id": 3,
                      "nominalcode": "1100",
                      "description": "DEBTORS CONTROL ACCOUNT",
                      "usebranding": true
                    },
                    "amount": -27,
                    "doubleentrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/3",
                    "entrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/3/entrydefinition/10",
                    "bookingbrand": {
                      "id": 3,
                      "code": "NOBB",
                      "name": "Norfolk Country Cottages",
                      "agency": "/v2/agency/4"
                    }
                  },
                  {
                    "id": 3,
                    "account": {
                      "id": 57,
                      "nominalcode": "2200",
                      "description": "SALES VAT CONTROL",
                      "usebranding": false
                    },
                    "amount": 4.5,
                    "doubleentrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/3",
                    "entrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/3/entrydefinition/11",
                    "bookingbrand": []
                  }
                ]
              },
              {
                "id": 2,
                "transactiondatetime": "2016-09-06 15:45:02",
                "accountingdate": null,
                "accountingperiod": [],
                "transactiondefinition": {
                  "id": 2,
                  "transactionname": "Extra",
                  "description": "Addition or cancellation of an extra",
                  "accountingdatedefinition": {
                    "id": 1,
                    "name": "Confirmation Date",
                    "description": "Date of Confirmation of a Booking, either by a tabs user, or by first payment"
                  },
                  "transactionsource": {
                    "id": 2,
                    "name": "Extra",
                    "description": "Booking Extra"
                  },
                  "donotmodify": true,
                  "requiresbooking": true,
                  "requiresbookingextra": true,
                  "requirescustomer": false,
                  "requiresactorpayment": false,
                  "requiresbookingpayment": false,
                  "requiresproperty": true,
                  "requiresowner": true,
                  "requiresownercharge": false,
                  "requiresownerpayment": false
                },
                "booking": "/v2/booking/1",
                "bookingextra": "/v2/booking/1/extra/2",
                "customer": "",
                "actorpayment": "",
                "bookingpayment": "",
                "owner": "/v2/owner/16",
                "ownercharge": "",
                "ownerpayment": "",
                "property": "/v2/property/1",
                "entries": [
                  {
                    "id": 4,
                    "account": {
                      "id": 3,
                      "nominalcode": "1100",
                      "description": "DEBTORS CONTROL ACCOUNT",
                      "usebranding": true
                    },
                    "amount": -9.75,
                    "doubleentrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/2",
                    "entrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/2/entrydefinition/8",
                    "bookingbrand": {
                      "id": 3,
                      "code": "NOBB",
                      "name": "Norfolk Country Cottages",
                      "agency": "/v2/agency/4"
                    }
                  },
                  {
                    "id": 5,
                    "account": {
                      "id": 32,
                      "nominalcode": "2102",
                      "description": "OWNER RENTALS OUTSTANDING",
                      "usebranding": true
                    },
                    "amount": 9.75,
                    "doubleentrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/2",
                    "entrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/2/entrydefinition/9",
                    "bookingbrand": {
                      "id": 3,
                      "code": "NOBB",
                      "name": "Norfolk Country Cottages",
                      "agency": "/v2/agency/4"
                    }
                  }
                ]
              }
            ]
          }

### Create a new Transaction [POST]

+ Response 501

## Transaction Detail [/v2/transaction/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Transaction to get

### Gets the details of an Transaction [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "transactiondatetime": "2016-09-06 15:42:02",
            "accountingdate": "2026-07-31",
            "accountingperiod": {
              "id": 25,
              "name": "July 2026",
              "startdate": "2026-07-01",
              "enddate": "2026-07-31",
              "closed": ""
            },
            "transactiondefinition": {
              "id": 2,
              "transactionname": "Extra",
              "description": "Addition or cancellation of an extra",
              "accountingdatedefinition": {
                "id": 1,
                "name": "Confirmation Date",
                "description": "Date of Confirmation of a Booking, either by a tabs user, or by first payment"
              },
              "transactionsource": {
                "id": 2,
                "name": "Extra",
                "description": "Booking Extra"
              },
              "donotmodify": true,
              "requiresbooking": true,
              "requiresbookingextra": true,
              "requirescustomer": false,
              "requiresactorpayment": false,
              "requiresbookingpayment": false,
              "requiresproperty": true,
              "requiresowner": true,
              "requiresownercharge": false,
              "requiresownerpayment": false
            },
            "booking": "/v2/booking/1",
            "bookingextra": "/v2/booking/1/extra/1",
            "customer": "",
            "actorpayment": "",
            "bookingpayment": "",
            "owner": "/v2/owner/16",
            "ownercharge": "",
            "ownerpayment": "",
            "property": "/v2/property/1",
            "entries": [
              {
                "id": 1,
                "account": {
                  "id": 70,
                  "nominalcode": "4320",
                  "description": "BOOKING FEES",
                  "usebranding": true
                },
                "amount": 22.5,
                "doubleentrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/3",
                "entrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/3/entrydefinition/1",
                "bookingbrand": {
                  "id": 3,
                  "code": "NOBB",
                  "name": "Norfolk Country Cottages",
                  "agency": "/v2/agency/4"
                }
              },
              {
                "id": 2,
                "account": {
                  "id": 3,
                  "nominalcode": "1100",
                  "description": "DEBTORS CONTROL ACCOUNT",
                  "usebranding": true
                },
                "amount": -27,
                "doubleentrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/3",
                "entrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/3/entrydefinition/10",
                "bookingbrand": {
                  "id": 3,
                  "code": "NOBB",
                  "name": "Norfolk Country Cottages",
                  "agency": "/v2/agency/4"
                }
              },
              {
                "id": 3,
                "account": {
                  "id": 57,
                  "nominalcode": "2200",
                  "description": "SALES VAT CONTROL",
                  "usebranding": false
                },
                "amount": 4.5,
                "doubleentrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/3",
                "entrydefinition": "/v2/transactiondefinition/2/doubleentrydefinition/3/entrydefinition/11",
                "bookingbrand": []
              }
            ]
          }

### Update the details of an Transaction [PUT]

+ Response 501

### Delete an Transaction [DELETE]

+ Response 501



## TransactionDefinitions [/v2/transactiondefinition]
### Retreive a list of TransactionDefinitions [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "transactionname": "Basic Price change",
              "description": "Change in the Basic Price of the booking",
              "accountingdatedefinition": {
                "id": 1,
                "name": "Confirmation Date",
                "description": "Date of Confirmation of a Booking, either by a tabs user, or by first payment"
              },
              "transactionsource": {
                "id": 1,
                "name": "Booking",
                "description": "Booking - basic price"
              },
              "donotmodify": true,
              "requiresbooking": true,
              "requiresbookingextra": false,
              "requirescustomer": false,
              "requiresactorpayment": false,
              "requiresbookingpayment": false,
              "requiresproperty": true,
              "requiresowner": true,
              "requiresownercharge": false,
              "requiresownerpayment": false
            },
            {
              "id": 2,
              "transactionname": "Extra",
              "description": "Addition or cancellation of an extra",
              "accountingdatedefinition": {
                "id": 1,
                "name": "Confirmation Date",
                "description": "Date of Confirmation of a Booking, either by a tabs user, or by first payment"
              },
              "transactionsource": {
                "id": 2,
                "name": "Extra",
                "description": "Booking Extra"
              },
              "donotmodify": true,
              "requiresbooking": true,
              "requiresbookingextra": true,
              "requirescustomer": false,
              "requiresactorpayment": false,
              "requiresbookingpayment": false,
              "requiresproperty": true,
              "requiresowner": true,
              "requiresownercharge": false,
              "requiresownerpayment": false
            },
            {
              "id": 3,
              "transactionname": "Customer Payment",
              "description": "A payment or refund from / to the customer",
              "accountingdatedefinition": {
                "id": 5,
                "name": "Created Date",
                "description": "Date the source item was created"
              },
              "transactionsource": {
                "id": 3,
                "name": "Customer Payment",
                "description": "Customer payment or refund"
              },
              "donotmodify": false,
              "requiresbooking": false,
              "requiresbookingextra": false,
              "requirescustomer": true,
              "requiresactorpayment": true,
              "requiresbookingpayment": false,
              "requiresproperty": false,
              "requiresowner": false,
              "requiresownercharge": false,
              "requiresownerpayment": false
            },
            {
              "id": 4,
              "transactionname": "Booking Payment",
              "description": "A payment or refund against a Booking",
              "accountingdatedefinition": {
                "id": 5,
                "name": "Created Date",
                "description": "Date the source item was created"
              },
              "transactionsource": {
                "id": 4,
                "name": "Booking Payment",
                "description": "A booking payment or refund from / to a customer a/c"
              },
              "donotmodify": false,
              "requiresbooking": true,
              "requiresbookingextra": false,
              "requirescustomer": true,
              "requiresactorpayment": false,
              "requiresbookingpayment": true,
              "requiresproperty": false,
              "requiresowner": false,
              "requiresownercharge": false,
              "requiresownerpayment": false
            },
            {
              "id": 5,
              "transactionname": "Security Deposit Payment",
              "description": "A payment or refund of the Security Deposit",
              "accountingdatedefinition": {
                "id": 5,
                "name": "Created Date",
                "description": "Date the source item was created"
              },
              "transactionsource": {
                "id": 5,
                "name": "Security Deposit Payment",
                "description": "A Security Deposit payment or refund from / to a customer a/c"
              },
              "donotmodify": false,
              "requiresbooking": true,
              "requiresbookingextra": false,
              "requirescustomer": true,
              "requiresactorpayment": false,
              "requiresbookingpayment": true,
              "requiresproperty": false,
              "requiresowner": false,
              "requiresownercharge": false,
              "requiresownerpayment": false
            },
            {
              "id": 6,
              "transactionname": "Swap",
              "description": "A transfer of funds between a booking and the SD on the booking",
              "accountingdatedefinition": {
                "id": 5,
                "name": "Created Date",
                "description": "Date the source item was created"
              },
              "transactionsource": {
                "id": 4,
                "name": "Booking Payment",
                "description": "A booking payment or refund from / to a customer a/c"
              },
              "donotmodify": false,
              "requiresbooking": true,
              "requiresbookingextra": false,
              "requirescustomer": false,
              "requiresactorpayment": false,
              "requiresbookingpayment": true,
              "requiresproperty": false,
              "requiresowner": false,
              "requiresownercharge": false,
              "requiresownerpayment": false
            },
            {
              "id": 7,
              "transactionname": "Owner Charge",
              "description": "An owner charge in respect of management fees",
              "accountingdatedefinition": {
                "id": 6,
                "name": "Work Done Date",
                "description": "The date the work was done"
              },
              "transactionsource": {
                "id": 6,
                "name": "Owner Charge",
                "description": "A charge passed on to an Owner from a third-party, or made to an Owner for a service"
              },
              "donotmodify": true,
              "requiresbooking": false,
              "requiresbookingextra": false,
              "requirescustomer": false,
              "requiresactorpayment": false,
              "requiresbookingpayment": false,
              "requiresproperty": true,
              "requiresowner": true,
              "requiresownercharge": true,
              "requiresownerpayment": false
            },
            {
              "id": 8,
              "transactionname": "Owner Recharge",
              "description": "An owner recharge of a third-party charge",
              "accountingdatedefinition": {
                "id": 6,
                "name": "Work Done Date",
                "description": "The date the work was done"
              },
              "transactionsource": {
                "id": 6,
                "name": "Owner Charge",
                "description": "A charge passed on to an Owner from a third-party, or made to an Owner for a service"
              },
              "donotmodify": true,
              "requiresbooking": false,
              "requiresbookingextra": false,
              "requirescustomer": false,
              "requiresactorpayment": false,
              "requiresbookingpayment": false,
              "requiresproperty": true,
              "requiresowner": true,
              "requiresownercharge": true,
              "requiresownerpayment": false
            },
            {
              "id": 9,
              "transactionname": "Owner Charged",
              "description": "An owner charge has been added to a statement",
              "accountingdatedefinition": {
                "id": 7,
                "name": "Statement Date",
                "description": "The date the of the statement"
              },
              "transactionsource": {
                "id": 6,
                "name": "Owner Charge",
                "description": "A charge passed on to an Owner from a third-party, or made to an Owner for a service"
              },
              "donotmodify": true,
              "requiresbooking": false,
              "requiresbookingextra": false,
              "requirescustomer": false,
              "requiresactorpayment": false,
              "requiresbookingpayment": false,
              "requiresproperty": true,
              "requiresowner": true,
              "requiresownercharge": true,
              "requiresownerpayment": true
            }
          ]

### Create a new TransactionDefinition [POST]
The following fields should be provided in the POST array

* ```transactionname``` Name of the TransactionDefinition
* ```description``` Description of the TransactionDefinition
* ```accountingdatedefinitionid``` Id of the AccountingDateDefinition
* ```transactionsourceid``` Id of the TransactionSource
* ```donotmodify``` Whether the transaction details can be modified (optional, default=false)
* ```requiresbooking``` Whether the transaction requires a Booking
* ```requiresbookingextra``` Whether the transaction requires a Booking Extra
* ```requirescustomer``` Whether the transaction requires a Customer
* ```requiresactorpayment``` Whether the transaction requires an Actor Payment
* ```requiresbookingpayment``` Whether the transaction requires a Booking Payment
* ```requiresowner``` Whether the transaction requires an Owner
* ```requiresproperty``` Whether the transaction requires a Property
* ```requiresownercharge``` Whether the transaction requires an Owner Charge
* ```requiresownerpayment``` Whether the transaction requires an Owner Payment

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/transactiondefinition/1

## TransactionDefinition Detail [/v2/transactiondefinition/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the TransactionDefinition

### Gets the details of a TransactionDefinition [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "transactionname": "Basic Price change",
            "description": "Change in the Basic Price of the booking",
            "accountingdatedefinition": {
              "id": 1,
              "name": "Confirmation Date",
              "description": "Date of Confirmation of a Booking, either by a tabs user, or by first payment"
            },
            "transactionsource": {
              "id": 1,
              "name": "Booking",
              "description": "Booking - basic price"
            },
            "donotmodify": true,
            "requiresbooking": true,
            "requiresbookingextra": false,
            "requirescustomer": false,
            "requiresactorpayment": false,
            "requiresbookingpayment": false,
            "requiresproperty": true,
            "requiresowner": true,
            "requiresownercharge": false,
            "requiresownerpayment": false
          }

### Update a TransactionDefinition [PUT]

+ Request (application/x-www-form-urlencoded)

        description=Something different

+ Response 204

### Delete a TransactionDefinition [DELETE]

+ Response 501



## TransactionSources [/v2/transactionsource]
### Retreive a list of TransactionSources [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "name": "Booking",
              "description": "Booking - basic price"
            },
            {
              "id": 2,
              "name": "Extra",
              "description": "Booking Extra"
            },
            {
              "id": 3,
              "name": "Customer Payment",
              "description": "Customer payment or refund"
            },
            {
              "id": 4,
              "name": "Booking Payment",
              "description": "A booking payment or refund from / to a customer a/c"
            },
            {
              "id": 5,
              "name": "Security Deposit Payment",
              "description": "A Security Deposit payment or refund from / to a customer a/c"
            },
            {
              "id": 6,
              "name": "Owner Recharge",
              "description": "A charge passed on to an Owner from a third-party"
            },
            {
              "id": 7,
              "name": "Owner Management Charge",
              "description": "A charge made to an Owner for a service"
            }
          ]

### Create a new TransactionSource [POST]

+ Response 501

## TransactionSource Detail [/v2/transactionsource/{id}]

+ Parameters

    + id (required, integer, `3`) ... The id of the TransactionSource to get

### Gets the details of an transactionsource [GET]

+ Response 200 (application/json)

        {
            "id": 3,
            "name": "Customer Payment",
            "description": "Customer payment or refund"
          }

### Update the details of an TransactionSource [PUT]

+ Response 501

### Delete an TransactionSource [DELETE]

+ Response 501



# Group Actor
An Actor is any person or company involved in the holiday cottage letting business, including Customers, Owners, Cleaners, Agencies, etc

## Customer Address Index [/v2/customer/{id}/address]
+ Parameters

    + id (required, integer, `7`) ... The id of the customer

### Get all addresses for a Customer [GET]
+ Response 200 (application/json)

        [
            {
                "id": 3,
                "type": "P",
                "contactmethodsubtype": "",
                "address": {
                    "id": 1,
                    "line1": "55 Banana Street",
                    "line2": "",
                    "line3": "",
                    "town": "Fictional Town",
                    "county": "Norfolk",
                    "postcode": "NR22 2JG",
                    "country": {
                        "alpha2": "GB",
                        "alpha3": "GBR",
                        "name": "United Kingdom"
                    },
                    "longitude": "0.000000",
                    "latitude": "0.000000",
                    "geohash": ""
                },
                "invalid": false,
                "contactpreferences": [
                    {
                        "id": 2,
                        "branding": "/v2/branding/1",
                        "rolereason": {
                            "id": 1,
                            "role": {
                                "id": 1,
                                "name": "Customer",
                                "donotdelete": true
                            },
                            "reason": {
                                "id": 1,
                                "name": "Booking Confirmation",
                                "donotdelete": true
                            },
                            "donotdelete": true,
                            "required": true
                        },
                        "priority": 1,
                        "donotuse": false
                    }
                ]
            }
        ]


### Add a new address to a Customer [POST]
The following fields should be provided in the POST array

* ```line1``` Address line 1
* ```line2``` Address line 2 (optional)
* ```line3``` Address line 3 (optional)
* ```town``` Town
* ```county``` County (optional)
* ```postcode``` Postocde (optional
* ```countryname``` or ```countryalpha2code``` One or other of Country Name or the international Alpha2 code
+ ```latitude```, ```longitude``` Geographical location (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/customer/3/address/3

## Customer Address Details [/v2/customer/{id}/address/{aId}]
+ Parameters

    + id (required, integer, `7`) ... The id of the customer
    + aId (required, integer, `3`) ... The id of the address to get

### Get an address of a Customer [GET]
+ Response 200 (application/json)

        {
            "id": 3,
            "type": "P",
            "contactmethodsubtype": "",
            "address": {
                "id": 1,
                "line1": "55 Banana Street",
                "line2": "",
                "line3": "",
                "town": "Fictional Town",
                "county": "Norfolk",
                "postcode": "NR22 2JG",
                "country": {
                    "alpha2": "GB",
                    "alpha3": "GBR",
                    "name": "United Kingdom"
                },
                "longitude": "0.000000",
                "latitude": "0.000000",
                "geohash": ""
            },
            "invalid": false,
            "contactpreferences": [
                {
                    "id": 2,
                    "branding": "/v2/branding/1",
                    "rolereason": {
                        "id": 1,
                        "role": {
                            "id": 1,
                            "name": "Customer",
                            "donotdelete": true
                        },
                        "reason": {
                            "id": 1,
                            "name": "Booking Confirmation",
                            "donotdelete": true
                        },
                        "donotdelete": true,
                        "required": true
                    },
                    "priority": 1,
                    "donotuse": false
                }
            ]
        }

### Updates an address of a Customer [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output. eg. ```town```, ```county```, ```postcode```, etc. Any ommited fields will be left as is.

+ Response 204

### Deletes an address of a Customer [DELETE]

+ Response 204



## TabsUser Settings [/v2/tabsuser/{id}/setting]

+ Parameters

    + id (required, integer, `1`) ... The id of the tabsuser

### Get all Settings for a TabsUser [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "test",
                "value": "123"
            }
        ]

### Add a new Setting to a TabsUser [POST]
The following fields should be provided in the POST array:

* ```name``` Name of Setting
* ```value``` Value

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/tabsuser/1/setting/2

## TabsUser Setting [/v2/tabsuser/{id}/setting/{sId}]

+ Parameters

    + id (required, integer, `1`) ... The id of the TabsUser
    + sId (required, integer, `1`) ... The id of the Setting

### Get a Setting for a TabsUser [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "test",
            "value": "123"
        }

### Updates a TabsUser Setting [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output. Any ommited fields will be left as is. eg:

* ```name``` Name of Setting
* ```value``` Value

+ Response 204

### Deletes a TabsUser Setting [DELETE]

+ Response 204




## Customer Bank Account [/v2/customer/{id}/bankaccount]

+ Parameters

    + id (required, integer, `7`) ... The id of the customer

### Get all bank accounts for a Customer [GET]

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "accountnumber": "12345678",
                "accountname": "Mr Smith",
                "bankname": "Barclays",
                "address": {
                    "line1": "10 High St",
                    "line2": "",
                    "line3": "",
                    "town": "Dereham",
                    "county": "Norfolk",
                    "postcode": "NR20 5SD",
                    "country": "United Kingdom",
                    "latitude": 0,
                    "longitude": 0,
                    "geohash": ""
                },
                "sortcode": "221349",
                "paymentreference": "PR20193",
                "rollnumber": "2"
            }
        ]

### Add a new bank account to a Customer [POST]
The following fields should be provided in the POST array:

* ```accountnumber``` Bank account number
* ```sortcode``` Bank sort code
* ```accountname``` Name of the account (optional)
* ```paymentreference``` Payment Reference (optional)
* ```rollnumber``` Roll number (optional)

An Address is optional, but if provided, must contain line1, town and countrycode 
* ```address_line1``` 
* ```address_line2``` (optional)
* ```address_line3``` (optional)
* ```address_town``` 
* ```address_county``` (optional)
* ```address_postcode``` (optional)
* ```address_country``` 
* ```address_latitude``` (optional)
* ```address_longitude``` (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/customer/3/bankaccount/3

## Customer Bank Account [/v2/customer/{id}/bankaccount/{accountId}]

+ Parameters

    + id (required, integer, `7`) ... The id of the customer
    + accountId (required, integer, `1`) ... The id of the bank account to get

### Get a bank account for a Customer [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "accountnumber": "12345678",
            "accountname": "Mr Smith",
            "bankname": "Barclays",
            "address": {
                "line1": "10 High St",
                "line2": "",
                "line3": "",
                "town": "Dereham",
                "county": "Norfolk",
                "postcode": "NR20 5SD",
                "country": "United Kingdom",
                "latitude": 0,
                "longitude": 0,
                "geohash": ""
            },
            "sortcode": "221349",
            "paymentreference": "PR20193",
            "rollnumber": "2"
        }

### Updates a Customer bank accout [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output. Any ommited fields will be left as is. eg:

* ```accountnumber``` Bank account number
* ```sortcode``` Bank sort code
* ```bankname``` Bank name
* ```address_town``` Town name

+ Response 204

### Deletes a Customer bank account [DELETE]

+ Response 204



## Customer Category Index [/v2/customer/{id}/category]
+ Parameters

    + id (required, integer, `11`) ... The id of the customer

### Get all categorys with a Customer [GET]
+ Response 200 (application/json)

        [
            {
              "id": 1,
              "category": {
                "id": 3,
                "category": "Gold",
                "description": "Customers with more than 4 bookings in the last 2 years",
                "bookingsminimum": 5,
                "bookingsmaximum": 999,
                "andor": "and",
                "bookingvalueminimum": 0,
                "bookingvaluemaximum": 999999,
                "period": "4 years",
                "periodstartdate": "2013-01-13"
              }
            },
            {
              "id": 2,
              "category": {
                "id": 4,
                "category": "Early Booker",
                "description": "Customers who book well before the holiday",
                "bookingsminimum": 0,
                "bookingsmaximum": 999,
                "andor": "or",
                "bookingvalueminimum": 0,
                "bookingvaluemaximum": 999999,
                "period": "20 years",
                "periodstartdate": "1997-01-13"
              }
            }
          ]

## Details of a Customer Category [/v2/customer/{id}/category/{cId}]
+ Parameters

    + id (required, integer, `11`) ... The id of the customer
    + cId (required, integer, `2`) ... The id of the category to get

### Get Customer Category [GET]
+ Response 200 (application/json)

        {
            "id": 2,
            "category": {
              "id": 4,
              "category": "Early Booker",
              "description": "Customers who book well before the holiday",
              "bookingsminimum": 0,
              "bookingsmaximum": 999,
              "andor": "or",
              "bookingvalueminimum": 0,
              "bookingvaluemaximum": 999999,
              "period": "20 years",
              "periodstartdate": "1997-01-13"
            }
          }

### Updates a Customer Category [PUT]

+ Response 204

### Deletes a Customer Category [DELETE]

+ Response 204




## Customer Contact Details Index [/v2/customer/{id}/contactdetailother]
+ Parameters

    + id (required, integer, `7`) ... The id of the customer

### Get all contact details for a Customer [GET]
+ Response 200 (application/json)

        [
            {
              "id": 2,
              "type": "C",
              "contactmethodtype": "Email",
              "contactmethodsubtype": "",
              "value": "support@tabs-software.co.uk",
              "comment": "",
              "invalid": false,
              "invaliddatetime": "",
              "invalidreason": "",
              "contactpreferences": [
                {
                  "id": 1,
                  "branding": "/v2/branding/1",
                  "rolereason": {
                    "id": 1,
                    "role": {
                      "id": 1,
                      "name": "Customer",
                      "donotdelete": true
                    },
                    "reason": {
                      "id": 1,
                      "name": "Booking Confirmation",
                      "donotdelete": true
                    },
                    "donotdelete": true,
                    "required": true
                  },
                  "priority": 1,
                  "donotuse": false
                }
              ],
              "dedupekey": "ot-support@tabs-software.co.uk"
            }
          ]

### Add new contact details to a Customer [POST]
The following fields should be provided in the POST array

* ```contactmethodtype``` The contact method, e.g. Email, Fax etc.
* ```contactmethodsubtype``` The sub-type of contact method, e.g. 'Home', 'Mobile' etc for contact method 'Phone' (optional)
* ```value``` The actual phone number, e,ail address etc.
* ```comment``` Any additional info, e.g. 'Tuesday evenings only' (optional)
* ```invalid``` The contact details are invalid (i.e. email doesn't exist) (optional, default = false)
* ```invaliddatetime``` The datetime the contact details were flagged as invalid
* ```invalidreason``` The reason the contact details were flagged as invalid

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/customer/3/contactdetailother/4

## Customer Contact Details Details [/v2/customer/{id}/contactdetailother/{cId}]
+ Parameters

    + id (required, integer, `7`) ... The id of the customer
    + cId (required, integer, `2`) ... The id of the contactdetailother

### Get contact details for a Customer [GET]
+ Response 200 (application/json)

        {
            "id": 2,
            "type": "C",
            "contactmethodtype": "Email",
            "contactmethodsubtype": "",
            "value": "support@tabs-software.co.uk",
            "comment": "",
            "invalid": false,
            "invaliddatetime": "",
            "invalidreason": "",
            "contactpreferences": [
              {
                "id": 1,
                "branding": "/v2/branding/1",
                "rolereason": {
                  "id": 1,
                  "role": {
                    "id": 1,
                    "name": "Customer",
                    "donotdelete": true
                  },
                  "reason": {
                    "id": 1,
                    "name": "Booking Confirmation",
                    "donotdelete": true
                  },
                  "donotdelete": true,
                  "required": true
                },
                "priority": 1,
                "donotuse": false
              }
            ],
            "dedupekey": "ot-support@tabs-software.co.uk"
          }

### Updates a contact details record for a Customer [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output. eg. ```value```, ```comment```, etc. Any ommited fields will be left as is.

+ Response 204

### Deletes a contact details record for a Customer [DELETE]

+ Response 204




## Customer Contact Preferences [/v2/customer/{id}/contactpreference]
### Get all contact preferences for a person [GET]
+ Parameters

    + id (required, integer, `7`) ... The id of the customer

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "branding": "/v2/branding/1",
                "rolereason": {
                    "id": 1,
                    "role": {
                        "id": 1,
                        "name": "Customer",
                        "donotdelete": true
                    },
                    "reason": {
                        "id": 1,
                        "name": "Booking Confirmation",
                        "donotdelete": true
                    },
                    "donotdelete": true,
                    "required": true
                },
                "priority": 1,
                "donotuse": false
            },
            {
                "id": 2,
                "branding": "/v2/branding/1",
                "rolereason": {
                    "id": 1,
                    "role": {
                        "id": 1,
                        "name": "Customer",
                        "donotdelete": true
                    },
                    "reason": {
                        "id": 1,
                        "name": "Booking Confirmation",
                        "donotdelete": true
                    },
                    "donotdelete": true,
                    "required": true
                },
                "priority": 1,
                "donotuse": false
            }
        ]

### Add a new contact preference to a Customer [POST]
The following fields should be provided in the POST array
* ```role``` The Role related to the Contact Preference, e.g. 'Customer', 'Prospect'
* ```reason``` The Reason for the contact, e.g. 'Direct Mail', 'Email list', 'Confirmation'
* ```contactdetailid``` The id of the ContactDetail (contact details)
* ```priority``` The priority this contact preference has, e.g. 2 (second after some other contact details)
* ```donotuse``` Whether this contact details can be used or not (optional, default false)

+ Parameters

    + id (required, integer, `3`) ... The id of the customer

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/customer/3/contactpreference/2

## Customer Contact Preferences [/v2/customer/{id}/contactpreference/{cId}]
### Get contact preference for a Customer [GET]
+ Parameters

    + id (required, integer, `7`) ... The id of the customer
    + cId (required, integer, `1`) ... The id of the contactpreference to get

+ Response 200 (application/json)

        {
            "id": 1,
            "branding": "/v2/branding/1",
            "rolereason": {
                "id": 1,
                "role": {
                    "id": 1,
                    "name": "Customer",
                    "donotdelete": true
                },
                "reason": {
                    "id": 1,
                    "name": "Booking Confirmation",
                    "donotdelete": true
                },
                "donotdelete": true,
                "required": true
            },
            "priority": 1,
            "donotuse": false
        }

### Updates a contact preference record for a Customer [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output. eg. ```donotuse```, etc. Any ommited fields will be left as is
+ Parameters

    + id (required, integer, `3`) ... The id of the customer
    + cId (required, integer, `1`) ... The id of the contactpreference to update

+ Response 204

### Deletes a contact preference record for a Customer [DELETE]
+ Parameters

    + id (required, integer, `3`) ... The id of the customer
    + cId (required, integer, `1`) ... The id of the contactpreference to delete

+ Response 204




## Customer Contact Index [/v2/customer/{id}/contact]
+ Parameters

    + id (required, integer, `7`) ... The id of the customer

### Get all contacts with a Customer [GET]
+ Response 200 (application/json)

        [
            {
              "id": 2,
              "contacttype": {
                "id": 4,
                "type": "Booking"
              },
              "contactdatetime": "2015-05-01 14:34:56",
              "contactmethodtype": {
                "id": 4,
                "method": "Email",
                "encoding": {
                  "id": 2,
                  "encoding": "HTML"
                },
                "characterlimit": 0,
                "maximumaddresslength": 0,
                "addressvalidationtype": "",
                "addressvalidation": ""
              },
              "subject": "Latin",
              "content": "Ipsos mori nil illigititatem carborundum",
              "sender": {
                "id": 2,
                "type": "C",
                "contactmethodtype": "Email",
                "contactmethodsubtype": "",
                "value": "support@tabs-software.co.uk",
                "comment": "",
                "invalid": false,
                "invaliddatetime": "",
                "invalidreason": "",
                "contactpreferences": [
                  {
                    "id": 1,
                    "branding": "/v2/branding/1",
                    "rolereason": {
                      "id": 1,
                      "role": {
                        "id": 1,
                        "name": "Customer",
                        "donotdelete": true
                      },
                      "reason": {
                        "id": 1,
                        "name": "Booking Confirmation",
                        "donotdelete": true
                      },
                      "donotdelete": true,
                      "required": true
                    },
                    "priority": 1,
                    "donotuse": false
                  }
                ],
                "dedupekey": "ot-support@tabs-software.co.uk"
              },
              "status": [],
              "documents": [
                {
                  "id": 17,
                  "created": "2016-06-24 12:58:44",
                  "document": {
                    "id": 1,
                    "name": "Tabs 2 roadmap.pdf",
                    "filename": "Tabs 2 roadmap.pdf",
                    "timeadded": "2014-01-01 12:00:00",
                    "weight": 0,
                    "private": false,
                    "description": "A document",
                    "mimetype": {
                      "id": 1,
                      "name": "application/pdf",
                      "shortname": "pdf"
                    },
                    "file": "/v2/file/1"
                  }
                },
                {
                  "id": 18,
                  "created": "2016-06-25 02:45:02",
                  "image": {
                    "id": 5,
                    "name": "abc.jpg",
                    "filename": "abc.jpg",
                    "timeadded": "2014-01-01 12:00:00",
                    "weight": 0,
                    "private": false,
                    "description": "Here is another placeholder image",
                    "mimetype": {
                      "id": 2,
                      "name": "image/jpeg",
                      "shortname": "jpg"
                    },
                    "file": "/v2/file/5",
                    "height": 360,
                    "width": 480,
                    "alt": "The empire state building"
                  }
                },
                {
                  "id": 19,
                  "created": "2016-06-26 14:45:02",
                  "image": {
                    "id": 6,
                    "name": "xyz.jpg",
                    "filename": "xyz.jpg",
                    "timeadded": "2014-01-01 12:00:00",
                    "weight": 0,
                    "private": false,
                    "description": "Bathroom",
                    "mimetype": {
                      "id": 2,
                      "name": "image/jpeg",
                      "shortname": "jpg"
                    },
                    "file": "/v2/file/6",
                    "height": 300,
                    "width": 200,
                    "alt": "The Bathroom"
                  }
                }
              ],
              "sourcemarketingbrand": {
                "id": 2,
                "source": {
                  "id": 2,
                  "sourcecode": "EDC",
                  "description": "EDP Cottages",
                  "showonweb": true,
                  "sourcecategory": {
                    "id": 1,
                    "sourcecategory": "Internet"
                  },
                  "sourcemarketingbrands": [
                    {
                      "id": 2,
                      "marketingbrand": {
                        "id": 3,
                        "code": "NOMM",
                        "name": "Norfolk Country Cottages",
                        "agency": "/v2/agency/4",
                        "defaultbookingbrand": "/v2/bookingbrand/3",
                        "website": "www.norfolk.co.uk",
                        "email": "info@norfolk.co.uk"
                      },
                      "fromdate": "2016-03-01",
                      "todate": "2020-12-31"
                    },
                    {
                      "id": 3,
                      "marketingbrand": {
                        "id": 4,
                        "code": "MAMM",
                        "name": "Marsdens",
                        "agency": "/v2/agency/5",
                        "defaultbookingbrand": "/v2/bookingbrand/4",
                        "website": "www.mabb.co.uk",
                        "email": "info@mabb.co.uk"
                      },
                      "fromdate": "2016-03-01",
                      "todate": "2020-12-31"
                    }
                  ]
                },
                "marketingbrand": {
                  "id": 3,
                  "code": "NOMM",
                  "name": "Norfolk Country Cottages",
                  "agency": "/v2/agency/4",
                  "defaultbookingbrand": "/v2/bookingbrand/3",
                  "website": "www.norfolk.co.uk",
                  "email": "info@norfolk.co.uk"
                },
                "fromdate": "2016-03-01",
                "todate": "2020-12-31"
              },
              "contactentities": [
                {
                  "id": 4,
                  "contactentitytype": "TabsUser",
                  "entityid": 1,
                  "function": "from",
                  "intermediary": "Bloggs",
                  "reference": "XA-12a456",
                  "status": [],
                  "status_history": []
                },
                {
                  "id": 5,
                  "contactentitytype": "Customer",
                  "entityid": 7,
                  "function": "to",
                  "intermediary": "Bloggs",
                  "reference": "XA-333-456",
                  "status": [],
                  "status_history": [],
                  "contactdetail": "/v2/customer/7/contactdetail/3",
                  "contactdetailvalue": "55 Banana Street Fictional Town Norfolk NR22 2JG United Kingdom"
                },
                {
                  "id": 6,
                  "contactentitytype": "Booking",
                  "entityid": 9,
                  "function": "content",
                  "intermediary": null,
                  "reference": null,
                  "status": [],
                  "status_history": []
                }
              ],
              "deleted": false
            },
            {
              "id": 1,
              "contacttype": {
                "id": 6,
                "type": "Brochure"
              },
              "contactdatetime": "2015-05-01 12:34:56",
              "contactmethodtype": {
                "id": 4,
                "method": "Email",
                "encoding": {
                  "id": 2,
                  "encoding": "HTML"
                },
                "characterlimit": 0,
                "maximumaddresslength": 0,
                "addressvalidationtype": "",
                "addressvalidation": ""
              },
              "subject": "Dear Tom letter",
              "content": "Dear Tom, blah blah blah blah. Yours, Us",
              "sender": {
                "id": 2,
                "type": "C",
                "contactmethodtype": "Email",
                "contactmethodsubtype": "",
                "value": "support@tabs-software.co.uk",
                "comment": "",
                "invalid": false,
                "invaliddatetime": "",
                "invalidreason": "",
                "contactpreferences": [
                  {
                    "id": 1,
                    "branding": "/v2/branding/1",
                    "rolereason": {
                      "id": 1,
                      "role": {
                        "id": 1,
                        "name": "Customer",
                        "donotdelete": true
                      },
                      "reason": {
                        "id": 1,
                        "name": "Booking Confirmation",
                        "donotdelete": true
                      },
                      "donotdelete": true,
                      "required": true
                    },
                    "priority": 1,
                    "donotuse": false
                  }
                ],
                "dedupekey": "ot-support@tabs-software.co.uk"
              },
              "status": [],
              "documents": [
                {
                  "id": 16,
                  "created": "2016-06-23 12:45:02",
                  "document": {
                    "id": 2,
                    "name": "A Simple text file",
                    "filename": "A Simple Text File.txt",
                    "timeadded": "2014-01-01 12:00:00",
                    "weight": 0,
                    "private": false,
                    "description": "Text file",
                    "mimetype": {
                      "id": 3,
                      "name": "text/plain",
                      "shortname": "txt"
                    },
                    "file": "/v2/file/2"
                  }
                }
              ],
              "contactentities": [
                {
                  "id": 1,
                  "contactentitytype": "Agency",
                  "entityid": 4,
                  "function": "from",
                  "intermediary": "Bloggs",
                  "reference": "XA-12-456",
                  "status": [],
                  "status_history": [
                    {
                      "id": 1,
                      "status": "Submitted",
                      "statusdatetime": "2016-06-09 16:23:38",
                      "detail": "JSON encoded string"
                    },
                    {
                      "id": 2,
                      "status": "Sent",
                      "statusdatetime": "2016-06-09 16:44:38",
                      "detail": "New JSON encoded string"
                    }
                  ]
                },
                {
                  "id": 2,
                  "contactentitytype": "Customer",
                  "entityid": 7,
                  "function": "to",
                  "intermediary": "Bloggs",
                  "reference": "XA-12-456",
                  "status": [],
                  "status_history": [
                    {
                      "id": 3,
                      "status": "Submitted",
                      "statusdatetime": "2016-06-09 23:23:38",
                      "detail": "JSON encoded string"
                    }
                  ],
                  "contactdetail": "/v2/customer/7/contactdetail/2",
                  "contactdetailvalue": "support@tabs-software.co.uk"
                },
                {
                  "id": 3,
                  "contactentitytype": "Brochure",
                  "entityid": 3,
                  "function": "content",
                  "intermediary": null,
                  "reference": null,
                  "status": [],
                  "status_history": []
                }
              ],
              "deleted": false
            }
          ]

## Details of a Customer Contact [/v2/customer/{id}/contact/{cId}]
+ Parameters

    + id (required, integer, `7`) ... The id of the customer
    + cId (required, integer, `2`) ... The id of the contact to get

### Get contact for a Customer [GET]
+ Response 200 (application/json)

        {
            "id": 2,
            "contacttype": {
              "id": 4,
              "type": "Booking"
            },
            "contactdatetime": "2015-05-01 14:34:56",
            "contactmethodtype": {
              "id": 4,
              "method": "Email",
              "encoding": {
                "id": 2,
                "encoding": "HTML"
              },
              "characterlimit": 0,
              "maximumaddresslength": 0,
              "addressvalidationtype": "",
              "addressvalidation": ""
            },
            "subject": "Latin",
            "content": "Ipsos mori nil illigititatem carborundum",
            "sender": {
              "id": 2,
              "type": "C",
              "contactmethodtype": "Email",
              "contactmethodsubtype": "",
              "value": "support@tabs-software.co.uk",
              "comment": "",
              "invalid": false,
              "invaliddatetime": "",
              "invalidreason": "",
              "contactpreferences": [
                {
                  "id": 1,
                  "branding": "/v2/branding/1",
                  "rolereason": {
                    "id": 1,
                    "role": {
                      "id": 1,
                      "name": "Customer",
                      "donotdelete": true
                    },
                    "reason": {
                      "id": 1,
                      "name": "Booking Confirmation",
                      "donotdelete": true
                    },
                    "donotdelete": true,
                    "required": true
                  },
                  "priority": 1,
                  "donotuse": false
                }
              ],
              "dedupekey": "ot-support@tabs-software.co.uk"
            },
            "status": [],
            "documents": [
              {
                "id": 17,
                "created": "2016-06-24 12:58:44",
                "document": {
                  "id": 1,
                  "name": "Tabs 2 roadmap.pdf",
                  "filename": "Tabs 2 roadmap.pdf",
                  "timeadded": "2014-01-01 12:00:00",
                  "weight": 0,
                  "private": false,
                  "description": "A document",
                  "mimetype": {
                    "id": 1,
                    "name": "application/pdf",
                    "shortname": "pdf"
                  },
                  "file": "/v2/file/1"
                }
              },
              {
                "id": 18,
                "created": "2016-06-25 02:45:02",
                "image": {
                  "id": 5,
                  "name": "abc.jpg",
                  "filename": "abc.jpg",
                  "timeadded": "2014-01-01 12:00:00",
                  "weight": 0,
                  "private": false,
                  "description": "Here is another placeholder image",
                  "mimetype": {
                    "id": 2,
                    "name": "image/jpeg",
                    "shortname": "jpg"
                  },
                  "file": "/v2/file/5",
                  "height": 360,
                  "width": 480,
                  "alt": "The empire state building"
                }
              },
              {
                "id": 19,
                "created": "2016-06-26 14:45:02",
                "image": {
                  "id": 6,
                  "name": "xyz.jpg",
                  "filename": "xyz.jpg",
                  "timeadded": "2014-01-01 12:00:00",
                  "weight": 0,
                  "private": false,
                  "description": "Bathroom",
                  "mimetype": {
                    "id": 2,
                    "name": "image/jpeg",
                    "shortname": "jpg"
                  },
                  "file": "/v2/file/6",
                  "height": 300,
                  "width": 200,
                  "alt": "The Bathroom"
                }
              }
            ],
            "sourcemarketingbrand": {
              "id": 2,
              "source": {
                "id": 2,
                "sourcecode": "EDC",
                "description": "EDP Cottages",
                "showonweb": true,
                "sourcecategory": {
                  "id": 1,
                  "sourcecategory": "Internet"
                },
                "sourcemarketingbrands": [
                  {
                    "id": 2,
                    "marketingbrand": {
                      "id": 3,
                      "code": "NOMM",
                      "name": "Norfolk Country Cottages",
                      "agency": "/v2/agency/4",
                      "defaultbookingbrand": "/v2/bookingbrand/3",
                      "website": "www.norfolk.co.uk",
                      "email": "info@norfolk.co.uk"
                    },
                    "fromdate": "2016-03-01",
                    "todate": "2020-12-31"
                  },
                  {
                    "id": 3,
                    "marketingbrand": {
                      "id": 4,
                      "code": "MAMM",
                      "name": "Marsdens",
                      "agency": "/v2/agency/5",
                      "defaultbookingbrand": "/v2/bookingbrand/4",
                      "website": "www.mabb.co.uk",
                      "email": "info@mabb.co.uk"
                    },
                    "fromdate": "2016-03-01",
                    "todate": "2020-12-31"
                  }
                ]
              },
              "marketingbrand": {
                "id": 3,
                "code": "NOMM",
                "name": "Norfolk Country Cottages",
                "agency": "/v2/agency/4",
                "defaultbookingbrand": "/v2/bookingbrand/3",
                "website": "www.norfolk.co.uk",
                "email": "info@norfolk.co.uk"
              },
              "fromdate": "2016-03-01",
              "todate": "2020-12-31"
            },
            "contactentities": [
              {
                "id": 4,
                "contactentitytype": "TabsUser",
                "entityid": 1,
                "function": "from",
                "intermediary": "Bloggs",
                "reference": "XA-12a456",
                "status": [],
                "status_history": []
              },
              {
                "id": 5,
                "contactentitytype": "Customer",
                "entityid": 7,
                "function": "to",
                "intermediary": "Bloggs",
                "reference": "XA-333-456",
                "status": [],
                "status_history": [],
                "contactdetail": "/v2/customer/7/contactdetail/3",
                "contactdetailvalue": "55 Banana Street Fictional Town Norfolk NR22 2JG United Kingdom"
              },
              {
                "id": 6,
                "contactentitytype": "Booking",
                "entityid": 9,
                "function": "content",
                "intermediary": null,
                "reference": null,
                "status": [],
                "status_history": []
              }
            ],
            "deleted": false
          }




## Customer Documents Index [/v2/customer/{id}/document]

+ Parameters

    + id (required, integer, `7`) ... The id of the customer

### Get all Customer Documents [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "created": "2015-12-10 14:28:02",
                "document": {
                    "id": 1,
                    "name": "Tabs 2 roadmap.pdf",
                    "filename": "Tabs 2 roadmap.pdf",
                    "timeadded": "2014-01-01 12:00:00",
                    "weight": 0,
                    "private": false,
                    "description": "A document",
                    "mimetype": {
                        "id": 1,
                        "name": "application/pdf",
                        "shortname": "pdf"
                    },
                    "file": "/v2/file/1"
                }
            }
        ]


### Add a Document to a Customer [POST]
The following fields should be provided in the POST array

* ```documentid```

+ Response 201

    + Headers

            Location: http://plato.apiary.io/v2/customer/6/document/2

## Customer Document details [/v2/customer/{id}/document/{id2}]

+ Parameters

    + id (required, integer, `7`) ... The id of the customer
    + id2 (required, integer, `1`) ... The id of the document to get

### Get detail of a specific Customer Document [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "created": "2015-12-10 14:28:02",
            "document": {
                "id": 1,
                "name": "Tabs 2 roadmap.pdf",
                "filename": "Tabs 2 roadmap.pdf",
                "timeadded": "2014-01-01 12:00:00",
                "weight": 0,
                "private": false,
                "description": "A document",
                "mimetype": {
                    "id": 1,
                    "name": "application/pdf",
                    "shortname": "pdf"
                },
                "file": "/v2/file/1"
            }
        }

### Update a Customer Document [PUT]
Not implemented

+ Response 501

### Delete a Customer Document [DELETE]

+ Response 204



## TabsUser History Index [/v2/tabsuser/{id}/history]

### Get all history for a customer [GET]

+ Parameters

    + id (required, integer, `2`) ... The id of the customer

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 1,
            "page": 1,
            "count": 1,
            "limit": 10,
            "time": 0,
            "orderBy": null,
            "filter": "entityType=TabsUser:entityId=2",
            "previous": null,
            "next": null,
            "elements": [
              {
                "actor": {
                  "id": 2,
                  "type": "TabsUser",
                  "actorcode": "",
                  "created": "2017-03-29",
                  "updated": "",
                  "language": {
                    "id": 1,
                    "code": "EN",
                    "name": "English"
                  },
                  "inactive": false,
                  "firstname": "Dummy OAuth",
                  "surname": "User",
                  "title": "Mr",
                  "salutation": "Dummy",
                  "companyname": "",
                  "vatnumber": "",
                  "companynumber": "",
                  "contactdetails": [
                    {
                      "id": 90,
                      "type": "C",
                      "contactmethodtype": "Email",
                      "contactmethodsubtype": "Main",
                      "value": "support@tabs-software.co.uk",
                      "comment": "",
                      "invalid": false,
                      "invaliddatetime": "",
                      "invalidreason": "",
                      "contactpreferences": [],
                      "dedupekey": ""
                    }
                  ],
                  "bankaccounts": [],
                  "bacsbankaccount": {},
                  "documents": [],
                  "mergedinto": "",
                  "potentialduplicates": [],
                  "mergedactors": [],
                  "accountingreference": "",
                  "tabsusername": "dummyoauthuser",
                  "roles": [],
                  "tabscode": "DUMMY",
                  "settings": [],
                  "defaultbrandinggroup": [],
                  "defaultbookingbrand": []
                },
                "client": {
                  "id": 1,
                  "name": "tabs 2",
                  "url": "http://www.tabs-software.co.uk"
                },
                "datetime": "2016-05-01 12:18:04",
                "description": "Reset Password",
                "parameters": []
              }
            ]
          }




## Actor ManagedActivity Index [/v2/actor/{id}/managedactivity]

+ Parameters

    + id (required, integer, `12`) ... The id of the Actor

### Get all ManagedActivites for a Actor [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "managedactivity": {
                    "id": 1,
                    "name": "Cleaning",
                    "description": "Cleaning a property",
                    "donotmodify": true
                },
                "fromdate": "2016-01-01",
                "todate": "2018-01-01"
            }
        ]

### Add a new ManagedActivity [POST]
The following fields should be provided in the POST array

* ```managedactivityid``` The id of the ManagedActivity
* ```fromdate``` The date the property was assigned to the actor from
* ```todate```   The date the property was assigned to the actor to

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/actor/12/managedactivity/1

## Actor ManagedActivity Details [/v2/actor/{id}/managedactivity/{id2}]

+ Parameters

    + id (required, integer, `12`) ... The id of the Actor
    + id2 (required, integer, `1`) ... The id of the ManagedActivity

### Get the details of an Actor ManagedActivity [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "managedactivity": {
                "id": 1,
                "name": "Cleaning",
                "description": "Cleaning a property",
                "donotmodify": true
            },
            "fromdate": "2016-01-01",
            "todate": "2018-01-01"
        }

### Update the details of an Actor ManagedActivity [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output.

+ Request (application/x-www-form-urlencoded)

        todate='2041-12-21'

+ Response 204

### Delete an Actor ManagedActivity [DELETE]

+ Response 204



## ActorNote Index [/v2/actornote]
### Get all ActorNotes [GET]
Not implemented - notes included in /v2/{actor}/{id}

+ Response 501

### Add an existing Note to an Actor[POST]
The following fields should be provided in the POST array:

* ```actorid``` Id of Note to add to the Actor
* ```noteid``` Id of Note to add to the Actor

+ Response 201

    + Headers

            Location: http://plato.apiary.io/v2/actornote/1

## ActorNote Detail [/v2/actornote/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the ActorNote to get

### Retrieve an individual ActorNote [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "note": {
                "id": 1,
                "notetype": {
                    "id": 1,
                    "notetype": "Warning",
                    "description": "A warning which should be highlighted to the user",
                    "donotdelete": true
                },
                "subject": "Lorem ipsum",
                "created": "2014-08-09 12:34:56",
                "createdby": {
                    "actorid": 1,
                    "actortype": "TabsUser",
                    "actor": "/v2/tabsuser/1",
                    "name": "system system"
                },
                "createdfromscreen": "Booking",
                "visibletocustomer": false,
                "visibletoowner": false,
                "visibletocleaner": false,
                "visibletokeyholder": false,
                "highlight": false,
                "pin": true,
                "private": true,
                "completed": "",
                "completedby": [],
                "archived": "",
                "archivedby": [],
                "notetexts": [
                    {
                        "id": 1,
                        "createdby": {
                            "actorid": 1,
                            "actortype": "TabsUser",
                            "actor": "/v2/tabsuser/1",
                            "name": "system system"
                        },
                        "created": "2014-08-09 12:34:56",
                        "notetext": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut non orci id quam pharetra mattis sit amet id nisl.",
                        "actioned": "2020-02-01 12:21:45",
                        "actionedby": {
                            "actorid": 1,
                            "actortype": "TabsUser",
                            "actor": "/v2/tabsuser/1",
                            "name": "system system"
                        },
                        "followup": "2020-01-01 12:01:45"
                    },
                    {
                        "id": 2,
                        "createdby": {
                            "actorid": 1,
                            "actortype": "TabsUser",
                            "actor": "/v2/tabsuser/1",
                            "name": "system system"
                        },
                        "created": "2014-08-09 12:37:56",
                        "notetext": "Donec nec eros vitae dui tincidunt convallis. Ut neque diam, consequat a nisi quis, aliquet imperdiet lacus.",
                        "actioned": "",
                        "actionedby": []
                    }
                ],
                "noteactors": [
                    {
                        "actorid": 1,
                        "actortype": "TabsUser",
                        "actor": "/v2/tabsuser/1",
                        "name": "system system",
                        "id": 2,
                        "notifychanges": false,
                        "reminderdate": "2017-08-23"
                    },
                    {
                        "actorid": 7,
                        "actortype": "Customer",
                        "actor": "/v2/customer/7",
                        "name": "Thomas Thornley",
                        "id": 1,
                        "notifychanges": true,
                        "reminderdate": "2016-10-15"
                    }
                ],
                "bookings": [
                    {
                        "bookingnoteid": 1,
                        "bookingid": 1,
                        "booking": "/v2/booking/1",
                        "fromdate": "2026-10-01",
                        "todate": "2026-10-08"
                    }
                ],
                "properties": [
                    {
                        "propertynoteid": 2,
                        "propertyid": 1,
                        "property": "/v2/property/1",
                        "name": "Angler Cottage",
                        "tabspropref": "1105",
                        "fromdate": "2015-07-25",
                        "todate": "2015-08-02",
                        "requiresconfirmation": false,
                        "showonweb": false,
                        "showonavailability": true
                    },
                    {
                        "propertynoteid": 1,
                        "propertyid": 2,
                        "property": "/v2/property/2",
                        "name": "Reedmere",
                        "tabspropref": "1212",
                        "fromdate": "2015-06-30",
                        "todate": "2015-07-15",
                        "requiresconfirmation": true,
                        "showonweb": true,
                        "showonavailability": false
                    }
                ],
                "actors": [
                    {
                        "actorid": 7,
                        "actortype": "Customer",
                        "actor": "/v2/customer/7",
                        "name": "Thomas Thornley",
                        "actornoteid": 1
                    }
                ],
                "workorders": [
                    {
                        "workordernoteid": 2,
                        "workorderid": 3,
                        "workorder": "/v2/workorder/3"
                    }
                ]
            },
            "actor": "/v2/customer/7"
        }

### Updates the Customer Note for for a given id [PUT]
Not implemented - use /v2/note/{id}

+ Response 501

### Removes the Actor from the Note [DELETE]

+ Response 204



## Customer Phone Number Index [/v2/customer/{id}/phonenumber]
+ Parameters

    + id (required, integer, `10`) ... The id of the customer

### Get all contact details for a Customer [GET]
+ Response 200 (application/json)

        [
            {
              "id": 17,
              "type": "F",
              "contactmethodtype": "Phone",
              "contactmethodsubtype": "Work",
              "countrycode": "44",
              "subscribernumber": "1603876229",
              "extension": "",
              "comment": "",
              "invalid": false,
              "invaliddatetime": "",
              "invalidreason": "",
              "contactpreferences": [
                {
                  "id": 8,
                  "branding": "/v2/branding/1",
                  "rolereason": {
                    "id": 3,
                    "role": {
                      "id": 2,
                      "name": "Owner",
                      "donotdelete": true
                    },
                    "reason": {
                      "id": 2,
                      "name": "Statements",
                      "donotdelete": true
                    },
                    "donotdelete": true,
                    "required": true
                  },
                  "priority": 1,
                  "donotuse": true
                }
              ],
              "dedupekey": "ph-44-1603876229"
            },
            {
              "id": 18,
              "type": "F",
              "contactmethodtype": "Mobile",
              "contactmethodsubtype": "",
              "countrycode": "44",
              "subscribernumber": "7787887877",
              "extension": "",
              "comment": "",
              "invalid": false,
              "invaliddatetime": "",
              "invalidreason": "",
              "contactpreferences": [],
              "dedupekey": "ph-44-7787887877"
            },
            {
              "id": 19,
              "type": "F",
              "contactmethodtype": "Phone",
              "contactmethodsubtype": "Home",
              "countrycode": "44",
              "subscribernumber": "1545811129",
              "extension": "",
              "comment": "after 17:30",
              "invalid": false,
              "invaliddatetime": "",
              "invalidreason": "",
              "contactpreferences": [],
              "dedupekey": "ph-44-1545811129"
            }
          ]

### Add new contact details to a Customer [POST]
The following fields should be provided in the POST array

* ```contactmethodtype``` The contact method, e.g. Email, Fax etc.
* ```contactmethodsubtype``` The sub-type of contact method, e.g. 'Home', 'Mobile' etc for contact method 'Phone' (optional)
* ```countrycode``` The e.164 3-digit phone country code
* ```subscribernumber``` The e.164 14-digit subscriber number
* ```comment``` Any additional info, e.g. 'Tuesday evenings only' (optional)
* ```invalid``` The contact details are invalid (i.e. email doesn't exist) (optional, default = false)
* ```invaliddatetime``` The datetime the contact details were flagged as invalid
* ```invalidreason``` The reason the contact details were flagged as invalid

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/customer/3/phonenumber/4

## Customer Contact Details Details [/v2/customer/{id}/phonenumber/{cId}]
+ Parameters

    + id (required, integer, `10`) ... The id of the customer
    + cId (required, integer, `17`) ... The id of the phonenumber

### Get contact details for a Customer [GET]
+ Response 200 (application/json)

        {
            "id": 17,
            "type": "F",
            "contactmethodtype": "Phone",
            "contactmethodsubtype": "Work",
            "countrycode": "44",
            "subscribernumber": "1603876229",
            "extension": "",
            "comment": "",
            "invalid": false,
            "invaliddatetime": "",
            "invalidreason": "",
            "contactpreferences": [
              {
                "id": 8,
                "branding": "/v2/branding/1",
                "rolereason": {
                  "id": 3,
                  "role": {
                    "id": 2,
                    "name": "Owner",
                    "donotdelete": true
                  },
                  "reason": {
                    "id": 2,
                    "name": "Statements",
                    "donotdelete": true
                  },
                  "donotdelete": true,
                  "required": true
                },
                "priority": 1,
                "donotuse": true
              }
            ],
            "dedupekey": "ph-44-1603876229"
          }

### Updates a contact details record for a Customer [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output. eg. ```comment```, etc. Any ommited fields will be left as is.

+ Response 204

### Deletes a contact details record for a Customer [DELETE]

+ Response 204




## AssessmentGrade Index [/v2/assessmentgrade]

### Get all AssessmentGrades [GET]

Stores parameters used to calculate the deposit amount on a booking

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "name": "Grade A",
              "tabscode": "A"
            },
            {
              "id": 2,
              "name": "Grade B",
              "tabscode": "B"
            },
            {
              "id": 3,
              "name": "Grade C",
              "tabscode": "C"
            },
            {
              "id": 4,
              "name": "Declined",
              "tabscode": "D"
            },
            {
              "id": 5,
              "name": "Enquirer",
              "tabscode": "E"
            },
            {
              "id": 6,
              "name": "Referral",
              "tabscode": "R"
            }
          ]

### Add a new AssessmentGrade [POST]

The following fields should be provided in the POST array
Note: 'tabscode' cannot be provided as it is used for backward reference only

* ```name``` The name of the AssessmentGrade settings


+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/assessmentgrade/2

## AssessmentGrade Detail [/v2/assessmentgrade/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the AssessmentGrade to get

### Gets the details of a AssessmentGrade [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "Grade A",
            "tabscode": "A"
          }

### Update a AssessmentGrade [PUT]

+ Request (application/x-www-form-urlencoded)

        amount=0.3

+ Response 204

### Delete a AssessmentGrade [DELETE]

+ Response 204




## Potential Duplicate List [/v2/potentialduplicate{?page,limit}]
The potentialduplicate routes allow the creation, processing and deletion of potential duplicate actors
potentialduplicate?page=1&limit=25

### Get all Potential Duplicates [GET]

+ Parameters

    + page (optional, integer, `1`) ... The page of results to return
    + limit (optional, integer, `25`) ... The number of results to return

+ Response 200

        {
            "searchId": 0,
            "total": 3,
            "page": 1,
            "count": 3,
            "limit": 25,
            "time": 0,
            "orderBy": null,
            "filter": "",
            "previous": null,
            "next": null,
            "elements": [
                {
                    "id": 1,
                    "actor1": {
                        "id": 7,
                        "type": "Customer",
                        "actorcode": "",
                        "created": "2017-05-15",
                        "updated": "",
                        "language": {
                            "id": 1,
                            "code": "EN",
                            "name": "English"
                        },
                        "inactive": false,
                        "firstname": "Thomas",
                        "surname": "Thornley",
                        "title": "Mr",
                        "salutation": "Tom",
                        "companyname": "Norfolk Country Cottages",
                        "vatnumber": "1234567890123456",
                        "companynumber": "123456789012",
                        "contactdetails": [
                            {
                                "id": 1,
                                "type": "F",
                                "contactmethodtype": "Phone",
                                "contactmethodsubtype": "",
                                "countrycode": "123",
                                "subscribernumber": "1603888999",
                                "extension": "",
                                "comment": "",
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [],
                                "dedupekey": "ph-123-1603888999"
                            },
                            {
                                "id": 2,
                                "type": "C",
                                "contactmethodtype": "Email",
                                "contactmethodsubtype": "",
                                "value": "support@tabs-software.co.uk",
                                "comment": "",
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [
                                    {
                                        "id": 1,
                                        "branding": "/v2/branding/1",
                                        "rolereason": {
                                            "id": 1,
                                            "role": {
                                                "id": 1,
                                                "name": "Customer",
                                                "donotdelete": true
                                            },
                                            "reason": {
                                                "id": 1,
                                                "name": "Booking Confirmation",
                                                "donotdelete": true
                                            },
                                            "donotdelete": true,
                                            "required": true
                                        },
                                        "priority": 1,
                                        "donotuse": false
                                    }
                                ],
                                "dedupekey": "ot-support@tabs-software.co.uk"
                            },
                            {
                                "id": 3,
                                "type": "P",
                                "contactmethodsubtype": "",
                                "address": {
                                    "id": 1,
                                    "line1": "55 Banana Street",
                                    "line2": "",
                                    "line3": "",
                                    "town": "Fictional Town",
                                    "county": "Norfolk",
                                    "postcode": "NR22 2JG",
                                    "country": {
                                        "alpha2": "GB",
                                        "alpha3": "GBR",
                                        "name": "United Kingdom"
                                    },
                                    "longitude": "0.000000",
                                    "latitude": "0.000000",
                                    "geohash": ""
                                },
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [
                                    {
                                        "id": 2,
                                        "branding": "/v2/branding/1",
                                        "rolereason": {
                                            "id": 1,
                                            "role": {
                                                "id": 1,
                                                "name": "Customer",
                                                "donotdelete": true
                                            },
                                            "reason": {
                                                "id": 1,
                                                "name": "Booking Confirmation",
                                                "donotdelete": true
                                            },
                                            "donotdelete": true,
                                            "required": true
                                        },
                                        "priority": 1,
                                        "donotuse": false
                                    }
                                ],
                                "dedupekey": "po-nr222jg"
                            }
                        ],
                        "bankaccounts": [
                            {
                                "id": 1,
                                "accountnumber": "12345678",
                                "accountname": "Mr Smith",
                                "bankname": "Barclays",
                                "address": {
                                    "id": 5,
                                    "line1": "10 High St",
                                    "line2": "",
                                    "line3": "",
                                    "town": "Dereham",
                                    "county": "Norfolk",
                                    "postcode": "NR20 5SD",
                                    "country": {
                                        "alpha2": "GB",
                                        "alpha3": "GBR",
                                        "name": "United Kingdom"
                                    },
                                    "longitude": 0,
                                    "latitude": 0,
                                    "geohash": ""
                                },
                                "sortcode": "221349",
                                "paymentreference": "PR20193",
                                "rollnumber": "2"
                            },
                            {
                                "id": 2,
                                "accountnumber": "99995678",
                                "accountname": "Mr Smith",
                                "bankname": "Barclays",
                                "address": {
                                    "id": 6,
                                    "line1": "10 High St",
                                    "line2": "",
                                    "line3": "",
                                    "town": "Dereham",
                                    "county": "Norfolk",
                                    "postcode": "NR20 5SD",
                                    "country": {
                                        "alpha2": "GB",
                                        "alpha3": "GBR",
                                        "name": "United Kingdom"
                                    },
                                    "longitude": 0,
                                    "latitude": 0,
                                    "geohash": ""
                                },
                                "sortcode": "221349",
                                "paymentreference": "PR20193",
                                "rollnumber": "2"
                            },
                            {
                                "id": 3,
                                "accountnumber": "99995678",
                                "accountname": "Mr Smith",
                                "bankname": "Barclays",
                                "address": {
                                    "id": 9,
                                    "line1": "10 High St",
                                    "line2": "",
                                    "line3": "",
                                    "town": "Dereham",
                                    "county": "Norfolk",
                                    "postcode": "NR20 5SD",
                                    "country": {
                                        "alpha2": "GB",
                                        "alpha3": "GBR",
                                        "name": "United Kingdom"
                                    },
                                    "longitude": 0,
                                    "latitude": 0,
                                    "geohash": ""
                                },
                                "sortcode": "221349",
                                "paymentreference": "PR20193",
                                "rollnumber": "2"
                            }
                        ],
                        "bacsbankaccount": {
                            "id": 1,
                            "accountnumber": "12345678",
                            "accountname": "Mr Smith",
                            "bankname": "Barclays",
                            "address": {
                                "id": 5,
                                "line1": "10 High St",
                                "line2": "",
                                "line3": "",
                                "town": "Dereham",
                                "county": "Norfolk",
                                "postcode": "NR20 5SD",
                                "country": {
                                    "alpha2": "GB",
                                    "alpha3": "GBR",
                                    "name": "United Kingdom"
                                },
                                "longitude": 0,
                                "latitude": 0,
                                "geohash": ""
                            },
                            "sortcode": "221349",
                            "paymentreference": "PR20193",
                            "rollnumber": "2"
                        },
                        "documents": [
                            {
                                "id": 1,
                                "created": "2017-05-15 15:29:38",
                                "document": {
                                    "id": 1,
                                    "name": "Tabs 2 roadmap.pdf",
                                    "filename": "Tabs 2 roadmap.pdf",
                                    "timeadded": "2014-01-01 12:00:00",
                                    "weight": 0,
                                    "private": false,
                                    "description": "A document",
                                    "mimetype": {
                                        "id": 1,
                                        "name": "application/pdf",
                                        "shortname": "pdf"
                                    },
                                    "file": "/v2/file/1"
                                }
                            }
                        ],
                        "mergedinto": "",
                        "potentialduplicates": [
                            "/v2/potentialduplicate/1"
                        ],
                        "mergedactors": [],
                        "accountingreference": "",
                        "tabscode": "CUS1234",
                        "defaultbrandinggroup": [],
                        "defaultbookingbrand": [],
                        "defaultbranding": []
                    },
                    "actor2": {
                        "id": 8,
                        "type": "Customer",
                        "actorcode": "",
                        "created": "2017-05-15",
                        "updated": "",
                        "language": {
                            "id": 1,
                            "code": "EN",
                            "name": "English"
                        },
                        "inactive": false,
                        "firstname": "Thomas",
                        "surname": "Thornley",
                        "title": "Mr",
                        "salutation": "Tom",
                        "companyname": "Norfolk Country Cottages",
                        "vatnumber": "1234567890123456",
                        "companynumber": "123456789012",
                        "contactdetails": [
                            {
                                "id": 4,
                                "type": "F",
                                "contactmethodtype": "Phone",
                                "contactmethodsubtype": "",
                                "countrycode": "123",
                                "subscribernumber": "1603888999",
                                "extension": "",
                                "comment": "",
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [],
                                "dedupekey": "ph-123-1603888999"
                            },
                            {
                                "id": 5,
                                "type": "C",
                                "contactmethodtype": "Email",
                                "contactmethodsubtype": "",
                                "value": "support@tabs-software.co.uk",
                                "comment": "",
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [
                                    {
                                        "id": 3,
                                        "branding": "/v2/branding/1",
                                        "rolereason": {
                                            "id": 1,
                                            "role": {
                                                "id": 1,
                                                "name": "Customer",
                                                "donotdelete": true
                                            },
                                            "reason": {
                                                "id": 1,
                                                "name": "Booking Confirmation",
                                                "donotdelete": true
                                            },
                                            "donotdelete": true,
                                            "required": true
                                        },
                                        "priority": 1,
                                        "donotuse": false
                                    }
                                ],
                                "dedupekey": "ot-support@tabs-software.co.uk"
                            },
                            {
                                "id": 6,
                                "type": "P",
                                "contactmethodsubtype": "",
                                "address": {
                                    "id": 7,
                                    "line1": "99 Banana Street",
                                    "line2": "",
                                    "line3": "",
                                    "town": "Fictional Town",
                                    "county": "Norfolk",
                                    "postcode": "NR22 3JG",
                                    "country": {
                                        "alpha2": "GB",
                                        "alpha3": "GBR",
                                        "name": "United Kingdom"
                                    },
                                    "longitude": "1.652729",
                                    "latitude": "52.617954",
                                    "geohash": ""
                                },
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [
                                    {
                                        "id": 4,
                                        "branding": "/v2/branding/1",
                                        "rolereason": {
                                            "id": 1,
                                            "role": {
                                                "id": 1,
                                                "name": "Customer",
                                                "donotdelete": true
                                            },
                                            "reason": {
                                                "id": 1,
                                                "name": "Booking Confirmation",
                                                "donotdelete": true
                                            },
                                            "donotdelete": true,
                                            "required": true
                                        },
                                        "priority": 1,
                                        "donotuse": false
                                    }
                                ],
                                "dedupekey": "po-nr223jg"
                            }
                        ],
                        "bankaccounts": [],
                        "bacsbankaccount": {},
                        "documents": [
                            {
                                "id": 2,
                                "created": "2017-05-15 15:29:38",
                                "document": {
                                    "id": 1,
                                    "name": "Tabs 2 roadmap.pdf",
                                    "filename": "Tabs 2 roadmap.pdf",
                                    "timeadded": "2014-01-01 12:00:00",
                                    "weight": 0,
                                    "private": false,
                                    "description": "A document",
                                    "mimetype": {
                                        "id": 1,
                                        "name": "application/pdf",
                                        "shortname": "pdf"
                                    },
                                    "file": "/v2/file/1"
                                }
                            }
                        ],
                        "mergedinto": "",
                        "potentialduplicates": [
                            "/v2/potentialduplicate/1"
                        ],
                        "mergedactors": [
                            "/v2/customer/9"
                        ],
                        "accountingreference": "",
                        "tabscode": "CUS5678",
                        "defaultbrandinggroup": [],
                        "defaultbookingbrand": [],
                        "defaultbranding": []
                    },
                    "notduplicate": null,
                    "matchpercentage": 100
                },
                {
                    "id": 2,
                    "actor1": {
                        "id": 7,
                        "type": "Customer",
                        "actorcode": "",
                        "created": "2017-05-15",
                        "updated": "",
                        "language": {
                            "id": 1,
                            "code": "EN",
                            "name": "English"
                        },
                        "inactive": false,
                        "firstname": "Thomas",
                        "surname": "Thornley",
                        "title": "Mr",
                        "salutation": "Tom",
                        "companyname": "Norfolk Country Cottages",
                        "vatnumber": "1234567890123456",
                        "companynumber": "123456789012",
                        "contactdetails": [
                            {
                                "id": 1,
                                "type": "F",
                                "contactmethodtype": "Phone",
                                "contactmethodsubtype": "",
                                "countrycode": "123",
                                "subscribernumber": "1603888999",
                                "extension": "",
                                "comment": "",
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [],
                                "dedupekey": "ph-123-1603888999"
                            },
                            {
                                "id": 2,
                                "type": "C",
                                "contactmethodtype": "Email",
                                "contactmethodsubtype": "",
                                "value": "support@tabs-software.co.uk",
                                "comment": "",
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [
                                    {
                                        "id": 1,
                                        "branding": "/v2/branding/1",
                                        "rolereason": {
                                            "id": 1,
                                            "role": {
                                                "id": 1,
                                                "name": "Customer",
                                                "donotdelete": true
                                            },
                                            "reason": {
                                                "id": 1,
                                                "name": "Booking Confirmation",
                                                "donotdelete": true
                                            },
                                            "donotdelete": true,
                                            "required": true
                                        },
                                        "priority": 1,
                                        "donotuse": false
                                    }
                                ],
                                "dedupekey": "ot-support@tabs-software.co.uk"
                            },
                            {
                                "id": 3,
                                "type": "P",
                                "contactmethodsubtype": "",
                                "address": {
                                    "id": 1,
                                    "line1": "55 Banana Street",
                                    "line2": "",
                                    "line3": "",
                                    "town": "Fictional Town",
                                    "county": "Norfolk",
                                    "postcode": "NR22 2JG",
                                    "country": {
                                        "alpha2": "GB",
                                        "alpha3": "GBR",
                                        "name": "United Kingdom"
                                    },
                                    "longitude": "0.000000",
                                    "latitude": "0.000000",
                                    "geohash": ""
                                },
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [
                                    {
                                        "id": 2,
                                        "branding": "/v2/branding/1",
                                        "rolereason": {
                                            "id": 1,
                                            "role": {
                                                "id": 1,
                                                "name": "Customer",
                                                "donotdelete": true
                                            },
                                            "reason": {
                                                "id": 1,
                                                "name": "Booking Confirmation",
                                                "donotdelete": true
                                            },
                                            "donotdelete": true,
                                            "required": true
                                        },
                                        "priority": 1,
                                        "donotuse": false
                                    }
                                ],
                                "dedupekey": "po-nr222jg"
                            }
                        ],
                        "bankaccounts": [
                            {
                                "id": 1,
                                "accountnumber": "12345678",
                                "accountname": "Mr Smith",
                                "bankname": "Barclays",
                                "address": {
                                    "id": 5,
                                    "line1": "10 High St",
                                    "line2": "",
                                    "line3": "",
                                    "town": "Dereham",
                                    "county": "Norfolk",
                                    "postcode": "NR20 5SD",
                                    "country": {
                                        "alpha2": "GB",
                                        "alpha3": "GBR",
                                        "name": "United Kingdom"
                                    },
                                    "longitude": 0,
                                    "latitude": 0,
                                    "geohash": ""
                                },
                                "sortcode": "221349",
                                "paymentreference": "PR20193",
                                "rollnumber": "2"
                            },
                            {
                                "id": 2,
                                "accountnumber": "99995678",
                                "accountname": "Mr Smith",
                                "bankname": "Barclays",
                                "address": {
                                    "id": 6,
                                    "line1": "10 High St",
                                    "line2": "",
                                    "line3": "",
                                    "town": "Dereham",
                                    "county": "Norfolk",
                                    "postcode": "NR20 5SD",
                                    "country": {
                                        "alpha2": "GB",
                                        "alpha3": "GBR",
                                        "name": "United Kingdom"
                                    },
                                    "longitude": 0,
                                    "latitude": 0,
                                    "geohash": ""
                                },
                                "sortcode": "221349",
                                "paymentreference": "PR20193",
                                "rollnumber": "2"
                            },
                            {
                                "id": 3,
                                "accountnumber": "99995678",
                                "accountname": "Mr Smith",
                                "bankname": "Barclays",
                                "address": {
                                    "id": 9,
                                    "line1": "10 High St",
                                    "line2": "",
                                    "line3": "",
                                    "town": "Dereham",
                                    "county": "Norfolk",
                                    "postcode": "NR20 5SD",
                                    "country": {
                                        "alpha2": "GB",
                                        "alpha3": "GBR",
                                        "name": "United Kingdom"
                                    },
                                    "longitude": 0,
                                    "latitude": 0,
                                    "geohash": ""
                                },
                                "sortcode": "221349",
                                "paymentreference": "PR20193",
                                "rollnumber": "2"
                            }
                        ],
                        "bacsbankaccount": {
                            "id": 1,
                            "accountnumber": "12345678",
                            "accountname": "Mr Smith",
                            "bankname": "Barclays",
                            "address": {
                                "id": 5,
                                "line1": "10 High St",
                                "line2": "",
                                "line3": "",
                                "town": "Dereham",
                                "county": "Norfolk",
                                "postcode": "NR20 5SD",
                                "country": {
                                    "alpha2": "GB",
                                    "alpha3": "GBR",
                                    "name": "United Kingdom"
                                },
                                "longitude": 0,
                                "latitude": 0,
                                "geohash": ""
                            },
                            "sortcode": "221349",
                            "paymentreference": "PR20193",
                            "rollnumber": "2"
                        },
                        "documents": [
                            {
                                "id": 1,
                                "created": "2017-05-15 15:29:38",
                                "document": {
                                    "id": 1,
                                    "name": "Tabs 2 roadmap.pdf",
                                    "filename": "Tabs 2 roadmap.pdf",
                                    "timeadded": "2014-01-01 12:00:00",
                                    "weight": 0,
                                    "private": false,
                                    "description": "A document",
                                    "mimetype": {
                                        "id": 1,
                                        "name": "application/pdf",
                                        "shortname": "pdf"
                                    },
                                    "file": "/v2/file/1"
                                }
                            }
                        ],
                        "mergedinto": "",
                        "potentialduplicates": [
                            "/v2/potentialduplicate/1"
                        ],
                        "mergedactors": [],
                        "accountingreference": "",
                        "tabscode": "CUS1234",
                        "defaultbrandinggroup": [],
                        "defaultbookingbrand": [],
                        "defaultbranding": []
                    },
                    "actor2": {
                        "id": 9,
                        "type": "Customer",
                        "actorcode": "",
                        "created": "2017-05-15",
                        "updated": "",
                        "language": {
                            "id": 1,
                            "code": "EN",
                            "name": "English"
                        },
                        "inactive": false,
                        "firstname": "T",
                        "surname": "Thornley",
                        "title": "Mr",
                        "salutation": "Tom",
                        "companyname": "Norfolk Country Cottages",
                        "vatnumber": "1234567890123456",
                        "companynumber": "123456789012",
                        "contactdetails": [
                            {
                                "id": 7,
                                "type": "F",
                                "contactmethodtype": "Phone",
                                "contactmethodsubtype": "",
                                "countrycode": "123",
                                "subscribernumber": "1603888999",
                                "extension": "",
                                "comment": "",
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [],
                                "dedupekey": "ph-123-1603888999"
                            },
                            {
                                "id": 8,
                                "type": "C",
                                "contactmethodtype": "Email",
                                "contactmethodsubtype": "",
                                "value": "support@tabs-software.co.uk",
                                "comment": "",
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [
                                    {
                                        "id": 5,
                                        "branding": "/v2/branding/1",
                                        "rolereason": {
                                            "id": 1,
                                            "role": {
                                                "id": 1,
                                                "name": "Customer",
                                                "donotdelete": true
                                            },
                                            "reason": {
                                                "id": 1,
                                                "name": "Booking Confirmation",
                                                "donotdelete": true
                                            },
                                            "donotdelete": true,
                                            "required": true
                                        },
                                        "priority": 1,
                                        "donotuse": false
                                    }
                                ],
                                "dedupekey": "ot-support@tabs-software.co.uk"
                            },
                            {
                                "id": 9,
                                "type": "P",
                                "contactmethodsubtype": "",
                                "address": {
                                    "id": 8,
                                    "line1": "99 Banana Street",
                                    "line2": "",
                                    "line3": "",
                                    "town": "Fictional Town",
                                    "county": "Norfolk",
                                    "postcode": "NR22 3JG",
                                    "country": {
                                        "alpha2": "GB",
                                        "alpha3": "GBR",
                                        "name": "United Kingdom"
                                    },
                                    "longitude": "1.652729",
                                    "latitude": "51.617954",
                                    "geohash": ""
                                },
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [
                                    {
                                        "id": 6,
                                        "branding": "/v2/branding/1",
                                        "rolereason": {
                                            "id": 1,
                                            "role": {
                                                "id": 1,
                                                "name": "Customer",
                                                "donotdelete": true
                                            },
                                            "reason": {
                                                "id": 1,
                                                "name": "Booking Confirmation",
                                                "donotdelete": true
                                            },
                                            "donotdelete": true,
                                            "required": true
                                        },
                                        "priority": 1,
                                        "donotuse": false
                                    }
                                ],
                                "dedupekey": "po-nr223jg"
                            }
                        ],
                        "bankaccounts": [],
                        "bacsbankaccount": {},
                        "documents": [
                            {
                                "id": 3,
                                "created": "2017-05-15 15:29:38",
                                "document": {
                                    "id": 1,
                                    "name": "Tabs 2 roadmap.pdf",
                                    "filename": "Tabs 2 roadmap.pdf",
                                    "timeadded": "2014-01-01 12:00:00",
                                    "weight": 0,
                                    "private": false,
                                    "description": "A document",
                                    "mimetype": {
                                        "id": 1,
                                        "name": "application/pdf",
                                        "shortname": "pdf"
                                    },
                                    "file": "/v2/file/1"
                                }
                            }
                        ],
                        "mergedinto": "/v2/customer/8",
                        "potentialduplicates": [],
                        "mergedactors": [],
                        "accountingreference": "",
                        "tabscode": "CUS1212",
                        "defaultbrandinggroup": [],
                        "defaultbookingbrand": [],
                        "defaultbranding": []
                    },
                    "notduplicate": true,
                    "matchpercentage": 100,
                    "processeddatetime": "2015-03-14 12:34:56",
                    "processedby": "/v2/tabsuser/1"
                },
                {
                    "id": 3,
                    "actor1": {
                        "id": 8,
                        "type": "Customer",
                        "actorcode": "",
                        "created": "2017-05-15",
                        "updated": "",
                        "language": {
                            "id": 1,
                            "code": "EN",
                            "name": "English"
                        },
                        "inactive": false,
                        "firstname": "Thomas",
                        "surname": "Thornley",
                        "title": "Mr",
                        "salutation": "Tom",
                        "companyname": "Norfolk Country Cottages",
                        "vatnumber": "1234567890123456",
                        "companynumber": "123456789012",
                        "contactdetails": [
                            {
                                "id": 4,
                                "type": "F",
                                "contactmethodtype": "Phone",
                                "contactmethodsubtype": "",
                                "countrycode": "123",
                                "subscribernumber": "1603888999",
                                "extension": "",
                                "comment": "",
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [],
                                "dedupekey": "ph-123-1603888999"
                            },
                            {
                                "id": 5,
                                "type": "C",
                                "contactmethodtype": "Email",
                                "contactmethodsubtype": "",
                                "value": "support@tabs-software.co.uk",
                                "comment": "",
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [
                                    {
                                        "id": 3,
                                        "branding": "/v2/branding/1",
                                        "rolereason": {
                                            "id": 1,
                                            "role": {
                                                "id": 1,
                                                "name": "Customer",
                                                "donotdelete": true
                                            },
                                            "reason": {
                                                "id": 1,
                                                "name": "Booking Confirmation",
                                                "donotdelete": true
                                            },
                                            "donotdelete": true,
                                            "required": true
                                        },
                                        "priority": 1,
                                        "donotuse": false
                                    }
                                ],
                                "dedupekey": "ot-support@tabs-software.co.uk"
                            },
                            {
                                "id": 6,
                                "type": "P",
                                "contactmethodsubtype": "",
                                "address": {
                                    "id": 7,
                                    "line1": "99 Banana Street",
                                    "line2": "",
                                    "line3": "",
                                    "town": "Fictional Town",
                                    "county": "Norfolk",
                                    "postcode": "NR22 3JG",
                                    "country": {
                                        "alpha2": "GB",
                                        "alpha3": "GBR",
                                        "name": "United Kingdom"
                                    },
                                    "longitude": "1.652729",
                                    "latitude": "52.617954",
                                    "geohash": ""
                                },
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [
                                    {
                                        "id": 4,
                                        "branding": "/v2/branding/1",
                                        "rolereason": {
                                            "id": 1,
                                            "role": {
                                                "id": 1,
                                                "name": "Customer",
                                                "donotdelete": true
                                            },
                                            "reason": {
                                                "id": 1,
                                                "name": "Booking Confirmation",
                                                "donotdelete": true
                                            },
                                            "donotdelete": true,
                                            "required": true
                                        },
                                        "priority": 1,
                                        "donotuse": false
                                    }
                                ],
                                "dedupekey": "po-nr223jg"
                            }
                        ],
                        "bankaccounts": [],
                        "bacsbankaccount": {},
                        "documents": [
                            {
                                "id": 2,
                                "created": "2017-05-15 15:29:38",
                                "document": {
                                    "id": 1,
                                    "name": "Tabs 2 roadmap.pdf",
                                    "filename": "Tabs 2 roadmap.pdf",
                                    "timeadded": "2014-01-01 12:00:00",
                                    "weight": 0,
                                    "private": false,
                                    "description": "A document",
                                    "mimetype": {
                                        "id": 1,
                                        "name": "application/pdf",
                                        "shortname": "pdf"
                                    },
                                    "file": "/v2/file/1"
                                }
                            }
                        ],
                        "mergedinto": "",
                        "potentialduplicates": [
                            "/v2/potentialduplicate/1"
                        ],
                        "mergedactors": [
                            "/v2/customer/9"
                        ],
                        "accountingreference": "",
                        "tabscode": "CUS5678",
                        "defaultbrandinggroup": [],
                        "defaultbookingbrand": [],
                        "defaultbranding": []
                    },
                    "actor2": {
                        "id": 9,
                        "type": "Customer",
                        "actorcode": "",
                        "created": "2017-05-15",
                        "updated": "",
                        "language": {
                            "id": 1,
                            "code": "EN",
                            "name": "English"
                        },
                        "inactive": false,
                        "firstname": "T",
                        "surname": "Thornley",
                        "title": "Mr",
                        "salutation": "Tom",
                        "companyname": "Norfolk Country Cottages",
                        "vatnumber": "1234567890123456",
                        "companynumber": "123456789012",
                        "contactdetails": [
                            {
                                "id": 7,
                                "type": "F",
                                "contactmethodtype": "Phone",
                                "contactmethodsubtype": "",
                                "countrycode": "123",
                                "subscribernumber": "1603888999",
                                "extension": "",
                                "comment": "",
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [],
                                "dedupekey": "ph-123-1603888999"
                            },
                            {
                                "id": 8,
                                "type": "C",
                                "contactmethodtype": "Email",
                                "contactmethodsubtype": "",
                                "value": "support@tabs-software.co.uk",
                                "comment": "",
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [
                                    {
                                        "id": 5,
                                        "branding": "/v2/branding/1",
                                        "rolereason": {
                                            "id": 1,
                                            "role": {
                                                "id": 1,
                                                "name": "Customer",
                                                "donotdelete": true
                                            },
                                            "reason": {
                                                "id": 1,
                                                "name": "Booking Confirmation",
                                                "donotdelete": true
                                            },
                                            "donotdelete": true,
                                            "required": true
                                        },
                                        "priority": 1,
                                        "donotuse": false
                                    }
                                ],
                                "dedupekey": "ot-support@tabs-software.co.uk"
                            },
                            {
                                "id": 9,
                                "type": "P",
                                "contactmethodsubtype": "",
                                "address": {
                                    "id": 8,
                                    "line1": "99 Banana Street",
                                    "line2": "",
                                    "line3": "",
                                    "town": "Fictional Town",
                                    "county": "Norfolk",
                                    "postcode": "NR22 3JG",
                                    "country": {
                                        "alpha2": "GB",
                                        "alpha3": "GBR",
                                        "name": "United Kingdom"
                                    },
                                    "longitude": "1.652729",
                                    "latitude": "51.617954",
                                    "geohash": ""
                                },
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [
                                    {
                                        "id": 6,
                                        "branding": "/v2/branding/1",
                                        "rolereason": {
                                            "id": 1,
                                            "role": {
                                                "id": 1,
                                                "name": "Customer",
                                                "donotdelete": true
                                            },
                                            "reason": {
                                                "id": 1,
                                                "name": "Booking Confirmation",
                                                "donotdelete": true
                                            },
                                            "donotdelete": true,
                                            "required": true
                                        },
                                        "priority": 1,
                                        "donotuse": false
                                    }
                                ],
                                "dedupekey": "po-nr223jg"
                            }
                        ],
                        "bankaccounts": [],
                        "bacsbankaccount": {},
                        "documents": [
                            {
                                "id": 3,
                                "created": "2017-05-15 15:29:38",
                                "document": {
                                    "id": 1,
                                    "name": "Tabs 2 roadmap.pdf",
                                    "filename": "Tabs 2 roadmap.pdf",
                                    "timeadded": "2014-01-01 12:00:00",
                                    "weight": 0,
                                    "private": false,
                                    "description": "A document",
                                    "mimetype": {
                                        "id": 1,
                                        "name": "application/pdf",
                                        "shortname": "pdf"
                                    },
                                    "file": "/v2/file/1"
                                }
                            }
                        ],
                        "mergedinto": "/v2/customer/8",
                        "potentialduplicates": [],
                        "mergedactors": [],
                        "accountingreference": "",
                        "tabscode": "CUS1212",
                        "defaultbrandinggroup": [],
                        "defaultbookingbrand": [],
                        "defaultbranding": []
                    },
                    "notduplicate": null,
                    "matchpercentage": 100,
                    "actorkept": 1,
                    "mergedentities": [],
                    "processeddatetime": "2015-03-14 12:44:56",
                    "processedby": "/v2/tabsuser/1"
                }
            ]
        }

## Potential Duplicate Index [/v2/potentialduplicate]
### Add a new PotentialDuplicate [POST]

The following fields should be provided in the POST array

* ```actorid1``` The id of one of the actors which may be a duplicate
* ```actorid2``` The id of the other actor which may be a duplicate

+ Response 201
    + Headers

            Location: /v2/potentialduplicate/1

## Potential Duplicate Detail [/v2/potentialduplicate/{id}]

+ Parameters

    + id (required, integer, `3`) ... The id of the PotentialDuplicate to get

### Gets the details of a Potential Duplicate [GET]

+ Response 200 (application/json)

        {
            "id": 3,
            "actor1": {
                "id": 8,
                "type": "Customer",
                "actorcode": "",
                "created": "2017-05-15",
                "updated": "",
                "language": {
                    "id": 1,
                    "code": "EN",
                    "name": "English"
                },
                "inactive": false,
                "firstname": "Thomas",
                "surname": "Thornley",
                "title": "Mr",
                "salutation": "Tom",
                "companyname": "Norfolk Country Cottages",
                "vatnumber": "1234567890123456",
                "companynumber": "123456789012",
                "contactdetails": [
                    {
                        "id": 4,
                        "type": "F",
                        "contactmethodtype": "Phone",
                        "contactmethodsubtype": "",
                        "countrycode": "123",
                        "subscribernumber": "1603888999",
                        "extension": "",
                        "comment": "",
                        "invalid": false,
                        "invaliddatetime": "",
                        "invalidreason": "",
                        "contactpreferences": [],
                        "dedupekey": "ph-123-1603888999"
                    },
                    {
                        "id": 5,
                        "type": "C",
                        "contactmethodtype": "Email",
                        "contactmethodsubtype": "",
                        "value": "support@tabs-software.co.uk",
                        "comment": "",
                        "invalid": false,
                        "invaliddatetime": "",
                        "invalidreason": "",
                        "contactpreferences": [
                            {
                                "id": 3,
                                "branding": "/v2/branding/1",
                                "rolereason": {
                                    "id": 1,
                                    "role": {
                                        "id": 1,
                                        "name": "Customer",
                                        "donotdelete": true
                                    },
                                    "reason": {
                                        "id": 1,
                                        "name": "Booking Confirmation",
                                        "donotdelete": true
                                    },
                                    "donotdelete": true,
                                    "required": true
                                },
                                "priority": 1,
                                "donotuse": false
                            }
                        ],
                        "dedupekey": "ot-support@tabs-software.co.uk"
                    },
                    {
                        "id": 6,
                        "type": "P",
                        "contactmethodsubtype": "",
                        "address": {
                            "id": 7,
                            "line1": "99 Banana Street",
                            "line2": "",
                            "line3": "",
                            "town": "Fictional Town",
                            "county": "Norfolk",
                            "postcode": "NR22 3JG",
                            "country": {
                                "alpha2": "GB",
                                "alpha3": "GBR",
                                "name": "United Kingdom"
                            },
                            "longitude": "1.652729",
                            "latitude": "52.617954",
                            "geohash": ""
                        },
                        "invalid": false,
                        "invaliddatetime": "",
                        "invalidreason": "",
                        "contactpreferences": [
                            {
                                "id": 4,
                                "branding": "/v2/branding/1",
                                "rolereason": {
                                    "id": 1,
                                    "role": {
                                        "id": 1,
                                        "name": "Customer",
                                        "donotdelete": true
                                    },
                                    "reason": {
                                        "id": 1,
                                        "name": "Booking Confirmation",
                                        "donotdelete": true
                                    },
                                    "donotdelete": true,
                                    "required": true
                                },
                                "priority": 1,
                                "donotuse": false
                            }
                        ],
                        "dedupekey": "po-nr223jg"
                    }
                ],
                "bankaccounts": [],
                "bacsbankaccount": {},
                "documents": [
                    {
                        "id": 2,
                        "created": "2017-05-15 15:29:38",
                        "document": {
                            "id": 1,
                            "name": "Tabs 2 roadmap.pdf",
                            "filename": "Tabs 2 roadmap.pdf",
                            "timeadded": "2014-01-01 12:00:00",
                            "weight": 0,
                            "private": false,
                            "description": "A document",
                            "mimetype": {
                                "id": 1,
                                "name": "application/pdf",
                                "shortname": "pdf"
                            },
                            "file": "/v2/file/1"
                        }
                    }
                ],
                "mergedinto": "",
                "potentialduplicates": [
                    "/v2/potentialduplicate/1"
                ],
                "mergedactors": [
                    "/v2/customer/9"
                ],
                "accountingreference": "",
                "tabscode": "CUS5678",
                "defaultbrandinggroup": [],
                "defaultbookingbrand": [],
                "defaultbranding": []
            },
            "actor2": {
                "id": 9,
                "type": "Customer",
                "actorcode": "",
                "created": "2017-05-15",
                "updated": "",
                "language": {
                    "id": 1,
                    "code": "EN",
                    "name": "English"
                },
                "inactive": false,
                "firstname": "T",
                "surname": "Thornley",
                "title": "Mr",
                "salutation": "Tom",
                "companyname": "Norfolk Country Cottages",
                "vatnumber": "1234567890123456",
                "companynumber": "123456789012",
                "contactdetails": [
                    {
                        "id": 7,
                        "type": "F",
                        "contactmethodtype": "Phone",
                        "contactmethodsubtype": "",
                        "countrycode": "123",
                        "subscribernumber": "1603888999",
                        "extension": "",
                        "comment": "",
                        "invalid": false,
                        "invaliddatetime": "",
                        "invalidreason": "",
                        "contactpreferences": [],
                        "dedupekey": "ph-123-1603888999"
                    },
                    {
                        "id": 8,
                        "type": "C",
                        "contactmethodtype": "Email",
                        "contactmethodsubtype": "",
                        "value": "support@tabs-software.co.uk",
                        "comment": "",
                        "invalid": false,
                        "invaliddatetime": "",
                        "invalidreason": "",
                        "contactpreferences": [
                            {
                                "id": 5,
                                "branding": "/v2/branding/1",
                                "rolereason": {
                                    "id": 1,
                                    "role": {
                                        "id": 1,
                                        "name": "Customer",
                                        "donotdelete": true
                                    },
                                    "reason": {
                                        "id": 1,
                                        "name": "Booking Confirmation",
                                        "donotdelete": true
                                    },
                                    "donotdelete": true,
                                    "required": true
                                },
                                "priority": 1,
                                "donotuse": false
                            }
                        ],
                        "dedupekey": "ot-support@tabs-software.co.uk"
                    },
                    {
                        "id": 9,
                        "type": "P",
                        "contactmethodsubtype": "",
                        "address": {
                            "id": 8,
                            "line1": "99 Banana Street",
                            "line2": "",
                            "line3": "",
                            "town": "Fictional Town",
                            "county": "Norfolk",
                            "postcode": "NR22 3JG",
                            "country": {
                                "alpha2": "GB",
                                "alpha3": "GBR",
                                "name": "United Kingdom"
                            },
                            "longitude": "1.652729",
                            "latitude": "51.617954",
                            "geohash": ""
                        },
                        "invalid": false,
                        "invaliddatetime": "",
                        "invalidreason": "",
                        "contactpreferences": [
                            {
                                "id": 6,
                                "branding": "/v2/branding/1",
                                "rolereason": {
                                    "id": 1,
                                    "role": {
                                        "id": 1,
                                        "name": "Customer",
                                        "donotdelete": true
                                    },
                                    "reason": {
                                        "id": 1,
                                        "name": "Booking Confirmation",
                                        "donotdelete": true
                                    },
                                    "donotdelete": true,
                                    "required": true
                                },
                                "priority": 1,
                                "donotuse": false
                            }
                        ],
                        "dedupekey": "po-nr223jg"
                    }
                ],
                "bankaccounts": [],
                "bacsbankaccount": {},
                "documents": [
                    {
                        "id": 3,
                        "created": "2017-05-15 15:29:38",
                        "document": {
                            "id": 1,
                            "name": "Tabs 2 roadmap.pdf",
                            "filename": "Tabs 2 roadmap.pdf",
                            "timeadded": "2014-01-01 12:00:00",
                            "weight": 0,
                            "private": false,
                            "description": "A document",
                            "mimetype": {
                                "id": 1,
                                "name": "application/pdf",
                                "shortname": "pdf"
                            },
                            "file": "/v2/file/1"
                        }
                    }
                ],
                "mergedinto": "/v2/customer/8",
                "potentialduplicates": [],
                "mergedactors": [],
                "accountingreference": "",
                "tabscode": "CUS1212",
                "defaultbrandinggroup": [],
                "defaultbookingbrand": [],
                "defaultbranding": []
            },
            "notduplicate": null,
            "matchpercentage": 100,
            "actorkept": 1,
            "mergedentities": [],
            "processeddatetime": "2015-03-14 12:44:56",
            "processedby": "/v2/tabsuser/1"
        }

### Update a PotentialDuplicate [PUT]
Update the PotentialDuplicate record. Setting the actorkept field causes the actors to be merged, unsetting it
causes the actors to be 'unmerged' (may not be 100% successful as merged entities may have been changed or deleted
since the merge!)

+ Request (application/x-www-form-urlencoded)

        actorkept=1
        processedbytabsuserid=2

+ Response 204

### Deletes a PotentialDuplicate [DELETE]

+ Response 204




## Category Index [/v2/category]
### Get all Categorys [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "category": "Bronze",
              "description": "Customers with up to 2 bookings in the last 2 years",
              "bookingsminimum": 1,
              "bookingsmaximum": 2,
              "andor": "and",
              "bookingvalueminimum": 0,
              "bookingvaluemaximum": 999999,
              "period": "2 years",
              "periodstartdate": "2014-11-30"
            },
            {
              "id": 2,
              "category": "Silver",
              "description": "Customers with 3-4 bookings in the last 2 years",
              "bookingsminimum": 3,
              "bookingsmaximum": 4,
              "andor": "and",
              "bookingvalueminimum": 0,
              "bookingvaluemaximum": 999999,
              "period": "2 years",
              "periodstartdate": "2014-11-30"
            },
            {
              "id": 3,
              "category": "Gold",
              "description": "Customers with more than 4 bookings in the last 2 years",
              "bookingsminimum": 4,
              "bookingsmaximum": 999,
              "andor": "and",
              "bookingvalueminimum": 0,
              "bookingvaluemaximum": 999999,
              "period": "2 years",
              "periodstartdate": "2014-11-30"
            }
          ]

### Add a new Category [POST]

The following fields should be provided in the POST array

* ```category``` The category name
* ```description``` Description of the category
* ```bookingsminimum``` The minimum number of bookings the customer must have confirmed in the period (optional, default=0)
* ```bookingsmaximum``` The maximum number of bookings the customer must have confirmed in the period (optional, default=999)
* ```andor``` Whether the customer must have a number of bookings AND a value, or a number of bookings OR a value (optional, default=OR)
* ```bookingvalueminimum``` The minimum value of bookings the customer must have confirmed in the period (optional, default=0)
* ```bookingvaluemaximum``` The maximum value of bookings the customer must have confirmed in the period (optional, default=999999)
* ```period``` The period, starting from today and going backwards, during which bookings are counted, e.g. '2 years' (optional, default='' (=forever))

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/category/2

## Category Detail [/v2/category/{id}]
+ Parameters

    + id (required, integer, `2`) ... The id of the Category to get

### Gets the details of a Category [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "category": "Silver",
            "description": "Customers with 3-4 bookings in the last 2 years",
            "bookingsminimum": 3,
            "bookingsmaximum": 4,
            "andor": "and",
            "bookingvalueminimum": 0,
            "bookingvaluemaximum": 999999,
            "period": "2 years",
            "periodstartdate": "2014-11-30"
          }

### Update a Category [PUT]

+ Request (application/x-www-form-urlencoded)

        donotdelete=false

+ Response 204

### Deletes a Category [DELETE]

+ Response 204




# Group Customer
A customer is a person or company that is known to the company, either through booking a holiday or through expressed an interest in doing so (eg. making an enquiry or signing up to receive e-newsletters)

## Customer List [/v2/customer{?page,limit,filter,orderBy}]
Postman: /v2/customer?page=1&limit=5&orderBy=id_DESC&filter=town=fictional town

### Return a list of customers [GET]

+ Parameters

    + page (optional, integer, `1`) ... The page of results to return
    + limit (optional, integer, `5`) ... The number of results to return
    + filter (optional, string, `town=fictional town`) ... One or more key/value pairs, separated by ':', used to filter the Customers
    + orderBy (optional, string, `id_DESC`) ... Set field names for ordering of results, separated by ':'

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 3,
            "page": 1,
            "count": 3,
            "limit": 5,
            "time": 0,
            "orderBy": "id_DESC",
            "filter": "town=fictional town",
            "previous": null,
            "next": null,
            "elements": [
                {
                    "id": 9,
                    "type": "Customer",
                    "actorcode": "",
                    "created": "2017-05-15",
                    "updated": "",
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "inactive": false,
                    "firstname": "T",
                    "surname": "Thornley",
                    "title": "Mr",
                    "salutation": "Tom",
                    "companyname": "Norfolk Country Cottages",
                    "vatnumber": "1234567890123456",
                    "companynumber": "123456789012",
                    "contactdetails": [
                        {
                            "id": 7,
                            "type": "F",
                            "contactmethodtype": "Phone",
                            "contactmethodsubtype": "",
                            "countrycode": "123",
                            "subscribernumber": "1603888999",
                            "extension": "",
                            "comment": "",
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [],
                            "dedupekey": "ph-123-1603888999"
                        },
                        {
                            "id": 8,
                            "type": "C",
                            "contactmethodtype": "Email",
                            "contactmethodsubtype": "",
                            "value": "support@tabs-software.co.uk",
                            "comment": "",
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [
                                {
                                    "id": 5,
                                    "branding": "/v2/branding/1",
                                    "rolereason": {
                                        "id": 1,
                                        "role": {
                                            "id": 1,
                                            "name": "Customer",
                                            "donotdelete": true
                                        },
                                        "reason": {
                                            "id": 1,
                                            "name": "Booking Confirmation",
                                            "donotdelete": true
                                        },
                                        "donotdelete": true,
                                        "required": true
                                    },
                                    "priority": 1,
                                    "donotuse": false
                                }
                            ],
                            "dedupekey": "ot-support@tabs-software.co.uk"
                        },
                        {
                            "id": 9,
                            "type": "P",
                            "contactmethodsubtype": "",
                            "address": {
                                "id": 8,
                                "line1": "99 Banana Street",
                                "line2": "",
                                "line3": "",
                                "town": "Fictional Town",
                                "county": "Norfolk",
                                "postcode": "NR22 3JG",
                                "country": {
                                    "alpha2": "GB",
                                    "alpha3": "GBR",
                                    "name": "United Kingdom"
                                },
                                "longitude": "1.652729",
                                "latitude": "51.617954",
                                "geohash": ""
                            },
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [
                                {
                                    "id": 6,
                                    "branding": "/v2/branding/1",
                                    "rolereason": {
                                        "id": 1,
                                        "role": {
                                            "id": 1,
                                            "name": "Customer",
                                            "donotdelete": true
                                        },
                                        "reason": {
                                            "id": 1,
                                            "name": "Booking Confirmation",
                                            "donotdelete": true
                                        },
                                        "donotdelete": true,
                                        "required": true
                                    },
                                    "priority": 1,
                                    "donotuse": false
                                }
                            ],
                            "dedupekey": "po-nr223jg"
                        }
                    ],
                    "bankaccounts": [],
                    "bacsbankaccount": {},
                    "documents": [
                        {
                            "id": 3,
                            "created": "2017-05-15 15:29:38",
                            "document": {
                                "id": 1,
                                "name": "Tabs 2 roadmap.pdf",
                                "filename": "Tabs 2 roadmap.pdf",
                                "timeadded": "2014-01-01 12:00:00",
                                "weight": 0,
                                "private": false,
                                "description": "A document",
                                "mimetype": {
                                    "id": 1,
                                    "name": "application/pdf",
                                    "shortname": "pdf"
                                },
                                "file": "/v2/file/1"
                            }
                        }
                    ],
                    "mergedinto": "/v2/customer/8",
                    "potentialduplicates": [],
                    "mergedactors": [],
                    "accountingreference": "",
                    "tabscode": "CUS1212",
                    "defaultbrandinggroup": [],
                    "defaultbookingbrand": [],
                    "defaultbranding": []
                },
                {
                    "id": 8,
                    "type": "Customer",
                    "actorcode": "",
                    "created": "2017-05-15",
                    "updated": "",
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "inactive": false,
                    "firstname": "Thomas",
                    "surname": "Thornley",
                    "title": "Mr",
                    "salutation": "Tom",
                    "companyname": "Norfolk Country Cottages",
                    "vatnumber": "1234567890123456",
                    "companynumber": "123456789012",
                    "contactdetails": [
                        {
                            "id": 4,
                            "type": "F",
                            "contactmethodtype": "Phone",
                            "contactmethodsubtype": "",
                            "countrycode": "123",
                            "subscribernumber": "1603888999",
                            "extension": "",
                            "comment": "",
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [],
                            "dedupekey": "ph-123-1603888999"
                        },
                        {
                            "id": 5,
                            "type": "C",
                            "contactmethodtype": "Email",
                            "contactmethodsubtype": "",
                            "value": "support@tabs-software.co.uk",
                            "comment": "",
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [
                                {
                                    "id": 3,
                                    "branding": "/v2/branding/1",
                                    "rolereason": {
                                        "id": 1,
                                        "role": {
                                            "id": 1,
                                            "name": "Customer",
                                            "donotdelete": true
                                        },
                                        "reason": {
                                            "id": 1,
                                            "name": "Booking Confirmation",
                                            "donotdelete": true
                                        },
                                        "donotdelete": true,
                                        "required": true
                                    },
                                    "priority": 1,
                                    "donotuse": false
                                }
                            ],
                            "dedupekey": "ot-support@tabs-software.co.uk"
                        },
                        {
                            "id": 6,
                            "type": "P",
                            "contactmethodsubtype": "",
                            "address": {
                                "id": 7,
                                "line1": "99 Banana Street",
                                "line2": "",
                                "line3": "",
                                "town": "Fictional Town",
                                "county": "Norfolk",
                                "postcode": "NR22 3JG",
                                "country": {
                                    "alpha2": "GB",
                                    "alpha3": "GBR",
                                    "name": "United Kingdom"
                                },
                                "longitude": "1.652729",
                                "latitude": "52.617954",
                                "geohash": ""
                            },
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [
                                {
                                    "id": 4,
                                    "branding": "/v2/branding/1",
                                    "rolereason": {
                                        "id": 1,
                                        "role": {
                                            "id": 1,
                                            "name": "Customer",
                                            "donotdelete": true
                                        },
                                        "reason": {
                                            "id": 1,
                                            "name": "Booking Confirmation",
                                            "donotdelete": true
                                        },
                                        "donotdelete": true,
                                        "required": true
                                    },
                                    "priority": 1,
                                    "donotuse": false
                                }
                            ],
                            "dedupekey": "po-nr223jg"
                        }
                    ],
                    "bankaccounts": [],
                    "bacsbankaccount": {},
                    "documents": [
                        {
                            "id": 2,
                            "created": "2017-05-15 15:29:38",
                            "document": {
                                "id": 1,
                                "name": "Tabs 2 roadmap.pdf",
                                "filename": "Tabs 2 roadmap.pdf",
                                "timeadded": "2014-01-01 12:00:00",
                                "weight": 0,
                                "private": false,
                                "description": "A document",
                                "mimetype": {
                                    "id": 1,
                                    "name": "application/pdf",
                                    "shortname": "pdf"
                                },
                                "file": "/v2/file/1"
                            }
                        }
                    ],
                    "mergedinto": "",
                    "potentialduplicates": [
                        "/v2/potentialduplicate/1"
                    ],
                    "mergedactors": [
                        "/v2/customer/9"
                    ],
                    "accountingreference": "",
                    "tabscode": "CUS5678",
                    "defaultbrandinggroup": [],
                    "defaultbookingbrand": [],
                    "defaultbranding": []
                },
                {
                    "id": 7,
                    "type": "Customer",
                    "actorcode": "",
                    "created": "2017-05-15",
                    "updated": "",
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "inactive": false,
                    "firstname": "Thomas",
                    "surname": "Thornley",
                    "title": "Mr",
                    "salutation": "Tom",
                    "companyname": "Norfolk Country Cottages",
                    "vatnumber": "1234567890123456",
                    "companynumber": "123456789012",
                    "contactdetails": [
                        {
                            "id": 1,
                            "type": "F",
                            "contactmethodtype": "Phone",
                            "contactmethodsubtype": "",
                            "countrycode": "123",
                            "subscribernumber": "1603888999",
                            "extension": "",
                            "comment": "",
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [],
                            "dedupekey": "ph-123-1603888999"
                        },
                        {
                            "id": 2,
                            "type": "C",
                            "contactmethodtype": "Email",
                            "contactmethodsubtype": "",
                            "value": "support@tabs-software.co.uk",
                            "comment": "",
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [
                                {
                                    "id": 1,
                                    "branding": "/v2/branding/1",
                                    "rolereason": {
                                        "id": 1,
                                        "role": {
                                            "id": 1,
                                            "name": "Customer",
                                            "donotdelete": true
                                        },
                                        "reason": {
                                            "id": 1,
                                            "name": "Booking Confirmation",
                                            "donotdelete": true
                                        },
                                        "donotdelete": true,
                                        "required": true
                                    },
                                    "priority": 1,
                                    "donotuse": false
                                }
                            ],
                            "dedupekey": "ot-support@tabs-software.co.uk"
                        },
                        {
                            "id": 3,
                            "type": "P",
                            "contactmethodsubtype": "",
                            "address": {
                                "id": 1,
                                "line1": "55 Banana Street",
                                "line2": "",
                                "line3": "",
                                "town": "Fictional Town",
                                "county": "Norfolk",
                                "postcode": "NR22 2JG",
                                "country": {
                                    "alpha2": "GB",
                                    "alpha3": "GBR",
                                    "name": "United Kingdom"
                                },
                                "longitude": "0.000000",
                                "latitude": "0.000000",
                                "geohash": ""
                            },
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [
                                {
                                    "id": 2,
                                    "branding": "/v2/branding/1",
                                    "rolereason": {
                                        "id": 1,
                                        "role": {
                                            "id": 1,
                                            "name": "Customer",
                                            "donotdelete": true
                                        },
                                        "reason": {
                                            "id": 1,
                                            "name": "Booking Confirmation",
                                            "donotdelete": true
                                        },
                                        "donotdelete": true,
                                        "required": true
                                    },
                                    "priority": 1,
                                    "donotuse": false
                                }
                            ],
                            "dedupekey": "po-nr222jg"
                        }
                    ],
                    "bankaccounts": [
                        {
                            "id": 1,
                            "accountnumber": "12345678",
                            "accountname": "Mr Smith",
                            "bankname": "Barclays",
                            "address": {
                                "id": 5,
                                "line1": "10 High St",
                                "line2": "",
                                "line3": "",
                                "town": "Dereham",
                                "county": "Norfolk",
                                "postcode": "NR20 5SD",
                                "country": {
                                    "alpha2": "GB",
                                    "alpha3": "GBR",
                                    "name": "United Kingdom"
                                },
                                "longitude": 0,
                                "latitude": 0,
                                "geohash": ""
                            },
                            "sortcode": "221349",
                            "paymentreference": "PR20193",
                            "rollnumber": "2"
                        },
                        {
                            "id": 2,
                            "accountnumber": "99995678",
                            "accountname": "Mr Smith",
                            "bankname": "Barclays",
                            "address": {
                                "id": 6,
                                "line1": "10 High St",
                                "line2": "",
                                "line3": "",
                                "town": "Dereham",
                                "county": "Norfolk",
                                "postcode": "NR20 5SD",
                                "country": {
                                    "alpha2": "GB",
                                    "alpha3": "GBR",
                                    "name": "United Kingdom"
                                },
                                "longitude": 0,
                                "latitude": 0,
                                "geohash": ""
                            },
                            "sortcode": "221349",
                            "paymentreference": "PR20193",
                            "rollnumber": "2"
                        },
                        {
                            "id": 3,
                            "accountnumber": "99995678",
                            "accountname": "Mr Smith",
                            "bankname": "Barclays",
                            "address": {
                                "id": 9,
                                "line1": "10 High St",
                                "line2": "",
                                "line3": "",
                                "town": "Dereham",
                                "county": "Norfolk",
                                "postcode": "NR20 5SD",
                                "country": {
                                    "alpha2": "GB",
                                    "alpha3": "GBR",
                                    "name": "United Kingdom"
                                },
                                "longitude": 0,
                                "latitude": 0,
                                "geohash": ""
                            },
                            "sortcode": "221349",
                            "paymentreference": "PR20193",
                            "rollnumber": "2"
                        }
                    ],
                    "bacsbankaccount": {
                        "id": 1,
                        "accountnumber": "12345678",
                        "accountname": "Mr Smith",
                        "bankname": "Barclays",
                        "address": {
                            "id": 5,
                            "line1": "10 High St",
                            "line2": "",
                            "line3": "",
                            "town": "Dereham",
                            "county": "Norfolk",
                            "postcode": "NR20 5SD",
                            "country": {
                                "alpha2": "GB",
                                "alpha3": "GBR",
                                "name": "United Kingdom"
                            },
                            "longitude": 0,
                            "latitude": 0,
                            "geohash": ""
                        },
                        "sortcode": "221349",
                        "paymentreference": "PR20193",
                        "rollnumber": "2"
                    },
                    "documents": [
                        {
                            "id": 1,
                            "created": "2017-05-15 15:29:38",
                            "document": {
                                "id": 1,
                                "name": "Tabs 2 roadmap.pdf",
                                "filename": "Tabs 2 roadmap.pdf",
                                "timeadded": "2014-01-01 12:00:00",
                                "weight": 0,
                                "private": false,
                                "description": "A document",
                                "mimetype": {
                                    "id": 1,
                                    "name": "application/pdf",
                                    "shortname": "pdf"
                                },
                                "file": "/v2/file/1"
                            }
                        }
                    ],
                    "mergedinto": "",
                    "potentialduplicates": [
                        "/v2/potentialduplicate/1"
                    ],
                    "mergedactors": [],
                    "accountingreference": "",
                    "tabscode": "CUS1234",
                    "defaultbrandinggroup": [],
                    "defaultbookingbrand": [],
                    "defaultbranding": []
                }
            ]
        }


## Customer Index [/v2/customer]
### List customer filter options [OPTIONS]
Return a list of filter options for the customer endpoint

+ Response 200

        {
            surname: "Surname"
            inactive: "Inactive Status"
            email: "Email address"
            addressline1: "Address line 1"
            town: "Town"
            county: "County"
            "postcode": "Postcode",
            countrycode: "Country (Alpha2)"
        }

### Add a new Customer [POST]
The following fields may be provided in the POST array

* ```actorcode``` The actorcode
* ```title``` The title of the customer
* ```firstname``` The first name of the customer (optional)
* ```surname``` The surname of the customer
+ ```salutation``` Tabs customer ref (optional)
+ ```tabscode``` Tabs customer ref (optional)
+ ```languagecode``` Customer's preferred language
* ```companyname``` The name of the company (optional)
+ ```vatnumber``` Company's VAT number (optional)
+ ```companynumber``` Company's regsitered number (optional)
+ ```defaultbrandinggroupid``` The id of the default Branding Group for the actor (optional)
+ ```defaultbookingbrandid``` The id of the default Booking Brand for the actor (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/customer/1

## Customer Details [/v2/customer/{id}]

+ Parameters

    + id (required, integer, `7`) ... The id of the customer to get

### Gets the details of a customer [GET]

+ Response 200 (application/json)

        {
            "id": 7,
            "type": "Customer",
            "actorcode": "",
            "created": "2017-05-15",
            "updated": "",
            "language": {
                "id": 1,
                "code": "EN",
                "name": "English"
            },
            "inactive": false,
            "firstname": "Thomas",
            "surname": "Thornley",
            "title": "Mr",
            "salutation": "Tom",
            "companyname": "Norfolk Country Cottages",
            "vatnumber": "1234567890123456",
            "companynumber": "123456789012",
            "contactdetails": [
                {
                    "id": 1,
                    "type": "F",
                    "contactmethodtype": "Phone",
                    "contactmethodsubtype": "",
                    "countrycode": "123",
                    "subscribernumber": "1603888999",
                    "extension": "",
                    "comment": "",
                    "invalid": false,
                    "invaliddatetime": "",
                    "invalidreason": "",
                    "contactpreferences": [],
                    "dedupekey": "ph-123-1603888999"
                },
                {
                    "id": 2,
                    "type": "C",
                    "contactmethodtype": "Email",
                    "contactmethodsubtype": "",
                    "value": "support@tabs-software.co.uk",
                    "comment": "",
                    "invalid": false,
                    "invaliddatetime": "",
                    "invalidreason": "",
                    "contactpreferences": [
                        {
                            "id": 1,
                            "branding": "/v2/branding/1",
                            "rolereason": {
                                "id": 1,
                                "role": {
                                    "id": 1,
                                    "name": "Customer",
                                    "donotdelete": true
                                },
                                "reason": {
                                    "id": 1,
                                    "name": "Booking Confirmation",
                                    "donotdelete": true
                                },
                                "donotdelete": true,
                                "required": true
                            },
                            "priority": 1,
                            "donotuse": false
                        }
                    ],
                    "dedupekey": "ot-support@tabs-software.co.uk"
                },
                {
                    "id": 3,
                    "type": "P",
                    "contactmethodsubtype": "",
                    "address": {
                        "id": 1,
                        "line1": "55 Banana Street",
                        "line2": "",
                        "line3": "",
                        "town": "Fictional Town",
                        "county": "Norfolk",
                        "postcode": "NR22 2JG",
                        "country": {
                            "alpha2": "GB",
                            "alpha3": "GBR",
                            "name": "United Kingdom"
                        },
                        "longitude": "0.000000",
                        "latitude": "0.000000",
                        "geohash": ""
                    },
                    "invalid": false,
                    "invaliddatetime": "",
                    "invalidreason": "",
                    "contactpreferences": [
                        {
                            "id": 2,
                            "branding": "/v2/branding/1",
                            "rolereason": {
                                "id": 1,
                                "role": {
                                    "id": 1,
                                    "name": "Customer",
                                    "donotdelete": true
                                },
                                "reason": {
                                    "id": 1,
                                    "name": "Booking Confirmation",
                                    "donotdelete": true
                                },
                                "donotdelete": true,
                                "required": true
                            },
                            "priority": 1,
                            "donotuse": false
                        }
                    ],
                    "dedupekey": "po-nr222jg"
                }
            ],
            "bankaccounts": [
                {
                    "id": 1,
                    "accountnumber": "12345678",
                    "accountname": "Mr Smith",
                    "bankname": "Barclays",
                    "address": {
                        "id": 5,
                        "line1": "10 High St",
                        "line2": "",
                        "line3": "",
                        "town": "Dereham",
                        "county": "Norfolk",
                        "postcode": "NR20 5SD",
                        "country": {
                            "alpha2": "GB",
                            "alpha3": "GBR",
                            "name": "United Kingdom"
                        },
                        "longitude": 0,
                        "latitude": 0,
                        "geohash": ""
                    },
                    "sortcode": "221349",
                    "paymentreference": "PR20193",
                    "rollnumber": "2"
                },
                {
                    "id": 2,
                    "accountnumber": "99995678",
                    "accountname": "Mr Smith",
                    "bankname": "Barclays",
                    "address": {
                        "id": 6,
                        "line1": "10 High St",
                        "line2": "",
                        "line3": "",
                        "town": "Dereham",
                        "county": "Norfolk",
                        "postcode": "NR20 5SD",
                        "country": {
                            "alpha2": "GB",
                            "alpha3": "GBR",
                            "name": "United Kingdom"
                        },
                        "longitude": 0,
                        "latitude": 0,
                        "geohash": ""
                    },
                    "sortcode": "221349",
                    "paymentreference": "PR20193",
                    "rollnumber": "2"
                },
                {
                    "id": 3,
                    "accountnumber": "99995678",
                    "accountname": "Mr Smith",
                    "bankname": "Barclays",
                    "address": {
                        "id": 9,
                        "line1": "10 High St",
                        "line2": "",
                        "line3": "",
                        "town": "Dereham",
                        "county": "Norfolk",
                        "postcode": "NR20 5SD",
                        "country": {
                            "alpha2": "GB",
                            "alpha3": "GBR",
                            "name": "United Kingdom"
                        },
                        "longitude": 0,
                        "latitude": 0,
                        "geohash": ""
                    },
                    "sortcode": "221349",
                    "paymentreference": "PR20193",
                    "rollnumber": "2"
                }
            ],
            "bacsbankaccount": {
                "id": 1,
                "accountnumber": "12345678",
                "accountname": "Mr Smith",
                "bankname": "Barclays",
                "address": {
                    "id": 5,
                    "line1": "10 High St",
                    "line2": "",
                    "line3": "",
                    "town": "Dereham",
                    "county": "Norfolk",
                    "postcode": "NR20 5SD",
                    "country": {
                        "alpha2": "GB",
                        "alpha3": "GBR",
                        "name": "United Kingdom"
                    },
                    "longitude": 0,
                    "latitude": 0,
                    "geohash": ""
                },
                "sortcode": "221349",
                "paymentreference": "PR20193",
                "rollnumber": "2"
            },
            "documents": [
                {
                    "id": 1,
                    "created": "2017-05-15 15:29:38",
                    "document": {
                        "id": 1,
                        "name": "Tabs 2 roadmap.pdf",
                        "filename": "Tabs 2 roadmap.pdf",
                        "timeadded": "2014-01-01 12:00:00",
                        "weight": 0,
                        "private": false,
                        "description": "A document",
                        "mimetype": {
                            "id": 1,
                            "name": "application/pdf",
                            "shortname": "pdf"
                        },
                        "file": "/v2/file/1"
                    }
                }
            ],
            "mergedinto": "",
            "potentialduplicates": [
                "/v2/potentialduplicate/1"
            ],
            "mergedactors": [],
            "accountingreference": "",
            "tabscode": "CUS1234",
            "defaultbrandinggroup": [],
            "defaultbookingbrand": [],
            "defaultbranding": [],
            "outstandingpayments": [],
            "firstbookingbookeddate": "2016-03-22 14:12:04",
            "confirmedbookings": "1",
            "confirmedbookingsvalue": "1964.00",
            "accountbalance": 0
        }

### Update the details of a Customer [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output.
eg. ```title```, ```firstname```, ```surname```, ```languagecode``` etc.
Any ommited fields will be left as is.

+ Request (application/x-www-form-urlencoded)

        surname=Bloggs
        bacsbankaccountid=43

+ Response 204

### Delete a Customer [DELETE]
Deletion of customers is not allowed - set the Inactive flag using a PUT instead

+ Response 501

## Customer Authentication [/v2/customer/{id}/authenticate]
### Authenticate a customer from a provided password [POST]

* ```password``` Password

+ Parameters

    + id (required, integer, `3`) ... The id of the customer

+ Response 204

## Importing Customers [/v2/customer/import]
### Import list of customers [POST]
The following fields should be provided in the POST array

* ```importType``` The data type of the file to be imported (csv only at the moment)
* ```data``` string representation of the file to be imported.  New lines should be replaced by pipe characters (|)

+ Response 201

        {
            "importedrows": 3
        }

## Customer Note List [/v2/customer/{id}/note{?page,limit}]
### Retrieve a list of Customer Notes. [GET]
customer/7/note?page=1&limit=25

+ Parameters

    + id (required, integer, `7`) ... The id of the Customer
    + page (optional, integer, `1`) ... The page of results to return
    + limit (optional, integer, `25`) ... The number of results to return

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 1,
            "page": 1,
            "count": 1,
            "limit": 25,
            "time": 0,
            "orderBy": null,
            "filter": "",
            "previous": null,
            "next": null,
            "elements": [
                {
                    "id": 1,
                    "note": {
                        "id": 1,
                        "notetype": {
                            "id": 1,
                            "notetype": "Warning",
                            "description": "A warning which should be highlighted to the user",
                            "donotdelete": true
                        },
                        "subject": "Lorem ipsum",
                        "created": "2014-08-09 12:34:56",
                        "createdby": {
                            "actorid": 1,
                            "actortype": "TabsUser",
                            "actor": "/v2/tabsuser/1",
                            "name": "system system"
                        },
                        "createdfromscreen": "Booking",
                        "visibletocustomer": false,
                        "visibletoowner": false,
                        "visibletocleaner": false,
                        "visibletokeyholder": false,
                        "highlight": false,
                        "pin": true,
                        "private": true,
                        "completed": "",
                        "completedby": [],
                        "archived": "",
                        "archivedby": [],
                        "notetexts": [
                            {
                                "id": 1,
                                "createdby": {
                                    "actorid": 1,
                                    "actortype": "TabsUser",
                                    "actor": "/v2/tabsuser/1",
                                    "name": "system system"
                                },
                                "created": "2014-08-09 12:34:56",
                                "notetext": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut non orci id quam pharetra mattis sit amet id nisl.",
                                "actioned": "2020-02-01 12:21:45",
                                "actionedby": {
                                    "actorid": 1,
                                    "actortype": "TabsUser",
                                    "actor": "/v2/tabsuser/1",
                                    "name": "system system"
                                },
                                "followup": "2020-01-01 12:01:45"
                            },
                            {
                                "id": 2,
                                "createdby": {
                                    "actorid": 1,
                                    "actortype": "TabsUser",
                                    "actor": "/v2/tabsuser/1",
                                    "name": "system system"
                                },
                                "created": "2014-08-09 12:37:56",
                                "notetext": "Donec nec eros vitae dui tincidunt convallis. Ut neque diam, consequat a nisi quis, aliquet imperdiet lacus.",
                                "actioned": "",
                                "actionedby": []
                            }
                        ],
                        "noteactors": [
                            {
                                "actorid": 1,
                                "actortype": "TabsUser",
                                "actor": "/v2/tabsuser/1",
                                "name": "system system",
                                "id": 2,
                                "notifychanges": false,
                                "reminderdate": "2017-08-23"
                            },
                            {
                                "actorid": 7,
                                "actortype": "Customer",
                                "actor": "/v2/customer/7",
                                "name": "Thomas Thornley",
                                "id": 1,
                                "notifychanges": true,
                                "reminderdate": "2016-10-15"
                            }
                        ],
                        "bookings": [
                            {
                                "bookingnoteid": 1,
                                "bookingid": 1,
                                "booking": "/v2/booking/1",
                                "fromdate": "2026-10-01",
                                "todate": "2026-10-08"
                            }
                        ],
                        "properties": [
                            {
                                "propertynoteid": 2,
                                "propertyid": 1,
                                "property": "/v2/property/1",
                                "name": "Angler Cottage",
                                "tabspropref": "1105",
                                "fromdate": "2015-07-25",
                                "todate": "2015-08-02",
                                "requiresconfirmation": false,
                                "showonweb": false,
                                "showonavailability": true
                            },
                            {
                                "propertynoteid": 1,
                                "propertyid": 2,
                                "property": "/v2/property/2",
                                "name": "Reedmere",
                                "tabspropref": "1212",
                                "fromdate": "2015-06-30",
                                "todate": "2015-07-15",
                                "requiresconfirmation": true,
                                "showonweb": true,
                                "showonavailability": false
                            }
                        ],
                        "actors": [
                            {
                                "actorid": 7,
                                "actortype": "Customer",
                                "actor": "/v2/customer/7",
                                "name": "Thomas Thornley",
                                "actornoteid": 1
                            }
                        ],
                        "workorders": [
                            {
                                "workordernoteid": 2,
                                "workorderid": 3,
                                "workorder": "/v2/workorder/3"
                            }
                        ]
                    },
                    "actor": "/v2/customer/7"
                }
            ]
        }




## Customer Booking Index [/v2/customer/{id}/booking]

+ Parameters

    + id (required, integer, `10`) ... The id of the customer

### Get all bookings for a Customer [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "bookref": "555555",
              "guesttype": "Customer",
              "property": {
                "id": 1,
                "name": "Angler Cottage",
                "details": "/v2/property/1"
              },
              "branding": "/v2/branding/3",
              "fromdate": "2026-10-01",
              "todate": "2026-10-08",
              "bookeddatetime": "2026-07-06 14:12:04",
              "status": "Confirmed",
              "cancelled": false,
              "securitydeposit": {
                "id": 1,
                "amount": 150,
                "paid": 100,
                "refunded": 0,
                "balance": 100,
                "outstanding": 50,
                "dueindate": "2026-09-17",
                "paiddate": "",
                "withheld": 20,
                "refundable": 80,
                "held": false,
                "dueoutdate": "2026-10-15",
                "refundeddate": "",
                "ownerchargecode": {
                  "id": 1,
                  "ownerchargecode": "ADM",
                  "description": "Administration Charge",
                  "vatband": {
                    "id": 2,
                    "vatband": "Standard"
                  },
                  "recharge": false
                },
                "ownerchargeamount": 21.43,
                "ownercharge": "",
                "holds": [
                  {
                    "id": 1,
                    "helddate": "2016-06-21",
                    "helduntildate": "2016-06-21",
                    "reason": "Damage to carpet",
                    "tabsuser": "/v2/tabsuser/24"
                  }
                ]
              },
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "potentialbooking": {
                "id": 1,
                "created": "2026-07-06 14:12:04",
                "type": "Enquiry",
                "expiry": "2026-07-06 14:12:04",
                "expired": false
              },
              "customers": [
                {
                  "id": 1,
                  "details": "/v2/customer/10",
                  "name": "Dobson"
                }
              ],
              "provisionalbooking": {
                "id": 1,
                "tabsuser": "/v2/tabsuser/24",
                "depositamount": "/v2/depositamount/1",
                "deposit": 0,
                "depositoverridden": false,
                "depositduedate": "2026-08-06",
                "balanceduedate": "2026-09-17",
                "commissionpercentage": "15%",
                "commissionpercentagesetby": "tabs",
                "ownerpaymentterms": "/v2/ownerpaymentterms/3"
              },
              "paymentsummary": {
                "details": "/v2/booking/1/payment",
                "booking": {
                  "paid": 300,
                  "refunded": 0,
                  "balance": 300,
                  "outstanding": 10.75
                },
                "securitydeposit": {
                  "paid": 100,
                  "refunded": 0,
                  "balance": 100,
                  "outstanding": 50
                },
                "total": {
                  "paid": 400,
                  "refunded": 0,
                  "balance": 400,
                  "outstanding": 60.75
                },
                "deposit": {
                  "amount": 0,
                  "due": "2026-08-06",
                  "paid": "2014-01-04",
                  "outstanding": 0
                },
                "balance": {
                  "amount": 310.75,
                  "due": "2026-09-17",
                  "paid": "",
                  "outstanding": 10.75
                },
                "balancedue": 60.75
              },
              "cancelledbooking": {},
              "ownerpaymentsummary": {
                "ownerincome": 0,
                "ownerincometotal": 209.71,
                "agencyincome": 0,
                "agencyincometotal": 84.2,
                "agencyvat": 0,
                "agencyvattotal": 16.84
              },
              "updated": "2017-05-03 09:46:48"
            },
            {
              "id": 2,
              "bookref": "747474",
              "guesttype": "Customer",
              "property": {
                "id": 1,
                "name": "Angler Cottage",
                "details": "/v2/property/1"
              },
              "branding": "/v2/branding/3",
              "fromdate": "2016-07-16",
              "todate": "2016-07-27",
              "bookeddatetime": "2016-04-21 14:12:04",
              "status": "Provisional",
              "cancelled": false,
              "securitydeposit": {
                "id": 2,
                "amount": 200,
                "paid": 0,
                "refunded": 0,
                "balance": 0,
                "outstanding": 200,
                "dueindate": "2016-07-02",
                "paiddate": "",
                "withheld": 10,
                "refundable": 0,
                "held": false,
                "dueoutdate": "2016-08-03",
                "refundeddate": "",
                "ownerchargecode": {
                  "id": 1,
                  "ownerchargecode": "ADM",
                  "description": "Administration Charge",
                  "vatband": {
                    "id": 2,
                    "vatband": "Standard"
                  },
                  "recharge": false
                },
                "ownerchargeamount": 28.57,
                "ownercharge": "",
                "holds": [
                  {
                    "id": 2,
                    "helddate": "2016-06-21",
                    "helduntildate": "2016-06-21",
                    "reason": "Damage to carpet",
                    "tabsuser": "/v2/tabsuser/24"
                  }
                ]
              },
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "potentialbooking": {
                "id": 2,
                "created": "2016-04-21 14:12:04",
                "type": "Enquiry",
                "expiry": "2016-04-21 14:12:04",
                "expired": true
              },
              "customers": [
                {
                  "id": 2,
                  "details": "/v2/customer/10",
                  "name": "Dobson"
                }
              ],
              "provisionalbooking": {
                "id": 2,
                "tabsuser": "/v2/tabsuser/24",
                "depositamount": "/v2/depositamount/1",
                "deposit": 200,
                "depositoverridden": false,
                "depositduedate": "2016-05-21",
                "balanceduedate": "2016-07-02",
                "commissionpercentage": "19%",
                "commissionpercentagesetby": "tabs",
                "ownerpaymentterms": "/v2/ownerpaymentterms/1"
              },
              "paymentsummary": {
                "details": "/v2/booking/2/payment",
                "booking": {
                  "paid": 0,
                  "refunded": 0,
                  "balance": 0,
                  "outstanding": 1146.5
                },
                "securitydeposit": {
                  "paid": 0,
                  "refunded": 0,
                  "balance": 0,
                  "outstanding": 200
                },
                "total": {
                  "paid": 0,
                  "refunded": 0,
                  "balance": 0,
                  "outstanding": 1346.5
                },
                "deposit": {
                  "amount": 200,
                  "due": "2016-05-21",
                  "paid": "",
                  "outstanding": 200
                },
                "balance": {
                  "amount": 946.5,
                  "due": "2016-07-02",
                  "paid": "",
                  "outstanding": 946.5
                },
                "balancedue": 1346.5
              },
              "cancelledbooking": {},
              "ownerpaymentsummary": {
                "ownerincome": 275.46,
                "ownerincometotal": 849.06,
                "agencyincome": 86.35,
                "agencyincometotal": 247.87,
                "agencyvat": 12.5,
                "agencyvattotal": 49.57
              },
              "updated": "2017-05-03 09:46:48"
            }
          ]


### Add a Customer to a Booking [POST]
Implemented as /booking/{id}/customer

+ Response 501

## Customer Booking Details [/v2/customer/{id}/booking/{id2}]
+ Parameters

    + id (required, integer, `1`) ... The id of the customer
    + id2 (required, integer, `1`) ... The id of the customer booking

### Get a customer booking [GET]
Not implemented - use /booking/{id}

+ Response 501

### Updates a customer booking [PUT]
Implemented as /booking/{id}

+ Response 501

### Delete a customer booking [DELETE]
Implemented as /booking/{id}

+ Response 501




## CustomerEmailList Index [/v2/customer/{id}/marketingbrand/{id2}/emaillist]
Postman: customer/10/marketingbrand/4/emaillist

+ Parameters

    + id (required, integer, `10`) ... The id of the Customer
    + id2 (required, integer, `4`) ... The id of the CustomerMarketingBrand

### Get all CustomerEmailLists [GET]
+ Response 200 (application/json)

        [
            {
              "id": 3,
              "marketingbrandemaillist": {
                "id": 1,
                "listname": "Everyone under the sun",
                "fromdate": "2015-01-01",
                "todate": "2022-12-31"
              },
              "unsubscribed": false
            }
          ]

### Add a new CustomerEmailList [POST]

The following fields should be provided in the POST array

* ```marketingbrandemaillistid``` The id of the MarketingBrandEmailList
* ```unsubscribed``` Whether the customer has unsubscribed

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/customer/1/marketingbrand/1/emaillist/1

## CustomerEmailList Detail [/v2/customer/{id}/marketingbrand/{id2}/emaillist/{id3}]
+ Parameters

    + id (required, integer, `10`) ... The id of the Customer
    + id2 (required, integer, `4`) ... The id of the CustomerMarketingBrand
    + id3 (required, integer, `3`) ... The id of the CustomerEmailList

### Gets the details of a CustomerEmailList [GET]
+ Response 200 (application/json)

        {
            "id": 3,
            "marketingbrandemaillist": {
              "id": 1,
              "listname": "Everyone under the sun",
              "fromdate": "2015-01-01",
              "todate": "2022-12-31"
            },
            "unsubscribed": false
          }

### Update a CustomerEmailList [PUT]

+ Request (application/x-www-form-urlencoded)

        emaillistdate=2016-09-04

+ Response 204

### Deletes a CustomerEmailList [DELETE]

+ Response 204




## Customer Marketing Brand Index [/v2/customer/{id}/marketingbrand]

+ Parameters

    + id (required, integer, `10`) ... The id of the Customer

### Get all Marketing Brands for a Customer [GET]

+ Response 200 (application/json)

        [
            {
              "id": 4,
              "marketingbrand": {
                "id": 4,
                "code": "MAMM",
                "name": "Marsdens",
                "agency": "/v2/agency/5",
                "defaultbookingbrand": "/v2/bookingbrand/4",
                "website": "www.mabb.co.uk",
                "email": "info@mabb.co.uk"
              },
              "nocontact": true,
              "firstcustomersource": []
            },
            {
              "id": 5,
              "marketingbrand": {
                "id": 5,
                "code": "CCMM",
                "name": "Completely Cottages",
                "agency": "/v2/agency/6",
                "defaultbookingbrand": "/v2/bookingbrand/5",
                "website": "www.comm.co.uk",
                "email": "info@comm.co.uk"
              },
              "nocontact": false,
              "firstcustomersource": []
            }
          ]

### Add a new Customer Marketing Brand [POST]

The following fields should be provided in the POST array

* ```marketingbrandid``` The id of the MarketingBrand
* ```nocontact``` Whether the customer should be contacted
* ```firstcustomersourceid``` The id of the first CustomerSource

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/customer/1/marketingbrand/1

## Customer Marketing Brand Detail [/v2/customer/{id}/marketingbrand/{id2}]

+ Parameters

    + id (required, integer, `10`) ... The id of the Customer
    + id2 (required, integer, `4`) ... The id of the CustomerMarketingBrand to get

### Get the details of a Customer Marketing Brand [GET]

+ Response 200 (application/json)

        {
            "id": 4,
            "marketingbrand": {
              "id": 4,
              "code": "MAMM",
              "name": "Marsdens",
              "agency": "/v2/agency/5",
              "defaultbookingbrand": "/v2/bookingbrand/4",
              "website": "www.mabb.co.uk",
              "email": "info@mabb.co.uk"
            },
            "nocontact": true,
            "firstcustomersource": []
          }

### Update a Customer Marketing Brand [PUT]

+ Request (application/x-www-form-urlencoded)

        nocontact=false

+ Response 204

### Deletes a Customer Marketing Brand [DELETE]

+ Response 204




## CustomerSource Index [/v2/customer/{id}/marketingbrand/{id2}/source]

+ Parameters

    + id (required, integer, `10`) ... The id of the Customer
    + id2 (required, integer, `4`) ... The id of the CustomerMarketingBrand

### Get all CustomerSources [GET]
+ Response 200 (application/json)

        [
            {
              "id": 3,
              "source": {
                "id": 2,
                "sourcecode": "EDC",
                "description": "EDP Cottages",
                "showonweb": true,
                "sourcecategory": {
                  "id": 1,
                  "sourcecategory": "Internet"
                }
              },
              "sourcedate": "2016-09-03"
            }
          ]

### Add a new CustomerSource [POST]

The following fields should be provided in the POST array

* ```sourceid``` The id of the Source
* ```sourcedate``` The source date

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/customer/1/marketingbrand/1/source/1

## CustomerSource Detail [/v2/customer/{id}/marketingbrand/{id2}/source/{id3}]
+ Parameters

    + id (required, integer, `10`) ... The id of the Customer
    + id2 (required, integer, `4`) ... The id of the CustomerMarketingBrand
    + id3 (required, integer, `3`) ... The id of the CustomerSource

### Gets the details of a CustomerSource [GET]
+ Response 200 (application/json)

        {
            "id": 3,
            "source": {
              "id": 2,
              "sourcecode": "EDC",
              "description": "EDP Cottages",
              "showonweb": true,
              "sourcecategory": {
                "id": 1,
                "sourcecategory": "Internet"
              }
            },
            "sourcedate": "2016-09-03"
          }

### Update a CustomerSource [PUT]

+ Request (application/x-www-form-urlencoded)

        sourcedate=2016-09-04

+ Response 204

### Deletes a CustomerSource [DELETE]

+ Response 204




# Group Owner
An owner is a person or company who owns a property

## Owner Booking Index [/v2/owner/{id}/booking]

+ Parameters

    + id (required, integer, `16`) ... The id of the owner

### Get all bookings for a Owner [GET]

+ Response 200 (application/json)

        [
            {
                "id": 12,
                "bookref": "555555",
                "guesttype": "Owner",
                "property": {
                    "id": 1,
                    "name": "1 Woodgrange",
                    "details": "/v2/property/1"
                },
                "fromdate": "2016-11-01",
                "todate": "2016-11-08",
                "bookeddatetime": "2016-01-01 12:07:35",
                "cancelled": false,
                "estimatedarrivaltime": "Between 14:00-16:00",
                "webbooking": {},
                "adults": 2,
                "children": 2,
                "infants": 0,
                "guests": [],
                "extras": [],
                "cancelledbooking": {},
                "suppliers": [
                    {
                        "type": "PropertyDefault",
                        "route": "/v2/property/1/supplier/1",
                        "service": {
                            "id": 1,
                            "name": "Cleaning",
                            "description": "Cleaning a property",
                            "donotmodify": true
                        },
                        "actor": "/v2/supplier/12"
                    },
                    {
                        "type": "PropertyDefault",
                        "route": "/v2/property/1/supplier/2",
                        "service": {
                            "id": 2,
                            "name": "Keyholding",
                            "description": "Holding the keys for a property",
                            "donotmodify": true
                        },
                        "actor": "/v2/supplier/12"
                    }
                ]
            },
            {
                "id": 11,
                "bookref": "555555",
                "guesttype": "Owner",
                "property": {
                    "id": 1,
                    "name": "1 Woodgrange",
                    "details": "/v2/property/1"
                },
                "fromdate": "2016-10-12",
                "todate": "2016-10-21",
                "bookeddatetime": "2016-01-01 12:07:35",
                "cancelled": false,
                "estimatedarrivaltime": "Between 14:00-16:00",
                "webbooking": {},
                "adults": 0,
                "children": 0,
                "infants": 0,
                "guests": [],
                "extras": [],
                "cancelledbooking": {},
                "suppliers": [
                    {
                        "type": "PropertyDefault",
                        "route": "/v2/property/1/supplier/1",
                        "service": {
                            "id": 1,
                            "name": "Cleaning",
                            "description": "Cleaning a property",
                            "donotmodify": true
                        },
                        "actor": "/v2/supplier/12"
                    },
                    {
                        "type": "PropertyDefault",
                        "route": "/v2/property/1/supplier/2",
                        "service": {
                            "id": 2,
                            "name": "Keyholding",
                            "description": "Holding the keys for a property",
                            "donotmodify": true
                        },
                        "actor": "/v2/supplier/12"
                    }
                ]
            }
        ]

### Add a new booking to an Owner [POST]
Implemented as /booking

+ Response 501

## Owner Booking Details [/v2/owner/{id}/booking/{id2}]
Implemented as /booking/{id}
+ Parameters

    + id (required, integer, `1`) ... The id of the owner
    + id2 (required, integer, `1`) ... The id of the owner booking

### Get an Owner booking [GET]

+ Response 501

### Updates an Owner booking [PUT]

+ Response 501

### Deletes an Owner booking [DELETE]

+ Response 501



## Reason Index [/v2/reason]
### Get all Reasons [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Booking Confirmation",
                "donotdelete": true
            }
        ]

### Add a new Reason [POST]

The following fields should be provided in the POST array

* ```name``` The name of the Reason
* ```donotdelete``` Whether the Reason can be deleted

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/reason/2

## Reason Detail [/v2/reason/{id}]
### Gets the details of a Reason [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the Reason to get

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "Booking Confirmation",
            "donotdelete": true
        }

### Update a Reason [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the Reason

+ Request (application/x-www-form-urlencoded)

        donotdelete=false

+ Response 204

### Deletes a Reason [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the Reason

+ Response 204




## Role Index [/v2/role]
### Get all Roles [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Customer",
                "donotdelete": true
            }
        ]

### Add a new Role [POST]

The following fields should be provided in the POST array

* ```name``` The name of the Role
* ```donotdelete``` Whether the Role can be deleted

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/role/2

## Role Detail [/v2/role/{id}]
### Gets the details of a Role [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the Role to get

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "Customer",
            "donotdelete": true
        }

### Update a Role [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the Role

+ Request (application/x-www-form-urlencoded)

        donotdelete=false

+ Response 204

### Deletes a Role [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the Role

+ Response 204




## RoleReason Index [/v2/rolereason]
### Get all RoleReasons [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "role": "Customer",
                "reason": "Booking Confirmation"
            },
            {
                "id": 2,
                "role": "Owner",
                "reason": "Booking Confirmation"
            },
            {
                "id": 4,
                "role": "Owner",
                "reason": "Statements"
            },
            {
                "id": 3,
                "role": "Cleaner",
                "reason": "Booking Confirmation"
            },
            {
                "id": 5,
                "role": "Photographer",
                "reason": "Property photography"
            }
        ]

### Add a new RoleReason [POST]

The following fields should be provided in the POST array

* ```roleid``` The id of the Role
* ```reasonid``` The id of the Reason.
* ```donotdelete``` Whether the RoleReason can be deleted
* ```required``` Whether the RoleReason requires a contact preference 

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/rolereason/2

## RoleReason Detail [/v2/rolereason/{id}]
### Gets the details of a RoleReason [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the RoleReason to get

+ Response 200 (application/json)

        {
            "id": 1,
            "role": "Customer",
            "reason": "Booking Confirmation"
        }

### Update a RoleReason [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the RoleReason

+ Request (application/x-www-form-urlencoded)

        xxx=3

+ Response 204

### Deletes a RoleReason [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the RoleReason

+ Response 204




# Group Attribute

An Attribute is a category of information about a Property, which has not been built into the model
as all agencies will have a different list of attributes of properties they need to track

## Attributes [/v2/attribute]
### Retreive a list of Attributes [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "code": "ATTR001",
              "group": {
                "id": 3,
                "name": "Misc"
              },
              "name": "Pets",
              "description": "Whether pets are allowed",
              "type": "Boolean",
              "usedinavailabilitysearch": true,
              "donotmodify": false,
              "important": true,
              "extras": []
            },
            {
              "id": 2,
              "code": "ATTR061",
              "group": {
                "id": 3,
                "name": "Misc"
              },
              "name": "Near Beach",
              "description": "The property is near a beach",
              "type": "Boolean",
              "usedinavailabilitysearch": true,
              "donotmodify": false,
              "important": false,
              "extras": []
            },
            {
              "id": 3,
              "code": "ATTR998",
              "group": {
                "id": 6,
                "name": "Entertainment/Internet"
              },
              "name": "WiFi",
              "description": "WiFi available",
              "type": "Boolean",
              "usedinavailabilitysearch": true,
              "donotmodify": false,
              "important": true,
              "extras": []
            },
            {
              "id": 4,
              "code": "ATTR002",
              "group": {
                "id": 3,
                "name": "Misc"
              },
              "name": "Close to Pub",
              "description": "Blah blah",
              "type": "Hybrid",
              "usedinavailabilitysearch": true,
              "donotmodify": false,
              "important": false,
              "unit": {
                "id": 1,
                "name": "km",
                "description": "Kilometre",
                "decimalplaces": 1
              },
              "operator": "<=",
              "minimumvalue": 0,
              "maximumvalue": 10,
              "limitvalue": 2
            },
            {
              "id": 5,
              "code": "ATTR072",
              "group": {
                "id": 3,
                "name": "Misc"
              },
              "name": "Shops",
              "description": "Disatnce from shops",
              "type": "Hybrid",
              "usedinavailabilitysearch": true,
              "donotmodify": false,
              "important": true,
              "unit": {
                "id": 1,
                "name": "km",
                "description": "Kilometre",
                "decimalplaces": 1
              },
              "operator": "<=",
              "minimumvalue": 1,
              "maximumvalue": 99,
              "limitvalue": 4
            },
            {
              "id": 6,
              "code": "ATTR003",
              "group": {
                "id": 3,
                "name": "Misc"
              },
              "name": "Green Tourism Award",
              "description": "Silver",
              "type": "String",
              "usedinavailabilitysearch": false,
              "donotmodify": false,
              "important": false,
              "options": [
                {
                  "id": 1,
                  "option": "Gold",
                  "optionorder": 1
                },
                {
                  "id": 2,
                  "option": "Silver",
                  "optionorder": 2
                },
                {
                  "id": 3,
                  "option": "Bronze",
                  "optionorder": 3
                }
              ]
            },
            {
              "id": 7,
              "code": "ATTR093",
              "group": {
                "id": 3,
                "name": "Misc"
              },
              "name": "Property type",
              "description": "The type of property, e.g. Cottage, Flat, Yurt",
              "type": "String",
              "usedinavailabilitysearch": true,
              "donotmodify": false,
              "important": true,
              "options": []
            },
            {
              "id": 8,
              "code": "ATTR43",
              "group": {
                "id": 3,
                "name": "Misc"
              },
              "name": "Property period",
              "description": "Period the property was built",
              "type": "String",
              "usedinavailabilitysearch": false,
              "donotmodify": false,
              "important": false,
              "options": [
                {
                  "id": 4,
                  "option": "None",
                  "optionorder": 1
                },
                {
                  "id": 5,
                  "option": "Regency",
                  "optionorder": 2
                },
                {
                  "id": 6,
                  "option": "18C",
                  "optionorder": 3
                }
              ]
            },
            {
              "id": 9,
              "code": "ATTR004",
              "group": {
                "id": 4,
                "name": "Location"
              },
              "name": "Distance to Pub",
              "description": "Blah blah",
              "type": "Number",
              "usedinavailabilitysearch": true,
              "donotmodify": false,
              "important": false,
              "unit": {
                "id": 2,
                "name": "m",
                "description": "Metre",
                "decimalplaces": 1
              },
              "operator": "<=",
              "minimumvalue": 0,
              "maximumvalue": 2000
            },
            {
              "id": 10,
              "code": "ATTR005",
              "group": {
                "id": 3,
                "name": "Misc"
              },
              "name": "Test Max Value",
              "description": "Foo",
              "type": "Number",
              "usedinavailabilitysearch": true,
              "donotmodify": false,
              "important": false,
              "unit": {
                "id": 2,
                "name": "m",
                "description": "Metre",
                "decimalplaces": 1
              },
              "operator": "<=",
              "minimumvalue": 0,
              "maximumvalue": 99999999.999999
            },
            {
              "id": 11,
              "code": "ATTR085",
              "group": {
                "id": 3,
                "name": "Misc"
              },
              "name": "Distance to Clubland",
              "description": "How far to PoW Rd",
              "type": "Number",
              "usedinavailabilitysearch": false,
              "donotmodify": false,
              "important": true,
              "unit": {
                "id": 2,
                "name": "m",
                "description": "Metre",
                "decimalplaces": 1
              },
              "operator": "<=",
              "minimumvalue": 0,
              "maximumvalue": 99999999.999999
            }
          ]

### Create a new Attribute [POST]
The following fields should be provided in the POST array

* ```group``` Name of the AttributeGroup the Attribute is in
* ```name``` Name of the attribute (cannot be changed if donotmodify = true)
* ```code``` Attribute Code (optional, mainly for back compatibility) (cannot be changed if donotmodify = true)
* ```description``` Description of the attribute (cannot be changed if donotmodify = true)
* ```type``` Type of Attribute, either Hybrid, Boolean, Number or String
* ```usedinavailabilitysearch``` Whether the attribute is to be used in the Availability Search or not
* ```donotmodify``` Whether the attribute is one of the base attributes, which cannot be deleted (cannot be updated)
* ```important``` Whether the attribute is considered important enough to show at the top of screens

Where `type` is Number or Hybrid:
* ```operator``` Operator used when comparing property values to availability screen values, e.g for Distance to Beach the operator would be "<" or "<=", i.e. Availability Screen value must be "<=" Property Value, so if the property is 2km from the beach, it woluld be included if the Availability screen value was 2 or less (mandatory if usedinavailabilitysearch=true)
* ```minimumvalue``` Min value which can be specified for a property
* ```maximumvalue``` Max value which can be specified for a property
* ```unit``` Name of the Unit the above are expressed in

Where `type` is Hybrid:
* ```limitvalue``` The value above (or below) which the Boolean value of the Attribute would be considered True, e.g. for Near Beach, this might be 1.5, so anything less than (or equal to, depending on the operator) 1.5 would be True, anything greater than would be False.

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/attribute/1

## Attribute Detail [/v2/attribute/{id}]

+ Parameters

    + id (required, integer, `4`) ... The id of the Attribute to get

### Gets the details of an attribute [GET]

+ Response 200 (application/json)

        {
            "id": 4,
            "code": "ATTR002",
            "group": {
              "id": 3,
              "name": "Misc"
            },
            "name": "Close to Pub",
            "description": "Blah blah",
            "type": "Hybrid",
            "usedinavailabilitysearch": true,
            "donotmodify": false,
            "important": false,
            "unit": {
              "id": 1,
              "name": "km",
              "description": "Kilometre",
              "decimalplaces": 1
            },
            "operator": "<=",
            "minimumvalue": 0,
            "maximumvalue": 10,
            "limitvalue": 2
          }

### Update the details of an Attribute [PUT]

+ Request (application/x-www-form-urlencoded)

        name=Other

+ Response 204

### Deletes an Attribute [DELETE]

+ Response 204



## Attribute Group Index [/v2/attributegroup]
### Retreive a list of Attribute Groups [GET]
Allows the facility to group attributes

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Default"
            },
            {
                "id": 2,
                "name": "Abstract"
            },
            {
                "id": 3,
                "name": "Misc"
            },
            {
                "id": 4,
                "name": "Location"
            },
            {
                "id": 5,
                "name": "Awards"
            },
            {
                "id": 6,
                "name": "Entertainment/Internet"
            },
            {
                "id": 7,
                "name": "Parking"
            },
            {
                "id": 8,
                "name": "Internal Features"
            },
            {
                "id": 9,
                "name": "External Features"
            }
        ]

### Create a new Attribute Group [POST]
The following fields should be provided in the POST array

* ```name``` Name of the attribute group

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/attributegroup/1

## Attribute Group detail [/v2/attributegroup/{id}]
### Gets the details of an Attribute Group [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the Attribute Group to get

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "Default"
        }

### Update the details of an Attribute Group [PUT]

+ Parameters

    + id (required, integer, `1`) ... The id of the Attribute Group

+ Request (application/x-www-form-urlencoded)

        name=Other

+ Response 204

### Deletes an Attribute Group [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the Attribute Group

+ Response 204



## Attribute Option Index [/v2/attribute/{id}/option]
String Attributes may have a set of options specified. The Property Attribute value must be one of these options.

+ Parameters

    + id (required, integer, `6`) ... The id of the Attribute

### Get all Options for an Attribute [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "option": "Gold",
              "optionorder": 1
            },
            {
              "id": 2,
              "option": "Silver",
              "optionorder": 2
            },
            {
              "id": 3,
              "option": "Bronze",
              "optionorder": 3
            }
          ]

### Add a new Option to an Attribute [POST]

The following fields should be provided in the POST array

* ```optionid``` The Id of the Option

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/attribute/1/option/2

## Attribute Option Detail [/v2/attribute/{id}/option/{id2}]
+ Parameters

    + id (required, integer, `6`) ... The id of the Attribute
    + id2 (required, integer, `2`) ... The id of the AttributeOption to get

### Gets the details of an Attribute Option [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "option": "Silver",
            "optionorder": 2
        }

### Update an Attribute's Option [PUT]
And all Property Attributes with this value!

+ Response 204

### Deletes an Attribute's Option [DELETE]

+ Response 204



# Group Booking

## Customer Payment Index [/v2/customer/{id}/payment]

+ Parameters

    + id (required, integer, `7`) ... The id of the customer

### Get all payments for a Customer [GET]

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 1,
            "page": 1,
            "count": 1,
            "limit": 10,
            "time": 0,
            "orderBy": null,
            "filter": "actorid=7",
            "previous": null,
            "next": null,
            "elements": [
              {
                "id": 2,
                "paymentdatetime": "2016-04-12 11:43:05",
                "reference": "xWs465dRFab102",
                "method": {
                  "id": 14,
                  "paymentmethod": "R",
                  "description": "C.Card + Comm"
                },
                "amount": 12000,
                "refunded": 0,
                "unrefunded": 12000,
                "currency": {
                  "id": 3,
                  "code": "PTA",
                  "name": "Peseta",
                  "decimalplaces": 0
                },
                "unitsperbaseunit": 180,
                "basecurrencyamount": 66.67,
                "refundedpayments": [],
                "refundingpayments": [],
                "madeby": ""
              }
            ]
          }


### Add a Customer Payment [POST]
The following fields should be provided in the POST array

* ```paymentdatetime``` The date and time of the Payment (optional, default  = now)
* ```reference``` The external system payment reference (optional)
* ```paymentmethodid``` The id of the PaymentMethod
* ```amount``` The total amount of the payment
* ```currencyid``` The id of the currency the payment was made in
* ```refundedactorpaymentid``` The id of the ActorPayment a refund is being made against (optional, only allowed if amount < 0)

The following three fields are optional, but if specified will create a transfer from the actor account to the booking account.
NOTE: if no bookingid is provided, then this is just a payment against the customer's account, and subsequent POSTs to /booking/{id}/payment will have
to be made to actually pay for bookings.

* ```bookingid``` The id of the booking the payment is to be allocated to
* ```bookingamount``` The amount to be paid on basic and extras of the booking (optional, if specified must be <> 0, in payment currency)
* ```securitydepositamount``` The amount to be paid on the security deposit of the booking (optional, if specified must be <> 0, in payment currency)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/paymentmethod/1

## Customer Payment Details [/v2/customer/{id}/payment/{id2}]
+ Parameters

    + id (required, integer, `7`) ... The id of the customer
    + id2 (required, integer, `2`) ... The id of the customer payment

### Get a customer payment [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "paymentdatetime": "2016-04-12 11:43:05",
            "reference": "xWs465dRFab102",
            "method": {
              "id": 14,
              "paymentmethod": "R",
              "description": "C.Card + Comm"
            },
            "amount": 12000,
            "refunded": 0,
            "unrefunded": 12000,
            "currency": {
              "id": 3,
              "code": "PTA",
              "name": "Peseta",
              "decimalplaces": 0
            },
            "unitsperbaseunit": 180,
            "basecurrencyamount": 66.67,
            "refundedpayments": [],
            "refundingpayments": [],
            "madeby": ""
          }

### Updates a customer payment [PUT]

+ Response 501

### Delete a customer payment [DELETE]

+ Response 501


## ActorPayment Index [/v2/actorpayment{?page,limit,filter}]

+ Parameters

    + page (optional, integer, `1`) ... The page of results to return
    + limit (optional, integer, `2`) ... The number of results to return
    + filter (optional, string, `currencycode=GBP`) ... The filters to use

### Get a filtered, paginated list of Actor Payments, from multiple actors & bookings [GET]
actorpayment?page=1&limit=2&filter=currencycode=GBP

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 1,
            "page": 1,
            "count": 1,
            "limit": 2,
            "time": 0,
            "orderBy": null,
            "filter": "currencycode=GBP",
            "previous": null,
            "next": null,
            "elements": [
              {
                "id": 1,
                "paymentdatetime": "2014-01-04 13:07:12",
                "reference": "sdA311Scca552",
                "method": {
                  "id": 2,
                  "paymentmethod": "C",
                  "description": "Cheque"
                },
                "amount": 1875,
                "refunded": 0,
                "unrefunded": 1875,
                "currency": {
                  "id": 1,
                  "code": "GBP",
                  "name": "Pound Sterling",
                  "decimalplaces": 2
                },
                "unitsperbaseunit": 1,
                "basecurrencyamount": 1875,
                "refundedpayments": [],
                "refundingpayments": []
              }
            ]
          }

## ActorPayment Options Index [/v2/actorpayment]
### List actorpayment filter options [OPTIONS]

+ Response 200

        {
            currencycode: "Payment Currency Code"
            paymentdatetime: "Payment Date and time"
        }




## AgencyBookingType Index [/v2/agencybookingtype]
### Get all AgencyBookingTypes [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Contract Signing",
                "description": "The contract has not been signed"
            },
            {
                "id": 2,
                "name": "Dispute",
                "description": " The agency are in dispute with the owner"
            },
            {
                "id": 3,
                "name": "Third Party Booking",
                "description": "The property is booked by another agency or other third party"
            },
            {
                "id": 4,
                "name": "Maintenance",
                "description": "The property cannot be let due to maintenance work being carried out"
            },
            {
                "id": 5,
                "name": "For Sale",
                "description": " The property is for sale"
            },
            {
                "id": 6,
                "name": "Withdrawn",
                "description": "The owner has withdrawn the property"
            }
        ]

### Add a new AgencyBookingType [POST]
The following fields should be provided in the POST array

* ```name``` The type of agency booking
* ```description``` Description of the agency booking type

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/agencybookingtype/2

## AgencyBookingType Detail [/v2/agencybookingtype/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the AgencyBookingType to get

### Gets the details of a AgencyBookingType [GET]

+ Response 200 (application/json)

        {
            "id": 3,
            "name": "Third Party Booking",
            "description": "The property is booked by another agency or other third party"
        }

### Update a AgencyBookingType [PUT]

+ Request (application/x-www-form-urlencoded)

        name=Maintenance

+ Response 204

### Deletes a AgencyBookingType [DELETE]

+ Response 204




## Booking List [/v2/booking{?page,limit}]
A Booking relates to the reservation of a Property, for a Period defined by two dates, by a Customer or an Owner.
Owner Bookings may be current or cancelled. Customer Bookings may be either potential, provisional, confirmed, transferred or cancelled.

### Retrieve a list of  Bookings. [GET]
Postman: /v2/booking?page=1&limit=2

+ Parameters

    + page (optional, integer, `1`) ... The page of results to return
    + limit (optional, integer, `2`) ... The number of results to return

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 14,
            "page": 1,
            "count": 2,
            "limit": 2,
            "time": 0,
            "orderBy": null,
            "filter": "",
            "previous": null,
            "next": "/plato/web/app_dev.php/v2/booking?page=2&limit=2",
            "elements": [
              {
                "id": 1,
                "bookref": "555555",
                "guesttype": "Customer",
                "property": {
                  "id": 1,
                  "name": "Angler Cottage",
                  "details": "/v2/property/1"
                },
                "branding": "/v2/branding/3",
                "fromdate": "2026-10-01",
                "todate": "2026-10-08",
                "bookeddatetime": "2026-07-06 14:12:04",
                "status": "Confirmed",
                "cancelled": false,
                "securitydeposit": {
                  "id": 1,
                  "amount": 150,
                  "paid": 100,
                  "refunded": 0,
                  "balance": 100,
                  "outstanding": 50,
                  "dueindate": "2026-09-17",
                  "paiddate": "",
                  "withheld": 20,
                  "refundable": 80,
                  "held": false,
                  "dueoutdate": "2026-10-15",
                  "refundeddate": "",
                  "ownerchargecode": {
                    "id": 1,
                    "ownerchargecode": "ADM",
                    "description": "Administration Charge",
                    "vatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "recharge": false
                  },
                  "ownerchargeamount": 21.43,
                  "ownercharge": "",
                  "holds": [
                    {
                      "id": 1,
                      "helddate": "2016-06-21",
                      "helduntildate": "2016-06-21",
                      "reason": "Damage to carpet",
                      "tabsuser": "/v2/tabsuser/24"
                    }
                  ]
                },
                "currency": {
                  "id": 1,
                  "code": "GBP",
                  "name": "Pound Sterling",
                  "decimalplaces": 2
                },
                "potentialbooking": {
                  "id": 1,
                  "created": "2026-07-06 14:12:04",
                  "type": "Enquiry",
                  "expiry": "2026-07-06 14:12:04",
                  "expired": false
                },
                "customers": [
                  {
                    "id": 1,
                    "details": "/v2/customer/10",
                    "name": "Dobson"
                  }
                ],
                "provisionalbooking": {
                  "id": 1,
                  "tabsuser": "/v2/tabsuser/24",
                  "depositamount": "/v2/depositamount/1",
                  "deposit": 0,
                  "depositoverridden": false,
                  "depositduedate": "2026-08-06",
                  "balanceduedate": "2026-09-17",
                  "commissionpercentage": "15%",
                  "commissionpercentagesetby": "tabs",
                  "ownerpaymentterms": "/v2/ownerpaymentterms/3"
                },
                "paymentsummary": {
                  "details": "/v2/booking/1/payment",
                  "booking": {
                    "paid": 300,
                    "refunded": 0,
                    "balance": 300,
                    "outstanding": 10.75
                  },
                  "securitydeposit": {
                    "paid": 100,
                    "refunded": 0,
                    "balance": 100,
                    "outstanding": 50
                  },
                  "total": {
                    "paid": 400,
                    "refunded": 0,
                    "balance": 400,
                    "outstanding": 60.75
                  },
                  "deposit": {
                    "amount": 0,
                    "due": "2026-08-06",
                    "paid": "2014-01-04",
                    "outstanding": 0
                  },
                  "balance": {
                    "amount": 310.75,
                    "due": "2026-09-17",
                    "paid": "",
                    "outstanding": 10.75
                  },
                  "balancedue": 60.75
                },
                "cancelledbooking": {},
                "ownerpaymentsummary": {
                  "ownerincome": 0,
                  "ownerincometotal": 209.71,
                  "agencyincome": 0,
                  "agencyincometotal": 84.2,
                  "agencyvat": 0,
                  "agencyvattotal": 16.84
                },
                "updated": "2017-05-03 09:46:48"
              },
              {
                "id": 2,
                "bookref": "747474",
                "guesttype": "Customer",
                "property": {
                  "id": 1,
                  "name": "Angler Cottage",
                  "details": "/v2/property/1"
                },
                "branding": "/v2/branding/3",
                "fromdate": "2016-07-16",
                "todate": "2016-07-27",
                "bookeddatetime": "2016-04-21 14:12:04",
                "status": "Provisional",
                "cancelled": false,
                "securitydeposit": {
                  "id": 2,
                  "amount": 200,
                  "paid": 0,
                  "refunded": 0,
                  "balance": 0,
                  "outstanding": 200,
                  "dueindate": "2016-07-02",
                  "paiddate": "",
                  "withheld": 10,
                  "refundable": 0,
                  "held": false,
                  "dueoutdate": "2016-08-03",
                  "refundeddate": "",
                  "ownerchargecode": {
                    "id": 1,
                    "ownerchargecode": "ADM",
                    "description": "Administration Charge",
                    "vatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "recharge": false
                  },
                  "ownerchargeamount": 28.57,
                  "ownercharge": "",
                  "holds": [
                    {
                      "id": 2,
                      "helddate": "2016-06-21",
                      "helduntildate": "2016-06-21",
                      "reason": "Damage to carpet",
                      "tabsuser": "/v2/tabsuser/24"
                    }
                  ]
                },
                "currency": {
                  "id": 1,
                  "code": "GBP",
                  "name": "Pound Sterling",
                  "decimalplaces": 2
                },
                "potentialbooking": {
                  "id": 2,
                  "created": "2016-04-21 14:12:04",
                  "type": "Enquiry",
                  "expiry": "2016-04-21 14:12:04",
                  "expired": true
                },
                "customers": [
                  {
                    "id": 2,
                    "details": "/v2/customer/10",
                    "name": "Dobson"
                  }
                ],
                "provisionalbooking": {
                  "id": 2,
                  "tabsuser": "/v2/tabsuser/24",
                  "depositamount": "/v2/depositamount/1",
                  "deposit": 200,
                  "depositoverridden": false,
                  "depositduedate": "2016-05-21",
                  "balanceduedate": "2016-07-02",
                  "commissionpercentage": "19%",
                  "commissionpercentagesetby": "tabs",
                  "ownerpaymentterms": "/v2/ownerpaymentterms/1"
                },
                "paymentsummary": {
                  "details": "/v2/booking/2/payment",
                  "booking": {
                    "paid": 0,
                    "refunded": 0,
                    "balance": 0,
                    "outstanding": 1146.5
                  },
                  "securitydeposit": {
                    "paid": 0,
                    "refunded": 0,
                    "balance": 0,
                    "outstanding": 200
                  },
                  "total": {
                    "paid": 0,
                    "refunded": 0,
                    "balance": 0,
                    "outstanding": 1346.5
                  },
                  "deposit": {
                    "amount": 200,
                    "due": "2016-05-21",
                    "paid": "",
                    "outstanding": 200
                  },
                  "balance": {
                    "amount": 946.5,
                    "due": "2016-07-02",
                    "paid": "",
                    "outstanding": 946.5
                  },
                  "balancedue": 1346.5
                },
                "cancelledbooking": {},
                "ownerpaymentsummary": {
                  "ownerincome": 275.46,
                  "ownerincometotal": 849.06,
                  "agencyincome": 86.35,
                  "agencyincometotal": 247.87,
                  "agencyvat": 12.5,
                  "agencyvattotal": 49.57
                },
                "updated": "2017-05-03 09:46:48"
              }
            ]
          }

## Booking Index [/v2/booking]
### Add a new  Booking [POST]

The following fields should be provided in the POST array

All Bookings:
* ```guesttype``` Owner, Customer or None (agency booking)
* ```fromdate``` The date the holiday starts
* ```todate``` The date the holiday ends (the day the guest leaves)
* ```bookeddatetime``` The date and time the booking was made
* ```actorid``` The actor making the booking (optional)
* ```bookref``` The booking reference (usually used to hold affiliate reference) (optional)
A Note may be added to the booking, using the fields specified in Note.apib POST, prefixed with "note_", and
following any rules specified there (e.g. note_notetype, note_notetext_notetext etc.)

Agency Bookings:
* ```propertyid``` The id of the Property
* ```agencybookingtypeid``` The id of the Agency Booking Type

Owner Bookings:
* ```propertyid``` The id of the Property
* ```adults``` No. of adults in the party
* ```children``` No. of children in the party (optional = 0)
* ```infants``` No. of infants in the party (optional = 0)
Web Booking (optional - if provided, then all non-optional fields must be provided):
* ```webbooking_createddatetime``` The date and time the web booking was created
* ```webbooking_reviewingtabsuserid``` The tabs user reviewing the web booking (optional)

CustomerBookings: (note: all fields below are optional if transferredbooking_frombookingid is set)
* ```propertybrandingid``` The id of the Property Branding
* ```adults``` No. of adults in the party
* ```children``` No. of children in the party (optional = 0)
* ```infants``` No. of infants in the party (optional = 0)
* ```pets``` The number of pets in the party
* ```bypasspetchecks``` Allows 'pets' to be greater than the maximum number allowed by the property (as agreed with the owner) (optional, default=false))
* ```currencycode``` The currency the booking will use
* ```saleschannel``` The channel the booking was generated through
* ```pricingperiod``` The pricing regime to be applied, e.g. 'Week' (for Flexi/Long Lets, this would be 'Four Week' or 'Month')
* ```sourcemarketingbrandid``` The id of the Marketing Brand Source of the booking (use either this or sourceid) (optional)
* ```sourceid``` The id of the Source of the booking (use either this or sourcemarketingbrandid) (optional)
* ```estimatedarrivaltime``` Free text describing estimated arrival time (optional)
* ```ignorechangedayrules``` Whether Change Day Rules should be ignored (i.e. the booking allowed) (optional, default=false)
* ```checkinearliesttime``` Time guests should arrive after (optional)
* ```checkinlatesttime``` Time guests should arrive before (optional)
* ```checkintext``` Check in details (optional)
* ```checkouttime``` Time guests should leave by (optional)
* ```checkouttext``` Check out details (optional)
* ```overridestatus``` Allows certain statuses (e.g. Suspended) to be overridden (optional)
* ```donotpayowneruntildate``` Date before which the owner should not be paid (optional). Use a date in the past to 'unhold'
*One* only of the following groups *must* be provided:
If *any* of the fields in a group are provided, then *all* non-optional fields *must also be provided*
Potential Booking:
* ```potentialbooking_type``` The type of potential booking, e.g. Hold, Enquiry etc.
* ```potentialbooking_expirydatetime``` The date and time the potential booking expires (optional)
* ```potentialbooking_expired``` Expires the potential booking, freeing up the availability if it was being blocked (optional)
Provisional Booking:
* ```provisionalbooking_tabsuserid``` The tabs user making the booking Provisional
* ```provisionalbooking_depositamountid``` The id of the DepositAmount entity to be used to calculate the DepositAmount (optional - if omitted, and provisionalbooking_deposit is also omitted, the DepositAmount for either the Property or the Branding will be used)
* ```provisionalbooking_deposit``` The amount of the deposit (optional - if omitted, the will be calculated using the DepositAmount for either the Property or the Branding)
* ```provisionalbooking_depositduedate``` The date the deposit must be paid by (optional - if omitted, the date will be calculated using the Deposit Due Days setting)
* ```provisionalbooking_balanceduedate``` The date the balance must be paid by (optional - if omitted, the date will be calculated using the Balance Due Days setting)
* ```provisionalbooking_commissionpercentage``` The percent commission to be charged on the basic and any commissionable extras (optional, if omitted, the PropertyCommission record corresponding to the booking start date will be used)
* ```provisionalbooking_ownerpaymenttermsid``` The id of the OwnerPaymentTerms to be used to determine what the owner is paid and when (optional - if omitted, the PropertyOwnerPaymentTerms corresponding to the booking start date will be used)
Confirmed Booking:
* ```confirmedbooking_tabsuserid``` The tabs user confirming the booking
Either or both of the following may be provided:
Web Booking:
* ```webbooking_createddatetime``` The date and time the web booking was created
* ```webbooking_reviewingtabsuserid``` The tabs user reviewing the web booking (optional)
* ```webbooking_processed``` Whether the web booking has been processed (optional)
Security Deposit:
* ```securitydeposit_amount``` The amount of the deposit (optional - if omitted the Amount specified in the applicable PropertySecurityDeposit record will be used)
* ```securitydeposit_dueindate``` The date the customer should pay the amount by (optional - if omitted the date will be the From Date less the number of days specified in the applicable PropertySecurityDeposit DueDays field)
* ```securitydeposit_dueoutdate``` The date the amount should be refunded (optional - if omitted the date will be the To Date plus 7 days)
* ```securitydeposit_ownerchargecodeid``` Id of the Owner Charge Code to be used in the owner charge (optional, unless ownerchargeamount is specified)
* ```securitydeposit_ownerchargeamount``` The amount of the owner charge (optional)
To transfer a booking add the following:
* ```transferredbooking_tabsuserid``` The tabs user transferring the booking
* ```transferredbooking_frombookingid``` Booking id of the booking being transferred
This will create a copy of the 'transferred from' booking, and modify it using any other supplied values

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/booking/1

##  Booking Detail [/v2/booking/{id}]

+ Parameters

    + id (required, integer, `3`) ... The id of the  Booking to get

### Get a specific  Booking [GET]

+ Response 200 (application/json)

        {
            "id": 3,
            "bookref": "801548",
            "guesttype": "Customer",
            "property": {
              "id": 2,
              "name": "Reedmere",
              "details": "/v2/property/2"
            },
            "branding": "/v2/branding/4",
            "fromdate": "2016-07-28",
            "todate": "2016-08-02",
            "bookeddatetime": "2016-05-03 14:12:04",
            "status": "Provisional",
            "cancelled": false,
            "bypasschecks": false,
            "overridestatus": false,
            "ignorechangedayrules": false,
            "saleschannel": {
              "id": 2,
              "saleschannel": "Brand Website",
              "description": "Sales made via a brand website, e.g. Suffolk Secrets"
            },
            "pricingperiod": {
              "id": 2,
              "pricingperiod": "Week",
              "days": 0,
              "weeks": 1,
              "months": 0,
              "subperiod": "Day"
            },
            "price": {
              "total": {
                "standardprice": 954,
                "partysizesaving": 0,
                "specialoffersaving": 0,
                "promotioncodesaving": 0,
                "basicprice": 954,
                "includedextrasprice": 0,
                "ownerprice": 954,
                "changebrochurepriceextrasprice": 0,
                "brochureprice": 954,
                "additionalextrasprice": 0,
                "totalprice": 954
              },
              "financials": {
                "vatrate": "20%",
                "basic": {
                  "agencyincomeexvat": 119.25,
                  "vat": 23.85,
                  "ownerincome": 810.9
                },
                "extras": {
                  "agencyincomeexvat": 0,
                  "vat": 0,
                  "ownerincome": 0
                },
                "total": {
                  "agencyincomeexvat": 119.25,
                  "vat": 23.85,
                  "ownerincome": 810.9
                }
              },
              "periods": [
                {
                  "fromdate": "2016-07-28",
                  "todate": "2016-08-02",
                  "pricetype": "5D",
                  "days": 5,
                  "additional": false,
                  "subperiods": [
                    {
                      "fromdate": "2016-07-28",
                      "todate": "2016-08-02",
                      "percentofperiod": "100%",
                      "basepricetype": "7D",
                      "percentage": "90%",
                      "standardprice": 954,
                      "partysizeprice": 0,
                      "override": false,
                      "minimum": false,
                      "decimalplaces": 2
                    }
                  ]
                }
              ],
              "specialoffers": []
            },
            "securitydeposit": {},
            "currency": {
              "id": 1,
              "code": "GBP",
              "name": "Pound Sterling",
              "decimalplaces": 2
            },
            "estimatedarrivaltime": "Between 14:00-16:00",
            "checkinearliesttime": "10:30",
            "checkinlatesttime": "14:00",
            "checkintext": "Arriving about 1",
            "checkouttime": "12:34",
            "checkouttext": "May be late",
            "webbooking": {
              "id": 1,
              "created": "2016-04-04 09:18:25",
              "reviewstart": "2016-04-04 09:18:25",
              "reviewer": "",
              "processed": ""
            },
            "adults": 2,
            "children": 2,
            "infants": 0,
            "pets": 1,
            "potentialbooking": {},
            "customers": [
              {
                "id": 3,
                "details": "/v2/customer/7",
                "name": "Mr Thomas Thornley"
              }
            ],
            "guests": [
              {
                "id": 5,
                "name": "John Doe",
                "type": "Adult",
                "age": 23
              },
              {
                "id": 6,
                "name": "Mr Dog Doggerson VII",
                "type": "Pet",
                "pettype": "Dog",
                "petbreed": "Labradoodlepoodlewoodle"
              }
            ],
            "extras": [],
            "provisionalbooking": {
              "id": 3,
              "tabsuser": "/v2/tabsuser/24",
              "depositamount": "/v2/depositamount/1",
              "deposit": 0,
              "depositoverridden": false,
              "depositduedate": "2016-06-02",
              "balanceduedate": "2016-07-14",
              "commissionpercentage": "12.5%",
              "commissionpercentagesetby": "tabs",
              "ownerpaymentterms": "/v2/ownerpaymentterms/2"
            },
            "paymentsummary": {
              "details": "/v2/booking/3/payment",
              "booking": {
                "paid": 0,
                "refunded": 0,
                "balance": 0,
                "outstanding": 954
              },
              "securitydeposit": {
                "paid": 0,
                "refunded": 0,
                "balance": 0,
                "outstanding": 0
              },
              "total": {
                "paid": 0,
                "refunded": 0,
                "balance": 0,
                "outstanding": 954
              },
              "deposit": {
                "amount": 0,
                "due": "2016-06-02",
                "paid": "",
                "outstanding": 0
              },
              "balance": {
                "amount": 954,
                "due": "2016-07-14",
                "paid": "",
                "outstanding": 954
              },
              "balancedue": 954
            },
            "ownerpaymentsummary": {
              "ownerincome": 0,
              "ownerincometotal": 810.9,
              "agencyincome": 0,
              "agencyincometotal": 119.25,
              "agencyvat": 0,
              "agencyvattotal": 23.85
            },
            "ownerpayments": [
              {
                "id": 6,
                "type": "Booking",
                "owner": "/v2/owner/17",
                "ownername": "Beverley, Jon (Mr) (Jon's Letting Agency)",
                "booking": "/v2/booking/3",
                "bookingbrand": "/v2/bookingbrand/4",
                "fromdate": "2016-07-14",
                "todate": "2016-07-14",
                "description": "Booking: July 28th 2016, Reedmere",
                "totalprice": 954,
                "ownerincome": 810.9,
                "agencyincome": 119.25,
                "vatrate": {},
                "agencyvat": 23.85,
                "totalbasic": 954,
                "totalextras": {
                  "ownerincome": 0,
                  "agencyincome": 0,
                  "agencyvat": 0,
                  "total": 0
                },
                "total": {
                  "ownerincome": 810.9,
                  "agencyincome": 119.25,
                  "agencyvat": 23.85,
                  "total": 954
                },
                "paymentrequired": "Balance",
                "authorised": "",
                "authorisedby": "",
                "ownerpayment": "",
                "dontpayowneruntil": "",
                "extras": [],
                "authorisations": [],
                "created": "",
                "createdby": "",
                "reason": ""
              }
            ],
            "donotpayowneruntil": "",
            "confirmedbooking": {},
            "transferredtobooking": {},
            "transferredfrombooking": {},
            "cancelledbooking": {},
            "suppliers": [
              {
                "type": "BookingOverride",
                "route": "/v2/booking/3/supplier/4",
                "service": {
                  "id": 1,
                  "name": "Cleaning",
                  "description": "Cleaning a property",
                  "donotmodify": true,
                  "vatband": {
                    "id": 2,
                    "vatband": "Standard"
                  },
                  "datetouse": "fromdate",
                  "customerbookings": true,
                  "ownerbookings": false
                },
                "actor": "/v2/supplier/23"
              },
              {
                "type": "PropertyDefault",
                "route": "/v2/property/2/supplier/4",
                "service": {
                  "id": 2,
                  "name": "Keyholding",
                  "description": "Holding the keys for a property",
                  "donotmodify": true,
                  "vatband": [],
                  "datetouse": "fromdate",
                  "customerbookings": true,
                  "ownerbookings": false
                },
                "actor": "/v2/supplier/14"
              },
              {
                "type": "BookingOverride",
                "route": "/v2/booking/3/supplier/2",
                "service": {
                  "id": 3,
                  "name": "Linen",
                  "description": "Providing linen",
                  "donotmodify": true,
                  "vatband": [],
                  "datetouse": "fromdate",
                  "customerbookings": true,
                  "ownerbookings": true
                },
                "actor": "/v2/supplier/23"
              },
              {
                "type": "BookingOverride",
                "route": "/v2/booking/3/supplier/3",
                "service": {
                  "id": 4,
                  "name": "Towels",
                  "description": "Collecting and laundering towels",
                  "donotmodify": true,
                  "vatband": [],
                  "datetouse": "todate",
                  "customerbookings": true,
                  "ownerbookings": true
                },
                "actor": "/v2/supplier/23"
              }
            ],
            "partysizepricingnote": "",
            "sourcemarketingbrand": {},
            "propertynoteconfirmations": [],
            "updated": "2017-05-03 09:46:48"
          }

### Updates a  Booking for a given id [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is.

    e.g. adults=3

To cancel a booking, use the following fields:
* ```cancelledbooking_reason``` The reason the booking was cancelled
* ```cancelledbooking_adviseddate``` The date the customer advised of the cancellation (optional, default=today)
* ```cancelledbooking_completeddate``` The date the cancellation was completed (i.e. fully processed) (optional)
* ```cancelledbooking_completedbytabsuserid``` The id of the tabsuser completing the cancellation (optional)
* ```cancelledbooking_fullrefund``` If set (to any value, preferably not false) extras will be cancelled, and an offset extra added to 'zero the basic' (optional)

+ Response 204

### Deletes a Booking [DELETE]

+ Response 404




## Booking Contact Index [/v2/booking/{id}/contact]

### Get all contacts for a booking [GET]

+ Parameters

    + id (required, integer, `9`) ... The id of the booking

+ Response 200 (application/json)

        [
            {
              "id": 2,
              "contacttype": {
                "id": 4,
                "type": "Booking"
              },
              "contactdatetime": "2015-05-01 14:34:56",
              "contactmethodtype": {
                "id": 4,
                "method": "Email",
                "encoding": {
                  "id": 2,
                  "encoding": "HTML"
                },
                "characterlimit": 0,
                "maximumaddresslength": 0,
                "addressvalidationtype": "",
                "addressvalidation": ""
              },
              "subject": "Latin",
              "content": "Ipsos mori nil illigititatem carborundum",
              "sender": {
                "id": 2,
                "type": "C",
                "contactmethodtype": "Email",
                "contactmethodsubtype": "",
                "value": "support@tabs-software.co.uk",
                "comment": "",
                "invalid": false,
                "invaliddatetime": "",
                "invalidreason": "",
                "contactpreferences": [
                  {
                    "id": 1,
                    "branding": "/v2/branding/1",
                    "rolereason": {
                      "id": 1,
                      "role": {
                        "id": 1,
                        "name": "Customer",
                        "donotdelete": true
                      },
                      "reason": {
                        "id": 1,
                        "name": "Booking Confirmation",
                        "donotdelete": true
                      },
                      "donotdelete": true,
                      "required": true
                    },
                    "priority": 1,
                    "donotuse": false
                  }
                ],
                "dedupekey": "ot-support@tabs-software.co.uk"
              },
              "status": [],
              "documents": [
                {
                  "id": 17,
                  "created": "2016-06-24 12:58:44",
                  "document": {
                    "id": 1,
                    "name": "Tabs 2 roadmap.pdf",
                    "filename": "Tabs 2 roadmap.pdf",
                    "timeadded": "2014-01-01 12:00:00",
                    "weight": 0,
                    "private": false,
                    "description": "A document",
                    "mimetype": {
                      "id": 1,
                      "name": "application/pdf",
                      "shortname": "pdf"
                    },
                    "file": "/v2/file/1"
                  }
                },
                {
                  "id": 18,
                  "created": "2016-06-25 02:45:02",
                  "image": {
                    "id": 5,
                    "name": "abc.jpg",
                    "filename": "abc.jpg",
                    "timeadded": "2014-01-01 12:00:00",
                    "weight": 0,
                    "private": false,
                    "description": "Here is another placeholder image",
                    "mimetype": {
                      "id": 2,
                      "name": "image/jpeg",
                      "shortname": "jpg"
                    },
                    "file": "/v2/file/5",
                    "height": 360,
                    "width": 480,
                    "alt": "The empire state building"
                  }
                },
                {
                  "id": 19,
                  "created": "2016-06-26 14:45:02",
                  "image": {
                    "id": 6,
                    "name": "xyz.jpg",
                    "filename": "xyz.jpg",
                    "timeadded": "2014-01-01 12:00:00",
                    "weight": 0,
                    "private": false,
                    "description": "Bathroom",
                    "mimetype": {
                      "id": 2,
                      "name": "image/jpeg",
                      "shortname": "jpg"
                    },
                    "file": "/v2/file/6",
                    "height": 300,
                    "width": 200,
                    "alt": "The Bathroom"
                  }
                }
              ],
              "sourcemarketingbrand": {
                "id": 2,
                "source": {
                  "id": 2,
                  "sourcecode": "EDC",
                  "description": "EDP Cottages",
                  "showonweb": true,
                  "sourcecategory": {
                    "id": 1,
                    "sourcecategory": "Internet"
                  },
                  "sourcemarketingbrands": [
                    {
                      "id": 2,
                      "marketingbrand": {
                        "id": 3,
                        "code": "NOMM",
                        "name": "Norfolk Country Cottages",
                        "agency": "/v2/agency/4",
                        "defaultbookingbrand": "/v2/bookingbrand/3",
                        "website": "www.norfolk.co.uk",
                        "email": "info@norfolk.co.uk"
                      },
                      "fromdate": "2016-03-01",
                      "todate": "2020-12-31"
                    },
                    {
                      "id": 3,
                      "marketingbrand": {
                        "id": 4,
                        "code": "MAMM",
                        "name": "Marsdens",
                        "agency": "/v2/agency/5",
                        "defaultbookingbrand": "/v2/bookingbrand/4",
                        "website": "www.mabb.co.uk",
                        "email": "info@mabb.co.uk"
                      },
                      "fromdate": "2016-03-01",
                      "todate": "2020-12-31"
                    }
                  ]
                },
                "marketingbrand": {
                  "id": 3,
                  "code": "NOMM",
                  "name": "Norfolk Country Cottages",
                  "agency": "/v2/agency/4",
                  "defaultbookingbrand": "/v2/bookingbrand/3",
                  "website": "www.norfolk.co.uk",
                  "email": "info@norfolk.co.uk"
                },
                "fromdate": "2016-03-01",
                "todate": "2020-12-31"
              },
              "contactentities": [
                {
                  "id": 4,
                  "contactentitytype": "TabsUser",
                  "entityid": 1,
                  "function": "from",
                  "intermediary": "Bloggs",
                  "reference": "XA-12a456",
                  "status": [],
                  "status_history": []
                },
                {
                  "id": 5,
                  "contactentitytype": "Customer",
                  "entityid": 7,
                  "function": "to",
                  "intermediary": "Bloggs",
                  "reference": "XA-333-456",
                  "status": [],
                  "status_history": [],
                  "contactdetail": "/v2/customer/7/contactdetail/3",
                  "contactdetailvalue": "55 Banana Street Fictional Town Norfolk NR22 2JG United Kingdom"
                },
                {
                  "id": 6,
                  "contactentitytype": "Booking",
                  "entityid": 9,
                  "function": "content",
                  "intermediary": null,
                  "reference": null,
                  "status": [],
                  "status_history": []
                }
              ],
              "deleted": false
            }
          ]




# Booking Customer Index [/v2/booking/{id}/customer]
+ Parameters

    + id (required, integer, `2`) ... The id of the Booking

### Retrieve a list of Customers for a booking. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "booking": "/v2/booking/2",
                "customer": "/v2/customer/10"
            }
        ]

### Add a new Customer to a Booking [POST]
The following fields should be provided in the POST array

* ```customerid``` Id of the Customer

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/booking/2/customer/4

## Booking Customer [/v2/booking/{id}/customer/{id2}]
+ Parameters

    + id (required, integer, `2`) ... The id of the Booking 
    + id2 (required, integer, `2`) ... The id of the BookingCustomer 

### Gets the details of a Booking Customer [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "booking": "/v2/booking/2",
            "customer": "/v2/customer/10"
        }

### Update a Booking Customer [PUT]

+ Request (application/x-www-form-urlencoded)

        xxx=yyy

+ Response 204

### Deletes a Customer from a Booking [DELETE]

+ Response 204



## Booking Document Index [/v2/booking/{id}/document]

+ Parameters

    + id (required, integer, `2`) ... The id of the Booking

### Get all Booking Documents [GET]

+ Response 200 (application/json)

        [
          {
            "id": 10,
            "created": "2017-01-03 21:50:42",
            "image": {
              "id": 4,
              "name": "placeholder.jpg",
              "filename": "placeholder.jpg",
              "timeadded": "2014-01-01 12:00:00",
              "weight": 0,
              "private": false,
              "description": "Here is a placeholder image",
              "mimetype": {
                "id": 2,
                "name": "image/jpeg",
                "shortname": "jpg"
              },
              "file": "/v2/file/4",
              "height": 300,
              "width": 200,
              "alt": "An image"
            }
          },
          {
            "id": 11,
            "created": "2017-01-03 21:50:42",
            "image": {
              "id": 5,
              "name": "abc.jpg",
              "filename": "abc.jpg",
              "timeadded": "2014-01-01 12:00:00",
              "weight": 0,
              "private": false,
              "description": "Here is another placeholder image",
              "mimetype": {
                "id": 2,
                "name": "image/jpeg",
                "shortname": "jpg"
              },
              "file": "/v2/file/5",
              "height": 360,
              "width": 480,
              "alt": "The empire state building"
            }
          },
          {
            "id": 12,
            "created": "2017-01-03 21:50:42",
            "image": {
              "id": 6,
              "name": "xyz.jpg",
              "filename": "xyz.jpg",
              "timeadded": "2014-01-01 12:00:00",
              "weight": 0,
              "private": false,
              "description": "Bathroom",
              "mimetype": {
                "id": 2,
                "name": "image/jpeg",
                "shortname": "jpg"
              },
              "file": "/v2/file/6",
              "height": 300,
              "width": 200,
              "alt": "The Bathroom"
            }
          },
          {
            "id": 13,
            "created": "2017-01-03 21:50:42",
            "document": {
              "id": 1,
              "name": "Tabs 2 roadmap.pdf",
              "filename": "Tabs 2 roadmap.pdf",
              "timeadded": "2014-01-01 12:00:00",
              "weight": 0,
              "private": false,
              "description": "A document",
              "mimetype": {
                "id": 1,
                "name": "application/pdf",
                "shortname": "pdf"
              },
              "file": "/v2/file/1"
            }
          },
          {
            "id": 14,
            "created": "2017-01-03 21:50:42",
            "document": {
              "id": 2,
              "name": "A Simple text file",
              "filename": "A Simple Text File.txt",
              "timeadded": "2014-01-01 12:00:00",
              "weight": 0,
              "private": false,
              "description": "Text file",
              "mimetype": {
                "id": 3,
                "name": "text/plain",
                "shortname": "txt"
              },
              "file": "/v2/file/2"
            }
          },
          {
            "id": 15,
            "created": "2017-01-03 21:50:42",
            "document": {
              "id": 3,
              "name": "A bit of text attached to a contact",
              "filename": "A Simple Text File.txt",
              "timeadded": "2014-01-01 12:00:00",
              "weight": 0,
              "private": false,
              "description": "Text file",
              "mimetype": {
                "id": 3,
                "name": "text/plain",
                "shortname": "txt"
              },
              "file": "/v2/file/3"
            }
          }
        ]

### Add a new Booking Document [POST]
The following fields should be provided in the POST array

* ```documentid``` The id of the Document

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/booking/1/document/1

## Booking Document Details [/v2/booking/{id}/document/{id2}]

+ Parameters

    + id (required, integer, `2`) ... The id of the Booking
    + id2 (required, integer, `10`) ... The id of the BookingDocument to get

### Get the details of a Booking Document [GET]

+ Response 200 (application/json)

        {
          "id": 10,
          "created": "2017-01-03 21:50:42",
          "image": {
            "id": 4,
            "name": "placeholder.jpg",
            "filename": "placeholder.jpg",
            "timeadded": "2014-01-01 12:00:00",
            "weight": 0,
            "private": false,
            "description": "Here is a placeholder image",
            "mimetype": {
              "id": 2,
              "name": "image/jpeg",
              "shortname": "jpg"
            },
            "file": "/v2/file/4",
            "height": 300,
            "width": 200,
            "alt": "An image"
          }
        }

### Update the a Booking Document [PUT]
Not implemented

+ Response 501

### Delete a Booking Document [DELETE]

+ Response 204



## BookingEnquiry Index [/v2/bookingenquiry{?guesttype,propertyid,brandingid,fromdate,todate,adults,children,infants,pets,currencycode,saleschannel,pricingperiod,promotioncode,calculatebrochureprice,calculateadditionalextras,calculateincludedextras,includepartysizepricing,includespecialoffers,calculatesecuritydeposit,calculatedeposit,brochurepricedecimalplaces,basicpricedecimalplaces,currentbookingid}]
Postman: bookingenquiry?guesttype=Customer&propertyid=1&brandingid=3&fromdate=2016-06-11&todate=2016-06-25&adults=4&children=0&infants=0&pets=0&currencycode=GBP&saleschannel=Brand%20Website&pricingperiod=Week&calculatebrochureprice=true&calculateadditionalextras=true&calculateincludedextras=true&includepartysizepricing=true&includespecialoffers=true&calculatesecuritydeposit=true&calculatedeposit=true&brochurepricedecimalplaces=0&basicpricedecimalplaces=0&currentbookingid=0

+ Parameters

    + guesttype (optional, string, `Customer`) ... The type of guest, Owner, Customer, none (optional, default = Customer)
    + propertyid (required, integer, `1`) ... The id of the Property
    + brandingid (required, integer, `3`) ... The id of the Branding whose pricing to use
    + fromdate (required, string, `2016-06-11`) ... The start date of the holiday
    + todate (required, string, `2016-06-25`) ... The end date of the holiday
    + adults (optional, integer, `4`) ... The number of adults in the party (optional, default = property sleeps)
    + children (optional, integer, `0`) ... The number of children in the party (optional, default = 0)
    + infants (optional, integer, `0`) ... The number of infants in the party (optional, default = 0)
    + pets (optional, integer, `0`) ... The number of pets in the party (optional, default = 0)
    + currencycode (optional, string, `GBP`) ... The Currency to price in (optional, default = GBP)
    + saleschannel (optional, string, `Brand Website`) ... The Sales Channel to price for (optional, default = Default)
    + pricingperiod (optional, string, `Week`) ... The Pricing Period to price for (optional, default = Week)
    + promotioncode (optional, string, ``) ... The promotion / voucher code to use on the booking (optional)
    + calculatebrochureprice (optional, boolean, `true`) ... Whether to calculate the brochure price (optional, default = True)
    + calculateadditionalextras (optional, boolean, `true`) ... Whether to calculate the price of additional extras (optional, default = True)
    + calculateincludedextras (optional, boolean, `true`) ... Whether to calculate the price of included extras (optional, default = True)
    + includepartysizepricing (optional, boolean, `true`) ... Whether to include party size reductions in the price (optional, default = True)
    + includespecialoffers (optional, boolean, `true`) ... Whether to include special offers in the price (optional, default = True)
    + calculatesecuritydeposit (optional, boolean, `true`) ... Whether to calculate the price of the security deposit (optional, default = True)
    + calculatedeposit (optional, boolean, `true`) ... Whether to calculate the deposit required (optional, default = True)
    + brochurepricedecimalplaces (optional, integer, `0`) ... The number of decimal places to calculate the Brochure Price to (optional, default = 0)
    + basicpricedecimalplaces (optional, integer, `0`) ... The number of decimal places to calculate the Basic Price to (optional, default = 2)
    + currentbookingid (optional, integer, `0`) ... The id of the Booking being transferred (causes the availability check to only check the additional days) (optional)

### Check whether a booking is allowed, and return a price breakdown, even if unavailable [GET]

+ Response 200 (application/json)

        {
            "property": "/v2/property/1",
            "branding": "/v2/branding/3",
            "status": {
              "id": 1,
              "name": "Live",
              "allowbooking": true,
              "allowoverride": false,
              "priority": 10,
              "allowbalance": true
            },
            "fromdate": "2016-06-11",
            "todate": "2016-06-25",
            "bookingok": false,
            "errors": [
              {
                "code": 60,
                "message": "Property does not allow holiday to start and/or end on the dates specified"
              }
            ],
            "adults": 4,
            "children": 0,
            "infants": 0,
            "pets": 0,
            "currency": {
              "id": 1,
              "code": "GBP",
              "name": "Pound Sterling",
              "decimalplaces": 2
            },
            "saleschannel": {
              "id": 2,
              "saleschannel": "Brand Website",
              "description": "Sales made via a brand website, e.g. Suffolk Secrets"
            },
            "pricingperiod": {
              "id": 2,
              "pricingperiod": "Week",
              "days": 0,
              "weeks": 1,
              "months": 0,
              "subperiod": "Day"
            },
            "promotioncode": [],
            "partyok": true,
            "petsok": true,
            "available": true,
            "changedaysok": false,
            "statusok": true,
            "webbookingok": true,
            "webbookingalloweduntil": "2099-12-31",
            "priceok": true,
            "price": {
              "valid": true,
              "options": {
                "calculatebrochureprice": "true",
                "includepartysizepricing": "true",
                "includespecialoffers": "true",
                "calculateincludedextras": "true",
                "calculateadditionalextras": "true",
                "calculatesecuritydeposit": "true",
                "calculatedeposit": "true",
                "brochurepricedecimalplaces": "0",
                "basicpricedecimalplaces": "0",
                "extras": []
              },
              "criteria": {
                "fromdate": "2016-06-11",
                "todate": "2016-06-25",
                "partysize": 4,
                "adults": 4,
                "children": 0,
                "infants": 0,
                "pets": 0,
                "currency": "GBP",
                "pricingperiod": "Week",
                "saleschannel": "Brand Website",
                "promotioncodes": []
              },
              "bookings": [
                {
                  "valid": true,
                  "bookingid": null,
                  "brandingid": 3,
                  "propertyid": 1,
                  "options": {
                    "calculatebrochureprice": "1",
                    "includepartysizepricing": "true",
                    "includespecialoffers": "true",
                    "calculateincludedextras": "1",
                    "calculateadditionalextras": "1",
                    "calculatesecuritydeposit": "true",
                    "calculatedeposit": "true",
                    "brochurepricedecimalplaces": "0",
                    "basicpricedecimalplaces": "0",
                    "extras": []
                  },
                  "criteria": {
                    "fromdate": "2016-06-11",
                    "todate": "2016-06-25",
                    "partysize": 4,
                    "adults": 4,
                    "children": 0,
                    "infants": 0,
                    "pets": 0,
                    "currency": "GBP",
                    "pricingperiod": "Week",
                    "saleschannel": "Brand Website",
                    "promotioncodes": []
                  },
                  "pricing": {
                    "total": {
                      "standardprice": 1400,
                      "partysizesaving": 0,
                      "specialoffersaving": 0,
                      "promotioncodesaving": 0,
                      "basicprice": 1370,
                      "includedextrasprice": 30.14,
                      "ownerprice": 1400,
                      "changebrochurepriceextrasprice": 0,
                      "brochureprice": 1400,
                      "additionalextrasprice": 46.5,
                      "totalprice": 1446.5
                    },
                    "financials": {
                      "commissionpercentage": "19%",
                      "vatrate": "20%",
                      "basic": {
                        "agencyincomeexvat": 260.3,
                        "vat": 52.06,
                        "ownerincome": 1057.64,
                        "excesscommission": 0
                      },
                      "extras": {
                        "agencyincomeexvat": 57.14,
                        "vat": 0,
                        "ownerincome": 19.5
                      },
                      "total": {
                        "agencyincomeexvat": 317.44,
                        "vat": 52.06,
                        "ownerincome": 1077.14
                      }
                    },
                    "extras": [
                      {
                        "extracode": "BKFE",
                        "included": false,
                        "quantity": 1,
                        "bookingextraid": 0,
                        "unitprice": 27,
                        "price": 27,
                        "agencypercentage": "100%",
                        "agencyincomeexvat": 27,
                        "vatrate": "0%",
                        "vat": 0,
                        "ownerincome": 0
                      },
                      {
                        "extracode": "CANC",
                        "included": true,
                        "quantity": 1,
                        "bookingextraid": 0,
                        "unitprice": 30.14,
                        "price": 30.14,
                        "agencypercentage": "100%",
                        "agencyincomeexvat": 30.14,
                        "vatrate": "0%",
                        "vat": 0,
                        "ownerincome": 0
                      },
                      {
                        "extracode": "HEAT",
                        "included": false,
                        "quantity": 1,
                        "bookingextraid": 0,
                        "unitprice": 19.5,
                        "price": 19.5,
                        "agencypercentage": "0%",
                        "agencyincomeexvat": 0,
                        "vatrate": "0%",
                        "vat": 0,
                        "ownerincome": 19.5
                      }
                    ],
                    "periods": [
                      {
                        "fromdate": "2016-06-11",
                        "todate": "2016-06-18",
                        "pricingsubperiods": 7,
                        "additional": false,
                        "pricetype": "7D",
                        "pricing": {
                          "subperiods": [
                            {
                              "fromdate": "2016-06-11",
                              "todate": "2016-06-18",
                              "percentofperiod": "100%",
                              "percentage": "100%",
                              "basepricetype": "7D",
                              "prices": [
                                {
                                  "fromdate": "2016-06-11",
                                  "todate": "2016-06-18",
                                  "percentofsubperiod": "100%",
                                  "basestandardprice": "700.00",
                                  "basepartysizeprice": null,
                                  "standardprice": 700,
                                  "partysizeprice": null,
                                  "override": false,
                                  "minimum": false
                                }
                              ],
                              "decimalplaces": 2
                            }
                          ],
                          "extras": [
                            {
                              "extracode": "BKFE",
                              "included": false,
                              "quantity": 1,
                              "bookingextraid": 0,
                              "unitprice": 13.5,
                              "price": 13.5,
                              "agencypercentage": "100%",
                              "agencyincomeexvat": 13.5,
                              "vatrate": "",
                              "vat": 0,
                              "ownerincome": 0,
                              "extrapricings": [
                                {
                                  "id": 39,
                                  "type": "Amount",
                                  "price": 13.5
                                }
                              ]
                            },
                            {
                              "extracode": "CANC",
                              "included": true,
                              "quantity": 1,
                              "bookingextraid": 0,
                              "unitprice": 15.07,
                              "price": 15.07,
                              "agencypercentage": "100%",
                              "agencyincomeexvat": 15.07,
                              "vatrate": "",
                              "vat": 0,
                              "ownerincome": 0,
                              "extrapricings": [
                                {
                                  "id": 38,
                                  "type": "Percentage",
                                  "price": 15.071770334928
                                }
                              ]
                            },
                            {
                              "extracode": "HEAT",
                              "included": false,
                              "quantity": 1,
                              "bookingextraid": 0,
                              "unitprice": 9.75,
                              "price": 9.75,
                              "agencypercentage": "0%",
                              "agencyincomeexvat": 0,
                              "vatrate": "",
                              "vat": 0,
                              "ownerincome": 9.75,
                              "extrapricings": [
                                {
                                  "id": 37,
                                  "type": "Amount",
                                  "price": 9.75
                                }
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "fromdate": "2016-06-18",
                        "todate": "2016-06-25",
                        "pricingsubperiods": 7,
                        "additional": false,
                        "pricetype": "7D",
                        "pricing": {
                          "subperiods": [
                            {
                              "fromdate": "2016-06-18",
                              "todate": "2016-06-25",
                              "percentofperiod": "100%",
                              "percentage": "100%",
                              "basepricetype": "7D",
                              "prices": [
                                {
                                  "fromdate": "2016-06-18",
                                  "todate": "2016-06-25",
                                  "percentofsubperiod": "100%",
                                  "basestandardprice": "700.00",
                                  "basepartysizeprice": null,
                                  "standardprice": 700,
                                  "partysizeprice": null,
                                  "override": false,
                                  "minimum": false
                                }
                              ],
                              "decimalplaces": 2
                            }
                          ],
                          "extras": [
                            {
                              "extracode": "BKFE",
                              "included": false,
                              "quantity": 1,
                              "bookingextraid": 0,
                              "unitprice": 13.5,
                              "price": 13.5,
                              "agencypercentage": "100%",
                              "agencyincomeexvat": 13.5,
                              "vatrate": "",
                              "vat": 0,
                              "ownerincome": 0,
                              "extrapricings": [
                                {
                                  "id": 39,
                                  "type": "Amount",
                                  "price": 13.5
                                }
                              ]
                            },
                            {
                              "extracode": "CANC",
                              "included": true,
                              "quantity": 1,
                              "bookingextraid": 0,
                              "unitprice": 15.07,
                              "price": 15.07,
                              "agencypercentage": "100%",
                              "agencyincomeexvat": 15.07,
                              "vatrate": "",
                              "vat": 0,
                              "ownerincome": 0,
                              "extrapricings": [
                                {
                                  "id": 38,
                                  "type": "Percentage",
                                  "price": 15.071770334928
                                }
                              ]
                            },
                            {
                              "extracode": "HEAT",
                              "included": false,
                              "quantity": 1,
                              "bookingextraid": 0,
                              "unitprice": 9.75,
                              "price": 9.75,
                              "agencypercentage": "0%",
                              "agencyincomeexvat": 0,
                              "vatrate": "",
                              "vat": 0,
                              "ownerincome": 9.75,
                              "extrapricings": [
                                {
                                  "id": 37,
                                  "type": "Amount",
                                  "price": 9.75
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ],
                    "dayprices": [
                      {
                        "date": "2016-06-11",
                        "standardprice": 100,
                        "standardpriceminimum": null,
                        "standardpriceoverride": null,
                        "partysizeprice": null,
                        "partysizepriceminimum": null,
                        "partysizepriceoverride": null,
                        "fullprice": 100,
                        "specialoffersavings": [],
                        "ownerprice": 100,
                        "excesscommission": 0
                      },
                      {
                        "date": "2016-06-12",
                        "standardprice": 100,
                        "standardpriceminimum": null,
                        "standardpriceoverride": null,
                        "partysizeprice": null,
                        "partysizepriceminimum": null,
                        "partysizepriceoverride": null,
                        "fullprice": 100,
                        "specialoffersavings": [],
                        "ownerprice": 100,
                        "excesscommission": 0
                      },
                      {
                        "date": "2016-06-13",
                        "standardprice": 100,
                        "standardpriceminimum": null,
                        "standardpriceoverride": null,
                        "partysizeprice": null,
                        "partysizepriceminimum": null,
                        "partysizepriceoverride": null,
                        "fullprice": 100,
                        "specialoffersavings": [],
                        "ownerprice": 100,
                        "excesscommission": 0
                      },
                      {
                        "date": "2016-06-14",
                        "standardprice": 100,
                        "standardpriceminimum": null,
                        "standardpriceoverride": null,
                        "partysizeprice": null,
                        "partysizepriceminimum": null,
                        "partysizepriceoverride": null,
                        "fullprice": 100,
                        "specialoffersavings": [],
                        "ownerprice": 100,
                        "excesscommission": 0
                      },
                      {
                        "date": "2016-06-15",
                        "standardprice": 100,
                        "standardpriceminimum": null,
                        "standardpriceoverride": null,
                        "partysizeprice": null,
                        "partysizepriceminimum": null,
                        "partysizepriceoverride": null,
                        "fullprice": 100,
                        "specialoffersavings": [],
                        "ownerprice": 100,
                        "excesscommission": 0
                      },
                      {
                        "date": "2016-06-16",
                        "standardprice": 100,
                        "standardpriceminimum": null,
                        "standardpriceoverride": null,
                        "partysizeprice": null,
                        "partysizepriceminimum": null,
                        "partysizepriceoverride": null,
                        "fullprice": 100,
                        "specialoffersavings": [],
                        "ownerprice": 100,
                        "excesscommission": 0
                      },
                      {
                        "date": "2016-06-17",
                        "standardprice": 100,
                        "standardpriceminimum": null,
                        "standardpriceoverride": null,
                        "partysizeprice": null,
                        "partysizepriceminimum": null,
                        "partysizepriceoverride": null,
                        "fullprice": 100,
                        "specialoffersavings": [],
                        "ownerprice": 100,
                        "excesscommission": 0
                      },
                      {
                        "date": "2016-06-18",
                        "standardprice": 100,
                        "standardpriceminimum": null,
                        "standardpriceoverride": null,
                        "partysizeprice": null,
                        "partysizepriceminimum": null,
                        "partysizepriceoverride": null,
                        "fullprice": 100,
                        "specialoffersavings": [],
                        "ownerprice": 100,
                        "excesscommission": 0
                      },
                      {
                        "date": "2016-06-19",
                        "standardprice": 100,
                        "standardpriceminimum": null,
                        "standardpriceoverride": null,
                        "partysizeprice": null,
                        "partysizepriceminimum": null,
                        "partysizepriceoverride": null,
                        "fullprice": 100,
                        "specialoffersavings": [],
                        "ownerprice": 100,
                        "excesscommission": 0
                      },
                      {
                        "date": "2016-06-20",
                        "standardprice": 100,
                        "standardpriceminimum": null,
                        "standardpriceoverride": null,
                        "partysizeprice": null,
                        "partysizepriceminimum": null,
                        "partysizepriceoverride": null,
                        "fullprice": 100,
                        "specialoffersavings": [],
                        "ownerprice": 100,
                        "excesscommission": 0
                      },
                      {
                        "date": "2016-06-21",
                        "standardprice": 100,
                        "standardpriceminimum": null,
                        "standardpriceoverride": null,
                        "partysizeprice": null,
                        "partysizepriceminimum": null,
                        "partysizepriceoverride": null,
                        "fullprice": 100,
                        "specialoffersavings": [],
                        "ownerprice": 100,
                        "excesscommission": 0
                      },
                      {
                        "date": "2016-06-22",
                        "standardprice": 100,
                        "standardpriceminimum": null,
                        "standardpriceoverride": null,
                        "partysizeprice": null,
                        "partysizepriceminimum": null,
                        "partysizepriceoverride": null,
                        "fullprice": 100,
                        "specialoffersavings": [],
                        "ownerprice": 100,
                        "excesscommission": 0
                      },
                      {
                        "date": "2016-06-23",
                        "standardprice": 100,
                        "standardpriceminimum": null,
                        "standardpriceoverride": null,
                        "partysizeprice": null,
                        "partysizepriceminimum": null,
                        "partysizepriceoverride": null,
                        "fullprice": 100,
                        "specialoffersavings": [],
                        "ownerprice": 100,
                        "excesscommission": 0
                      },
                      {
                        "date": "2016-06-24",
                        "standardprice": 100,
                        "standardpriceminimum": null,
                        "standardpriceoverride": null,
                        "partysizeprice": null,
                        "partysizepriceminimum": null,
                        "partysizepriceoverride": null,
                        "fullprice": 100,
                        "specialoffersavings": [],
                        "ownerprice": 100,
                        "excesscommission": 0
                      }
                    ],
                    "specialoffers": []
                  },
                  "securitydeposit": {
                    "amount": 96,
                    "dueindate": "2017-04-28",
                    "dueoutdate": "2016-06-28"
                  },
                  "deposit": {
                    "depositamount": "/v2/depositamount/1",
                    "description": "£150 plus included extras and Booking Fee",
                    "deposit": 177,
                    "duedate": "2017-04-28",
                    "balanceduedate": "2017-04-28"
                  }
                }
              ]
            }
          }


## Booking Enquiry Index [/v2/booking/{id}/enquiry{?extraid,quantity}]
Postman: booking/5/enquiry?extraid=8&quantity=2

+ Parameters

    + id (required, integer, `5`) ... The id of the Booking
    + extraid (required, integer, `8`) ... The id of the Extra to Add
    + quantity (optional, integer, `2`) ... The quantity of the extra to add (optional, default=1)

### Get the price for an Extra on a Booking [GET]

+ Response 200 (application/json)

        {
            "id": null,
            "bookeddatetime": "2016-11-09 12:18:30",
            "extra": {
              "id": 8,
              "extracode": "CON",
              "extratype": "Booking",
              "description": "Concierge Service",
              "brandings": [
                "/v2/branding/3",
                "/v2/branding/4"
              ]
            },
            "unitprice": 65,
            "quantity": 1,
            "quantityoverridden": false,
            "price": 65,
            "priceoverridden": false,
            "agencypercentage": "20.5%",
            "agencyincomeexvat": 13.33,
            "vatrate": {
              "id": 4,
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "fromdate": "2011-01-04",
              "todate": "2100-01-01",
              "percentage": 20
            },
            "vat": 2.67,
            "ownerincome": 49,
            "configuration": {
              "id": 47,
              "fromdate": "2016-01-01",
              "todate": "2016-12-31",
              "compulsory": false,
              "included": false,
              "decimalplaces": 2,
              "payagency": true,
              "payowner": true,
              "visibletoowner": true,
              "visibletocustomer": true,
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "customerselectable": false,
              "priceoverrideallowed": true,
              "defaultquantity": 1,
              "quantityoverrideallowed": true,
              "maximumquantity": 99,
              "usepropertyprimarybranding": false,
              "changesbrochureprice": false,
              "type": "BrandExtraConfiguration"
            }
          }




## Booking Extra Index [/v2/booking/{id}/extra]

+ Parameters

    + id (required, integer, `2`) ... The id of the Booking

### Retrieve a list of Extras for a booking. [GET]

+ Response 200 (application/json)

        [
            {
              "id": 4,
              "bookeddatetime": "2016-01-01 12:34:56",
              "extra": {
                "id": 1,
                "extracode": "BKFE",
                "extratype": "Booking",
                "description": "Booking Fee",
                "brandings": [
                  "/v2/branding/1",
                  "/v2/branding/2",
                  "/v2/branding/3",
                  "/v2/branding/4"
                ]
              },
              "unitprice": 27,
              "quantity": 1,
              "quantityoverridden": false,
              "price": 27,
              "priceoverridden": false,
              "agencypercentage": "19%",
              "agencyincomeexvat": 22.5,
              "vatrate": {
                "id": 4,
                "vatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "fromdate": "2011-01-04",
                "todate": "2100-01-01",
                "percentage": 20
              },
              "vat": 4.5,
              "ownerincome": 0,
              "configuration": {
                "id": 26,
                "fromdate": "2016-01-01",
                "todate": "2017-01-01",
                "compulsory": true,
                "included": false,
                "decimalplaces": 2,
                "payagency": true,
                "payowner": false,
                "visibletoowner": true,
                "visibletocustomer": false,
                "vatband": {
                  "id": 1,
                  "vatband": "Zero/Exempt"
                },
                "customerselectable": false,
                "priceoverrideallowed": true,
                "defaultquantity": 1,
                "quantityoverrideallowed": true,
                "maximumquantity": 1,
                "usepropertyprimarybranding": false,
                "changesbrochureprice": false,
                "type": "BrandExtraConfiguration"
              }
            },
            {
              "id": 5,
              "bookeddatetime": "2016-01-01 12:34:56",
              "extra": {
                "id": 2,
                "extracode": "CANC",
                "extratype": "Booking",
                "description": "Cancellation Scheme",
                "brandings": [
                  "/v2/branding/1",
                  "/v2/branding/3",
                  "/v2/branding/4"
                ]
              },
              "unitprice": 25.45,
              "quantity": 1,
              "quantityoverridden": false,
              "price": 25.45,
              "priceoverridden": false,
              "agencypercentage": "19%",
              "agencyincomeexvat": 21.21,
              "vatrate": {
                "id": 4,
                "vatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "fromdate": "2011-01-04",
                "todate": "2100-01-01",
                "percentage": 20
              },
              "vat": 4.24,
              "ownerincome": 0,
              "configuration": {
                "id": 23,
                "fromdate": "2016-01-01",
                "todate": "2017-01-01",
                "compulsory": true,
                "included": true,
                "decimalplaces": 2,
                "payagency": true,
                "payowner": false,
                "visibletoowner": true,
                "visibletocustomer": false,
                "vatband": {
                  "id": 1,
                  "vatband": "Zero/Exempt"
                },
                "customerselectable": false,
                "priceoverrideallowed": true,
                "defaultquantity": 1,
                "quantityoverrideallowed": true,
                "maximumquantity": 1,
                "usepropertyprimarybranding": false,
                "changesbrochureprice": false,
                "type": "BrandExtraConfiguration"
              }
            },
            {
              "id": 6,
              "bookeddatetime": "2016-01-01 12:34:56",
              "extra": {
                "id": 3,
                "extracode": "HEAT",
                "extratype": "Booking",
                "description": "Heating",
                "brandings": [
                  "/v2/branding/2",
                  "/v2/branding/3",
                  "/v2/branding/4"
                ]
              },
              "unitprice": 19.5,
              "quantity": 1,
              "quantityoverridden": false,
              "price": 19.5,
              "priceoverridden": false,
              "agencypercentage": "19%",
              "agencyincomeexvat": 0,
              "vatrate": {
                "id": 4,
                "vatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "fromdate": "2011-01-04",
                "todate": "2100-01-01",
                "percentage": 20
              },
              "vat": 0,
              "ownerincome": 19.5,
              "configuration": {
                "id": 24,
                "fromdate": "2016-01-01",
                "todate": "2017-01-01",
                "compulsory": true,
                "included": false,
                "decimalplaces": 2,
                "payagency": false,
                "payowner": true,
                "visibletoowner": true,
                "visibletocustomer": true,
                "vatband": {
                  "id": 1,
                  "vatband": "Zero/Exempt"
                },
                "customerselectable": false,
                "priceoverrideallowed": true,
                "defaultquantity": 1,
                "quantityoverrideallowed": true,
                "maximumquantity": 1,
                "usepropertyprimarybranding": false,
                "changesbrochureprice": false,
                "type": "BrandExtraConfiguration"
              }
            }
          ]

### Add a new Extra to a Booking [POST]
The following fields should be provided in the POST array

* ```extraid``` Id of the Extra to be added (optional, if not supplied then ```extracode``` must be)
* ```extracode``` Code of the Extra to be added (optional, if not supplied then ```extraid``` must be)
* ```quantity``` New quantity for the extra on this booking (optional, default=extra's default quantity or 1)
* ```unitprice``` Price per unit of the extra (optional, otherwise calculated from extra pricing data)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/booking/2/extra/4

## Booking Extra [/v2/booking/{id}/extra/{id2}]

+ Parameters

    + id (required, integer, `2`) ... The id of the Booking
    + id2 (required, integer, `6`) ... The id of the BookingExtra

### Gets the details of a Booking Extra [GET]

+ Response 200 (application/json)

        {
            "id": 6,
            "bookeddatetime": "2016-01-01 12:34:56",
            "extra": {
              "id": 3,
              "extracode": "HEAT",
              "extratype": "Booking",
              "description": "Heating",
              "brandings": [
                "/v2/branding/2",
                "/v2/branding/3",
                "/v2/branding/4"
              ]
            },
            "unitprice": 19.5,
            "quantity": 1,
            "quantityoverridden": false,
            "price": 19.5,
            "priceoverridden": false,
            "agencypercentage": "19%",
            "agencyincomeexvat": 0,
            "vatrate": {
              "id": 4,
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "fromdate": "2011-01-04",
              "todate": "2100-01-01",
              "percentage": 20
            },
            "vat": 0,
            "ownerincome": 19.5,
            "configuration": {
              "id": 24,
              "fromdate": "2016-01-01",
              "todate": "2017-01-01",
              "compulsory": true,
              "included": false,
              "decimalplaces": 2,
              "payagency": false,
              "payowner": true,
              "visibletoowner": true,
              "visibletocustomer": true,
              "vatband": {
                "id": 1,
                "vatband": "Zero/Exempt"
              },
              "customerselectable": false,
              "priceoverrideallowed": true,
              "defaultquantity": 1,
              "quantityoverrideallowed": true,
              "maximumquantity": 1,
              "usepropertyprimarybranding": false,
              "changesbrochureprice": false,
              "type": "BrandExtraConfiguration"
            }
          }

### Update a Booking Extra [PUT]
Update the price or quantity of an extra. Set quantity to zero to cancel the extra.

+ Request (application/x-www-form-urlencoded)

        quantity=2

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/booking/2/extra/4

### Deletes a Extra from a Booking [DELETE]
Extras are 'deleted' by being cancelled, which is done by updating the extra with a quantity of zero

+ Response 501



## Booking Guest Index [/v2/booking/{id}/guest]

+ Parameters

    + id (required, integer, `2`) ... The id of the Booking

### Retrieve a list of Guests for a booking. [GET]

+ Response 200 (application/json)

        [
            {
              "id": 3,
              "name": "John Doe",
              "type": "Adult",
              "age": 23
            },
            {
              "id": 4,
              "name": "Mr Dog Doggerson VII",
              "type": "Pet",
              "pettype": "Dog",
              "petbreed": "Labradoodlepoodlewoodle"
            }
          ]

### Add a new Guest to a Booking [POST]
The following fields should be provided in the POST array

* ```name``` Name of the Guest
* ```guesttype``` Adult, Child, Infant etc
* ```guestagerangeid``` Id of the AgeRange of the guest (optional)
* ```age``` Age of the guest in years (optional)
* ```yearofbirth``` Year guest was born (optional)
* ```guestagerangeid``` Id of the AgeRange of the guest (optional)
* ```pettype``` The pet type (optional, for guesttype=Pet only)
* ```petbreed``` The pet breed (optional, for guesttype=Pet only)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/booking/2/guest/4

## Booking Guest [/v2/booking/{id}/guest/{id2}]

+ Parameters

    + id (required, integer, `2`) ... The id of the Booking
    + id2 (required, integer, `3`) ... The id of the BookingGuest

### Gets the details of a Booking Guest [GET]

+ Response 200 (application/json)

        {
            "id": 3,
            "name": "John Doe",
            "type": "Adult",
            "age": 23
          }

### Update a Booking Guest [PUT]

+ Request (application/x-www-form-urlencoded)

        xxx=yyy

+ Response 204

### Deletes a Guest from a Booking [DELETE]

+ Response 204




## Booking History Index [/v2/booking/{id}/history]

### Get all history for a booking [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the booking

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 2,
            "page": 1,
            "count": 2,
            "limit": 10,
            "time": 0,
            "orderBy": null,
            "filter": "entityType=Booking:entityId=1",
            "previous": null,
            "next": null,
            "elements": [
              {
                "actor": {
                  "id": 2,
                  "type": "TabsUser",
                  "actorcode": "",
                  "created": "2017-03-29",
                  "updated": "",
                  "language": {
                    "id": 1,
                    "code": "EN",
                    "name": "English"
                  },
                  "inactive": false,
                  "firstname": "Dummy OAuth",
                  "surname": "User",
                  "title": "Mr",
                  "salutation": "Dummy",
                  "companyname": "",
                  "vatnumber": "",
                  "companynumber": "",
                  "contactdetails": [
                    {
                      "id": 90,
                      "type": "C",
                      "contactmethodtype": "Email",
                      "contactmethodsubtype": "Main",
                      "value": "support@tabs-software.co.uk",
                      "comment": "",
                      "invalid": false,
                      "invaliddatetime": "",
                      "invalidreason": "",
                      "contactpreferences": [],
                      "dedupekey": ""
                    }
                  ],
                  "bankaccounts": [],
                  "bacsbankaccount": {},
                  "documents": [],
                  "mergedinto": "",
                  "potentialduplicates": [],
                  "mergedactors": [],
                  "accountingreference": "",
                  "tabsusername": "dummyoauthuser",
                  "roles": [],
                  "tabscode": "DUMMY",
                  "settings": [],
                  "defaultbrandinggroup": [],
                  "defaultbookingbrand": []
                },
                "client": {
                  "id": 1,
                  "name": "tabs 2",
                  "url": "http://www.tabs-software.co.uk"
                },
                "datetime": "2016-07-06 14:13:31",
                "description": "Updated party size",
                "parameters": {
                  "adults": 2,
                  "children": 2,
                  "infants": 0
                }
              },
              {
                "actor": {
                  "id": 2,
                  "type": "TabsUser",
                  "actorcode": "",
                  "created": "2017-03-29",
                  "updated": "",
                  "language": {
                    "id": 1,
                    "code": "EN",
                    "name": "English"
                  },
                  "inactive": false,
                  "firstname": "Dummy OAuth",
                  "surname": "User",
                  "title": "Mr",
                  "salutation": "Dummy",
                  "companyname": "",
                  "vatnumber": "",
                  "companynumber": "",
                  "contactdetails": [
                    {
                      "id": 90,
                      "type": "C",
                      "contactmethodtype": "Email",
                      "contactmethodsubtype": "Main",
                      "value": "support@tabs-software.co.uk",
                      "comment": "",
                      "invalid": false,
                      "invaliddatetime": "",
                      "invalidreason": "",
                      "contactpreferences": [],
                      "dedupekey": ""
                    }
                  ],
                  "bankaccounts": [],
                  "bacsbankaccount": {},
                  "documents": [],
                  "mergedinto": "",
                  "potentialduplicates": [],
                  "mergedactors": [],
                  "accountingreference": "",
                  "tabsusername": "dummyoauthuser",
                  "roles": [],
                  "tabscode": "DUMMY",
                  "settings": [],
                  "defaultbrandinggroup": [],
                  "defaultbookingbrand": []
                },
                "client": {
                  "id": 1,
                  "name": "tabs 2",
                  "url": "http://www.tabs-software.co.uk"
                },
                "datetime": "2016-07-06 14:12:04",
                "description": "Booking created",
                "parameters": {
                  "fromdate": "2016-10-01",
                  "todate": "2016-10-08",
                  "adults": 2,
                  "children": 0,
                  "infants": 0,
                  "pets": 0
                }
              }
            ]
          }




## Booking Note List [/v2/booking/{id}/note{?page,limit}]
### Retrieve a list of Booking Notes. [GET]
booking/1/note?page=1&limit=25

+ Parameters

    + id (required, integer, `1`) ... The id of the Booking
    + page (optional, integer, `1`) ... The page of results to return
    + limit (optional, integer, `25`) ... The number of results to return

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 1,
            "page": 1,
            "count": 1,
            "limit": 25,
            "time": 0,
            "orderBy": null,
            "filter": "",
            "previous": null,
            "next": null,
            "elements": [
                {
                    "id": 1,
                    "note": {
                        "id": 1,
                        "notetype": {
                            "id": 1,
                            "notetype": "Warning",
                            "description": "A warning which should be highlighted to the user",
                            "donotdelete": true
                        },
                        "subject": "Lorem ipsum",
                        "created": "2014-08-09 12:34:56",
                        "createdby": {
                            "actorid": 1,
                            "actortype": "TabsUser",
                            "actor": "/v2/tabsuser/1",
                            "name": "system system"
                        },
                        "createdfromscreen": "Booking",
                        "visibletocustomer": false,
                        "visibletoowner": false,
                        "visibletocleaner": false,
                        "visibletokeyholder": false,
                        "highlight": false,
                        "pin": true,
                        "private": true,
                        "completed": "",
                        "completedby": [],
                        "archived": "",
                        "archivedby": [],
                        "notetexts": [
                            {
                                "id": 1,
                                "createdby": {
                                    "actorid": 1,
                                    "actortype": "TabsUser",
                                    "actor": "/v2/tabsuser/1",
                                    "name": "system system"
                                },
                                "created": "2014-08-09 12:34:56",
                                "notetext": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut non orci id quam pharetra mattis sit amet id nisl.",
                                "actioned": "2020-02-01 12:21:45",
                                "actionedby": {
                                    "actorid": 1,
                                    "actortype": "TabsUser",
                                    "actor": "/v2/tabsuser/1",
                                    "name": "system system"
                                },
                                "followup": "2020-01-01 12:01:45"
                            },
                            {
                                "id": 2,
                                "createdby": {
                                    "actorid": 1,
                                    "actortype": "TabsUser",
                                    "actor": "/v2/tabsuser/1",
                                    "name": "system system"
                                },
                                "created": "2014-08-09 12:37:56",
                                "notetext": "Donec nec eros vitae dui tincidunt convallis. Ut neque diam, consequat a nisi quis, aliquet imperdiet lacus.",
                                "actioned": "",
                                "actionedby": []
                            }
                        ],
                        "noteactors": [
                            {
                                "actorid": 1,
                                "actortype": "TabsUser",
                                "actor": "/v2/tabsuser/1",
                                "name": "system system",
                                "id": 2,
                                "notifychanges": false,
                                "reminderdate": "2017-08-23"
                            },
                            {
                                "actorid": 7,
                                "actortype": "Customer",
                                "actor": "/v2/customer/7",
                                "name": "Thomas Thornley",
                                "id": 1,
                                "notifychanges": true,
                                "reminderdate": "2016-10-15"
                            }
                        ],
                        "bookings": [
                            {
                                "bookingnoteid": 1,
                                "bookingid": 1,
                                "booking": "/v2/booking/1",
                                "fromdate": "2026-10-01",
                                "todate": "2026-10-08"
                            }
                        ],
                        "properties": [
                            {
                                "propertynoteid": 2,
                                "propertyid": 1,
                                "property": "/v2/property/1",
                                "name": "Angler Cottage",
                                "tabspropref": "1105",
                                "fromdate": "2015-07-25",
                                "todate": "2015-08-02",
                                "requiresconfirmation": false,
                                "showonweb": false,
                                "showonavailability": true
                            },
                            {
                                "propertynoteid": 1,
                                "propertyid": 2,
                                "property": "/v2/property/2",
                                "name": "Reedmere",
                                "tabspropref": "1212",
                                "fromdate": "2015-06-30",
                                "todate": "2015-07-15",
                                "requiresconfirmation": true,
                                "showonweb": true,
                                "showonavailability": false
                            }
                        ],
                        "actors": [
                            {
                                "actorid": 7,
                                "actortype": "Customer",
                                "actor": "/v2/customer/7",
                                "name": "Thomas Thornley",
                                "actornoteid": 1
                            }
                        ],
                        "workorders": [
                            {
                                "workordernoteid": 2,
                                "workorderid": 3,
                                "workorder": "/v2/workorder/3"
                            }
                        ]
                    },
                    "booking": "/v2/booking/1"
                }
            ]
        }

## BookingNote Index [/v2/bookingnote]
### Get all BookingNotes [GET]
Not implemented - notes included in /v2/{booking}/{id}

+ Response 501

### Add an existing Note to an Booking[POST]
The following fields should be provided in the POST array:

* ```bookingid``` Id of Note to add to the Booking
* ```noteid``` Id of Note to add to the Booking

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/bookingnote/1

## BookingNote Detail [/v2/bookingnote/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the BookingNote to get

### Retrieve an individual BookingNote [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "note": {
                "id": 1,
                "notetype": {
                    "id": 1,
                    "notetype": "Warning",
                    "description": "A warning which should be highlighted to the user",
                    "donotdelete": true
                },
                "subject": "Lorem ipsum",
                "created": "2014-08-09 12:34:56",
                "createdby": {
                    "actorid": 1,
                    "actortype": "TabsUser",
                    "actor": "/v2/tabsuser/1",
                    "name": "system system"
                },
                "createdfromscreen": "Booking",
                "visibletocustomer": false,
                "visibletoowner": false,
                "visibletocleaner": false,
                "visibletokeyholder": false,
                "highlight": false,
                "pin": true,
                "private": true,
                "completed": "",
                "completedby": [],
                "archived": "",
                "archivedby": [],
                "notetexts": [
                    {
                        "id": 1,
                        "createdby": {
                            "actorid": 1,
                            "actortype": "TabsUser",
                            "actor": "/v2/tabsuser/1",
                            "name": "system system"
                        },
                        "created": "2014-08-09 12:34:56",
                        "notetext": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut non orci id quam pharetra mattis sit amet id nisl.",
                        "actioned": "2020-02-01 12:21:45",
                        "actionedby": {
                            "actorid": 1,
                            "actortype": "TabsUser",
                            "actor": "/v2/tabsuser/1",
                            "name": "system system"
                        },
                        "followup": "2020-01-01 12:01:45"
                    },
                    {
                        "id": 2,
                        "createdby": {
                            "actorid": 1,
                            "actortype": "TabsUser",
                            "actor": "/v2/tabsuser/1",
                            "name": "system system"
                        },
                        "created": "2014-08-09 12:37:56",
                        "notetext": "Donec nec eros vitae dui tincidunt convallis. Ut neque diam, consequat a nisi quis, aliquet imperdiet lacus.",
                        "actioned": "",
                        "actionedby": []
                    }
                ],
                "noteactors": [
                    {
                        "actorid": 1,
                        "actortype": "TabsUser",
                        "actor": "/v2/tabsuser/1",
                        "name": "system system",
                        "id": 2,
                        "notifychanges": false,
                        "reminderdate": "2017-08-23"
                    },
                    {
                        "actorid": 7,
                        "actortype": "Customer",
                        "actor": "/v2/customer/7",
                        "name": "Thomas Thornley",
                        "id": 1,
                        "notifychanges": true,
                        "reminderdate": "2016-10-15"
                    }
                ],
                "bookings": [
                    {
                        "bookingnoteid": 1,
                        "bookingid": 1,
                        "booking": "/v2/booking/1",
                        "fromdate": "2026-10-01",
                        "todate": "2026-10-08"
                    }
                ],
                "properties": [
                    {
                        "propertynoteid": 2,
                        "propertyid": 1,
                        "property": "/v2/property/1",
                        "name": "Angler Cottage",
                        "tabspropref": "1105",
                        "fromdate": "2015-07-25",
                        "todate": "2015-08-02",
                        "requiresconfirmation": false,
                        "showonweb": false,
                        "showonavailability": true
                    },
                    {
                        "propertynoteid": 1,
                        "propertyid": 2,
                        "property": "/v2/property/2",
                        "name": "Reedmere",
                        "tabspropref": "1212",
                        "fromdate": "2015-06-30",
                        "todate": "2015-07-15",
                        "requiresconfirmation": true,
                        "showonweb": true,
                        "showonavailability": false
                    }
                ],
                "actors": [
                    {
                        "actorid": 7,
                        "actortype": "Customer",
                        "actor": "/v2/customer/7",
                        "name": "Thomas Thornley",
                        "actornoteid": 1
                    }
                ],
                "workorders": [
                    {
                        "workordernoteid": 2,
                        "workorderid": 3,
                        "workorder": "/v2/workorder/3"
                    }
                ]
            },
            "booking": "/v2/booking/1"
        }


### Updates the Booking Note for for a given id [PUT]
Not implemented - use /v2/note/{id}
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. e.g.:

        xxx=yyy

+ Response 501

### Removes the Booking from the Note [DELETE]

+ Response 204



## Booking Payment Index [/v2/booking/{id}/payment]

+ Parameters

    + id (required, integer, `8`) ... The id of the booking

### Get all payments for a Booking [GET]

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "booking": "/v2/booking/8",
                "type": "Actor",
                "amount": 74.9,
                "paymentdatetime": "2016-04-12 11:43:05",
                "actor": "/v2/customer/7",
                "madeby": "",
                "unitsperbaseunit": 1.123456
            },
            {
                "id": 4,
                "booking": "/v2/booking/8",
                "type": "Booking",
                "amount": 74.9,
                "paymentdatetime": "2016-04-12 11:43:05",
                "actor": "",
                "madeby": ""
            }
        ]

### Add a Booking to a Payment [POST]

The following fields should be provided in the POST array

* ```type``` The type of booking payment: Booking (from/to Actor), SecurityDeposit (from/to Actor), BookingAndSecurityDeposit (from/to Actor), Swap (between booking and SD).
* ```paymentdatetime``` The date and time of the Payment (optional, default  = now)
* ```actorid``` The id of the Actor the funds are being transferred to or from (required for types Booking, SecurityDeposit, BookingAndSecurityDeposit)
* ```amount``` The total amount to be paid on the booking
* ```bookingamount``` The amount to be paid on basic and extras of the booking (not required except for type BookingAndSecurityDeposit)
* ```securitydepositamount``` The amount to be paid on the security deposit of the booking (not required except for type BookingAndSecurityDeposit)
* ```transferbookingid``` The id of the Booking money is being transferred to (amounts -ve) (if set, type cannot be Swap)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/paymentmethod/1

## Booking Payment Details [/v2/booking/{id}/payment/{id2}]
+ Parameters

    + id (required, integer, `8`) ... The id of the booking
    + id2 (required, integer, `2`) ... The id of the booking payment

### Get a booking payment [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "booking": "/v2/booking/8",
            "type": "Actor",
            "amount": 74.9,
            "paymentdatetime": "2016-04-12 11:43:05",
            "actor": "/v2/customer/7",
            "madeby": "/v2/tabsuser/1",
            "unitsperbaseunit": 1.123456
        }

### Updates a booking payment [PUT]

+ Response 501

### Delete a booking payment [DELETE]

+ Response 501




## BookingPayment Index [/v2/bookingpayment{?page,limit,filter,orderBy}]

+ Parameters

    + page (optional, integer, `1`) ... The page of results to return
    + limit (optional, integer, `2`) ... The number of results to return
    + filter (optional, string, `paymentdatetime=>2016-04-12-11-43-04`) ... The filters to use
    + orderBy (optional, string, `id`) ... The order by clause

### Get a filtered, paginated list of Booking Payments, from multiple bookings & bookings [GET]
bookingpayment?page=1&limit=2&paymentdatetime=>2016-04-12-11-43-04&orderBy=id

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 2,
            "page": 1,
            "count": 2,
            "limit": 2,
            "time": 0,
            "orderBy": "id",
            "filter": "paymentdatetime=>2016-04-12-11-43-04",
            "previous": null,
            "next": null,
            "elements": [
                {
                    "id": 2,
                    "booking": "/v2/booking/8",
                    "type": "Actor",
                    "amount": 74.9,
                    "paymentdatetime": "2016-04-12 11:43:05",
                    "actor": "/v2/customer/7",
                    "madeby": "",
                    "unitsperbaseunit": 1.123456
                },
                {
                    "id": 4,
                    "booking": "/v2/booking/8",
                    "type": "Booking",
                    "amount": 74.9,
                    "paymentdatetime": "2016-04-12 11:43:05",
                    "actor": "",
                    "madeby": ""
                }
            ]
        }

## BookingPayment Options Index [/v2/bookingpayment]
### List bookingpayment filter options [OPTIONS]

+ Response 200

        {
            paymentdatetime: "Payment Date and time"
        }




## Booking PaymentItem Index [/v2/booking/{id}/paymentitem]

+ Parameters

    + id (required, integer, `2`) ... The id of the Booking

### Retrieve a list of PaymentItems for a booking. [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "type": "Booking",
              "owner": "/v2/owner/16",
              "ownername": "Stamp, Ian (Mr)",
              "booking": "/v2/booking/2",
              "bookingbrand": "/v2/bookingbrand/1",
              "fromdate": "2016-10-22",
              "todate": "2016-10-22",
              "description": "Booking: July 16th 2016, Angler Cottage",
              "totalprice": 1146.5,
              "ownerincome": 275.46,
              "agencyincome": 86.35,
              "vatrate": {
                "id": 4,
                "vatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "fromdate": "2011-01-04",
                "todate": "2100-01-01",
                "percentage": 20
              },
              "agencyvat": 12.5,
              "totalbasic": 374.31,
              "totalextras": {
                "ownerincome": 0,
                "agencyincome": 0,
                "agencyvat": 0,
                "total": 0
              },
              "total": {
                "ownerincome": 275.46,
                "agencyincome": 86.35,
                "agencyvat": 12.5,
                "total": 374.31
              },
              "paymentrequired": "None",
              "authorised": "",
              "authorisedby": "",
              "ownerpayment": "/v2/owner/16/payment/2",
              "dontpayowneruntil": "",
              "extras": [],
              "authorisations": [],
              "created": "",
              "createdby": "",
              "reason": ""
            },
            {
              "id": 5,
              "type": "Booking",
              "owner": "/v2/owner/16",
              "ownername": "Stamp, Ian (Mr)",
              "booking": "/v2/booking/2",
              "bookingbrand": "/v2/bookingbrand/3",
              "fromdate": "2017-04-13",
              "todate": "2017-04-13",
              "description": "Booking: July 16th 2016, Angler Cottage",
              "totalprice": 1146.5,
              "ownerincome": 554.1,
              "agencyincome": 117.81,
              "vatrate": {},
              "agencyvat": 28.33,
              "totalbasic": 700.24,
              "totalextras": {
                "ownerincome": 19.5,
                "agencyincome": 43.71,
                "agencyvat": 8.74,
                "total": 71.95
              },
              "total": {
                "ownerincome": 573.6,
                "agencyincome": 161.52,
                "agencyvat": 37.07,
                "total": 772.19
              },
              "paymentrequired": "Balance",
              "authorised": "",
              "authorisedby": "",
              "ownerpayment": "",
              "dontpayowneruntil": "",
              "extras": [
                {
                  "id": 4,
                  "ownerincome": 19.5,
                  "agencyincome": 0,
                  "vatrate": {},
                  "agencyvat": 0,
                  "extra": {
                    "id": 3,
                    "extracode": "HEAT",
                    "extratype": "Booking",
                    "description": "Heating",
                    "brandings": [
                      "/v2/branding/2",
                      "/v2/branding/3",
                      "/v2/branding/4",
                      "/v2/branding/6"
                    ]
                  },
                  "bookingextra": "/v2/booking/2/extra/6"
                },
                {
                  "id": 5,
                  "ownerincome": 0,
                  "agencyincome": 21.21,
                  "vatrate": {},
                  "agencyvat": 4.24,
                  "extra": {
                    "id": 2,
                    "extracode": "CANC",
                    "extratype": "Booking",
                    "description": "Cancellation Scheme",
                    "brandings": [
                      "/v2/branding/1",
                      "/v2/branding/3",
                      "/v2/branding/4",
                      "/v2/branding/6"
                    ]
                  },
                  "bookingextra": "/v2/booking/2/extra/5"
                },
                {
                  "id": 6,
                  "ownerincome": 0,
                  "agencyincome": 22.5,
                  "vatrate": {},
                  "agencyvat": 4.5,
                  "extra": {
                    "id": 1,
                    "extracode": "BKFE",
                    "extratype": "Booking",
                    "description": "Booking Fee",
                    "brandings": [
                      "/v2/branding/1",
                      "/v2/branding/2",
                      "/v2/branding/3",
                      "/v2/branding/4",
                      "/v2/branding/6"
                    ]
                  },
                  "bookingextra": "/v2/booking/2/extra/4"
                }
              ],
              "authorisations": [],
              "created": "",
              "createdby": "",
              "reason": ""
            }
          ]

### Add a new PaymentItem to a Booking [POST]
(Re)create the Payment Items for this Booking, and optionally add a user-defined PaymentItem

The following fields may be provided in the POST array

* ```fromdate``` The date used to determine whether the PaymentItem will be included in an Owner Payment Selection, where the selection is based on 'From Date'
* ```todate``` The date used to determine whether the PaymentItem will be included in an Owner Payment Selection, where the selection is based on 'To Date' (optional, default=fromdate)
* ```description``` A description of the PaymentItem (e.g. reason why being added) (optional, default=booking description)
If 'fromdate' is provided, one or more of the below must also be non-zero:
* ```ownerincome``` The amount to pay the owner (optional, default=0)
* ```agencyincome``` The amount to allocate to the agency (optional, default=0)
* ```agencyvat``` The amount to allocate to agency VAT (optional, default=0)

+ Response 201

    + Headers

            Location: http://plato.apiary.io/v2/booking/3/paymentitem/4

## Booking PaymentItem [/v2/booking/{id}/paymentitem/{id2}]

+ Parameters

    + id (required, integer, `2`) ... The id of the Booking
    + id2 (required, integer, `1`) ... The id of the PaymentItem

### Gets the details of a Booking PaymentItem [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "type": "Booking",
            "owner": "/v2/owner/16",
            "ownername": "Stamp, Ian (Mr)",
            "booking": "/v2/booking/2",
            "bookingbrand": "/v2/bookingbrand/1",
            "fromdate": "2016-10-22",
            "todate": "2016-10-22",
            "description": "Booking: July 16th 2016, Angler Cottage",
            "totalprice": 1146.5,
            "ownerincome": 275.46,
            "agencyincome": 86.35,
            "vatrate": {
              "id": 4,
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "fromdate": "2011-01-04",
              "todate": "2100-01-01",
              "percentage": 20
            },
            "agencyvat": 12.5,
            "totalbasic": 374.31,
            "totalextras": {
              "ownerincome": 0,
              "agencyincome": 0,
              "agencyvat": 0,
              "total": 0
            },
            "total": {
              "ownerincome": 275.46,
              "agencyincome": 86.35,
              "agencyvat": 12.5,
              "total": 374.31
            },
            "paymentrequired": "None",
            "authorised": "",
            "authorisedby": "",
            "ownerpayment": "/v2/owner/16/payment/2",
            "dontpayowneruntil": "",
            "extras": [],
            "authorisations": [],
            "created": "",
            "createdby": "",
            "reason": ""
          }

### Update a Booking PaymentItem [PUT]
Only permitted if the PaymentItem has not been authorised and was created by a tabs user

+ Request (application/x-www-form-urlencoded)

        ownerincome=45.23

+ Response 204

### Deletes a PaymentItem from a Booking [DELETE]
Only permitted if the PaymentItem has not been authorised and was created by a tabs user

+ Response 204




## Booking Security Deposits Index [/v2/booking/{id}/securitydeposit]

+ Parameters

    + id (required, integer, `1`) ... The id of the Booking

### Retrieve a list of Security Deposits for a booking. [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "amount": 150,
              "paid": 100,
              "refunded": 0,
              "balance": 100,
              "outstanding": 50,
              "dueindate": "2026-09-17",
              "paiddate": "",
              "withheld": 20,
              "refundable": 80,
              "held": false,
              "dueoutdate": "2026-10-15",
              "refundeddate": "",
              "ownerchargecode": {
                "id": 1,
                "ownerchargecode": "ADM",
                "description": "Administration Charge",
                "vatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "recharge": false
              },
              "ownerchargeamount": 21.43,
              "ownercharge": "",
              "holds": [
                {
                  "id": 1,
                  "helddate": "2016-06-21",
                  "helduntildate": "2016-06-21",
                  "reason": "Damage to carpet",
                  "tabsuser": "/v2/tabsuser/24"
                }
              ]
            }
          ]

### Add new Security Deposit to a Booking [POST]
The following fields should be provided in the POST array

* ```amount``` The value of deposit required
* ```dueindate``` The date the deposit is due to be paid by the customer
* ```dueoutdate``` The date the deposit is due to be returned to the customer
* ```ownerchargecodeid``` Id of the Owner Charge Code to be used in the owner charge (optional, unless ownerchargeamount is specified)
* ```ownerchargeamount``` The amount of the owner charge (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/booking/3/securitydeposit/4

## Booking Security Deposit [/v2/booking/{id}/securitydeposit/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Booking
    + id2 (required, integer, `1`) ... The id of the BookingSecurityDeposit

### Get Security Deposit for a Booking [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "amount": 150,
            "paid": 100,
            "refunded": 0,
            "balance": 100,
            "outstanding": 50,
            "dueindate": "2026-09-17",
            "paiddate": "",
            "withheld": 20,
            "refundable": 80,
            "held": false,
            "dueoutdate": "2026-10-15",
            "refundeddate": "",
            "ownerchargecode": {
              "id": 1,
              "ownerchargecode": "ADM",
              "description": "Administration Charge",
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "recharge": false
            },
            "ownerchargeamount": 21.43,
            "ownercharge": "",
            "holds": [
              {
                "id": 1,
                "helddate": "2016-06-21",
                "helduntildate": "2016-06-21",
                "reason": "Damage to carpet",
                "tabsuser": "/v2/tabsuser/24"
              }
            ]
          }

### Updates a Security Deposit record for a Booking [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output. eg. ```amount```, ```dueindate```, etc. Any ommited fields will be left as is.

+ Response 204

### Deletes a Security Deposit record for a Booking [DELETE]

+ Response 204




## Booking Supplier Index [/v2/booking/{id}/supplier]

+ Parameters

    + id (required, integer, `3`) ... The id of the Booking

### Retrieve a list of Suppliers for a booking. [GET]

+ Response 200 (application/json)

        [
            {
              "id": 2,
              "service": {
                "id": 3,
                "name": "Linen",
                "description": "Providing linen",
                "donotmodify": true,
                "vatband": [],
                "datetouse": "fromdate",
                "customerbookings": true,
                "ownerbookings": true
              },
              "actor": "/v2/supplier/23",
              "autoadded": true,
              "markedcompletebyactor": "/v2/tabsuser/24",
              "completeddatetime": "2016-08-05 12:22:33",
              "ownercharge": {},
              "workorders": [],
              "cancelledbyactor": "",
              "cancelleddatetime": "",
              "booking": "/v2/booking/3"
            },
            {
              "id": 3,
              "service": {
                "id": 4,
                "name": "Towels",
                "description": "Collecting and laundering towels",
                "donotmodify": true,
                "vatband": [],
                "datetouse": "todate",
                "customerbookings": true,
                "ownerbookings": true
              },
              "actor": "/v2/supplier/23",
              "autoadded": false,
              "markedcompletebyactor": "",
              "completeddatetime": "",
              "ownercharge": {},
              "workorders": [],
              "cancelledbyactor": "/v2/tabsuser/24",
              "cancelleddatetime": "2016-08-06 12:35:33",
              "booking": "/v2/booking/3"
            },
            {
              "id": 4,
              "service": {
                "id": 1,
                "name": "Cleaning",
                "description": "Cleaning a property",
                "donotmodify": true,
                "vatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "datetouse": "fromdate",
                "customerbookings": true,
                "ownerbookings": false
              },
              "actor": "/v2/supplier/23",
              "autoadded": false,
              "markedcompletebyactor": "",
              "completeddatetime": "",
              "ownercharge": {},
              "workorders": [],
              "cancelledbyactor": "",
              "cancelleddatetime": "",
              "booking": "/v2/booking/3"
            }
          ]

### Add a new Supplier to a Booking [POST]
The following fields should be provided in the POST array

* ```serviceid``` Id of the Service provided by the Supplier
* ```actorid``` Id of the Actor (usually a supplier) providing the Service
* ```markedcompletebyactorid``` Id of the Actor marking the service as having been completed (optional, unless completeddatetime is supplied)
* ```completeddatetime``` The date and time the service was completed (optional, default = 'now')
* ```cancelledbyactorid``` Id of the Actor cancelling the service (optional, unless cancelledddatetime is supplied)
* ```cancelledddatetime``` The date and time the service was cancelled (optional, default = 'now')

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/booking/2/supplier/4

## Booking Supplier [/v2/booking/{id}/supplier/{id2}]

+ Parameters

    + id (required, integer, `3`) ... The id of the Booking
    + id2 (required, integer, `3`) ... The id of the BookingSupplier

### Gets the details of a Booking Supplier [GET]

+ Response 200 (application/json)

        {
            "id": 3,
            "service": {
              "id": 4,
              "name": "Towels",
              "description": "Collecting and laundering towels",
              "donotmodify": true,
              "vatband": [],
              "datetouse": "todate",
              "customerbookings": true,
              "ownerbookings": true
            },
            "actor": "/v2/supplier/23",
            "autoadded": false,
            "markedcompletebyactor": "",
            "completeddatetime": "",
            "ownercharge": {},
            "workorders": [],
            "cancelledbyactor": "/v2/tabsuser/24",
            "cancelleddatetime": "2016-08-06 12:35:33",
            "booking": "/v2/booking/3"
          }

### Update a Booking Supplier [PUT]

+ Request (application/x-www-form-urlencoded)

        actorid=12

+ Response 204

### Deletes a Supplier from a Booking [DELETE]

+ Response 204




## Booking Suppliers Index [/v2/bookingsuppliers]

### Retrieve a list of Booking Suppliers. [GET]

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 4,
            "page": 1,
            "count": 4,
            "limit": 10,
            "time": 0,
            "orderBy": null,
            "filter": "",
            "previous": null,
            "next": null,
            "elements": [
              {
                "id": 1,
                "service": {
                  "id": 1,
                  "name": "Cleaning",
                  "description": "Cleaning a property",
                  "donotmodify": true,
                  "vatband": {
                    "id": 2,
                    "vatband": "Standard"
                  },
                  "datetouse": "fromdate",
                  "customerbookings": true,
                  "ownerbookings": false
                },
                "actor": "/v2/supplier/20",
                "autoadded": false,
                "markedcompletebyactor": "",
                "completeddatetime": "",
                "ownercharge": {},
                "workorders": [],
                "cancelledbyactor": "",
                "cancelleddatetime": "",
                "booking": "/v2/booking/1"
              },
              {
                "id": 2,
                "service": {
                  "id": 3,
                  "name": "Linen",
                  "description": "Providing linen",
                  "donotmodify": true,
                  "vatband": [],
                  "datetouse": "fromdate",
                  "customerbookings": true,
                  "ownerbookings": true
                },
                "actor": "/v2/supplier/23",
                "autoadded": true,
                "markedcompletebyactor": "/v2/tabsuser/24",
                "completeddatetime": "2016-08-05 12:22:33",
                "ownercharge": {},
                "workorders": [],
                "cancelledbyactor": "",
                "cancelleddatetime": "",
                "booking": "/v2/booking/3"
              },
              {
                "id": 3,
                "service": {
                  "id": 4,
                  "name": "Towels",
                  "description": "Collecting and laundering towels",
                  "donotmodify": true,
                  "vatband": [],
                  "datetouse": "todate",
                  "customerbookings": true,
                  "ownerbookings": true
                },
                "actor": "/v2/supplier/23",
                "autoadded": false,
                "markedcompletebyactor": "",
                "completeddatetime": "",
                "ownercharge": {},
                "workorders": [],
                "cancelledbyactor": "/v2/tabsuser/24",
                "cancelleddatetime": "2016-08-06 12:35:33",
                "booking": "/v2/booking/3"
              },
              {
                "id": 4,
                "service": {
                  "id": 1,
                  "name": "Cleaning",
                  "description": "Cleaning a property",
                  "donotmodify": true,
                  "vatband": {
                    "id": 2,
                    "vatband": "Standard"
                  },
                  "datetouse": "fromdate",
                  "customerbookings": true,
                  "ownerbookings": false
                },
                "actor": "/v2/supplier/23",
                "autoadded": false,
                "markedcompletebyactor": "",
                "completeddatetime": "",
                "ownercharge": {},
                "workorders": [],
                "cancelledbyactor": "",
                "cancelleddatetime": "",
                "booking": "/v2/booking/3"
              }
            ]
          }




## GuestAgeRange Index [/v2/guestagerange]
### Get all Guest Age Ranges [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "agefrom": 0,
                "ageto": 2
            }
        ]

### Add a new GuestAgeRange [POST]
The following fields should be provided in the POST array

* ```guestagerange``` The type of guest

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/guestagerange/2

## GuestAgeRange Detail [/v2/guestagerange/{id}]
### Gets the details of a GuestAgeRange [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the GuestAgeRange to get

+ Response 200 (application/json)

        {
            "id": 1,
            "agefrom": 0,
            "ageto": 2
        }

### Update a GuestAgeRange [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the GuestAgeRange

+ Request (application/x-www-form-urlencoded)

        agefrom=1

+ Response 204

### Deletes a GuestAgeRange [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the GuestAgeRange

+ Response 204




## GuestType Index [/v2/guesttype]
### Get all GuestTypes [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "guesttype": "Adult"
            },
            {
                "id": 2,
                "guesttype": "Child"
            },
            {
                "id": 3,
                "guesttype": "Infant"
            }
        ]

### Add a new GuestType [POST]
The following fields should be provided in the POST array

* ```guesttype``` The type of guest

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/guesttype/2

## GuestType Detail [/v2/guesttype/{id}]
### Gets the details of a GuestType [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the GuestType to get

+ Response 200 (application/json)

        {
            "id": 1,
            "guesttype": "Adult"
        }

### Update a GuestType [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the GuestType

+ Request (application/x-www-form-urlencoded)

        guesttype=teenager

+ Response 204

### Deletes a GuestType [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the GuestType

+ Response 204




## PaymentMethod Index [/v2/paymentmethod]
### Get all Payment Methods [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "paymentmethod": "Cheque",
                "description": "Cheque Payment"
            },
            {
                "id": 2,
                "paymentmethod": "AgencyAdjust",
                "description": "Agency Adjust"
            },
            {
                "id": 3,
                "paymentmethod": "DebitCard",
                "description": "Debit Card"
            },
            {
                "id": 4,
                "paymentmethod": "Cash",
                "description": "Cash"
            },
            {
                "id": 5,
                "paymentmethod": "Voucher",
                "description": "Voucher"
            },
            {
                "id": 6,
                "paymentmethod": "Web",
                "description": "Web Payment"
            }
        ]

### Add a new PaymentMethod [POST]

The following fields should be provided in the POST array

* ```paymentmethod``` The name of the PaymentMethod being added
* ```description``` The description of the PaymentMethod

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/paymentmethod/1

## PaymentMethod Detail [/v2/paymentmethod/{id}]
+ Parameters

    + id (required, integer, `1`) ... The id of the PaymentMethod to get

### Gets the details of a PaymentMethod [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "paymentmethod": "Cheque",
            "description": "Cheque Payment"
        }

### Update a PaymentMethod [PUT]

+ Request (application/x-www-form-urlencoded)

        description=Cheque or postal order

+ Response 204

### Deletes a PaymentMethod [DELETE]

+ Response 204



## SecurityDepositHold Index [/v2/booking/{id}/securitydeposit/{id2}/hold]

+ Parameters

    + id (required, integer, `2`) ... The id of the Booking
    + id2 (required, integer, `2`) ... The id of the BookingSecurityDeposit

### Retrieve a list of security deposit holds. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "helddate": "2016-06-21 10:55:43",
                "helduntildate": "2016-06-21 10:55:43",
                "reason": "Damage to carpet",
                "tabsuser": "/v2/tabsuser/24"
            }
        ]

### Add a new SecurityDepositHold [POST]

The following fields should be provided in the POST array

* ```helddate``` The held date
* ```helduntildate``` The held until date
* ```reason``` The reason
* ```tabsuserid``` The TabsUser id

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/booking/2/securitydeposit/1/hold/1

## SecurityDepositHold Detail [/v2/booking/{id}/securitydeposit/{id2}/hold/{id3}]

+ Parameters

    + id (required, integer, `2`) ... The id of the Booking
    + id2 (required, integer, `2`) ... The id of the BookingSecurityDeposit
    + id3 (required, integer, `2`) ... The id of the SecurityDepositHold

### Gets the details of a SecurityDepositHold [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "helddate": "2016-06-16 15:13:05",
            "helduntildate": "2016-06-16 15:13:05",
            "reason": "Damage to carpet",
            "tabsuser": "/v2/tabsuser/24"
        }

### Update a SecurityDepositHold [PUT]

+ Request (application/x-www-form-urlencoded)

        helddate=2016-06-16 15:13:05

+ Response 204

### Deletes a SecurityDepositHold [DELETE]

+ Response 204



## SecurityDepositWithhold Index [/v2/booking/{id}/securitydeposit/{id2}/withhold]
booking/1/securitydeposit/1/withhold

+ Parameters

    + id (required, integer, `1`) ... The id of the Booking
    + id2 (required, integer, `1`) ... The id of the BookingSecurityDeposit

### Retrieve a list of security deposit withholds. [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "type": "Agency",
              "amount": 10,
              "reason": "Damage to carpet",
              "helddate": "2016-06-21 10:55:43",
              "tabsuser": "/v2/tabsuser/24",
              "bookingextra": "",
              "agency": "/v2/agency/5"
            },
            {
              "id": 6,
              "type": "Owner",
              "amount": 10,
              "reason": "Damage to carpet",
              "helddate": "2016-06-21 10:55:51",
              "tabsuser": "/v2/tabsuser/24",
              "bookingextra": "",
              "ownerchargebooking": "/v2/owner/16/charge/3"
            }
          ]

### Add a new SecurityDepositWithhold [POST]

The following fields should be provided in the POST array

* ```type``` Owner or Agency - indicates who receives the money
* ```amount``` The amount being withheld
* ```reason``` The reason the money is being withheld
* ```helddate``` The date the money was withheld
* ```tabsuserid``` The id of the tabs user adding the withhold
* ```agencyid``` The Agency id (required for type=Agency only)
* ```ownerchargecodeid``` The id of the ownerchargecode to be used (optional, valid for type=Owner only)
* ```extracode``` The code of the Extra to be added to cover the withhold (optional)

For Owner withholds, if an ```ownerchargecodeid``` is supplied, then an OwnerCharge will be added (and
an ```extraid``` should not be supplied).
If no ```ownerchargecodeid``` is supplied, then if an ```extracode``` is supplied, the Extra will be
added to the booking, and a swap payment added to move funds from the SD to the Booking to cover the
cost of the extra.
If no ```extracode``` is supplied then default extra 'SDOW' SD Owner Withhold will be used.

For Agency withholds, if an ```extracode``` is supplied, the Extra will be added to the booking, and
a swap payment added to move funds from the Sd to the Booking to cover the cost of the extra.
If no ```extracode``` is supplied then default extra 'SDAW' SD Agency Withhold will be used.

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/booking/2/securitydeposit/1/withhold/1

## SecurityDepositWithhold Detail [/v2/booking/{id}/securitydeposit/{id2}/withhold/{id3}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Booking
    + id2 (required, integer, `1`) ... The id of the BookingSecurityDeposit
    + id3 (required, integer, `1`) ... The id of the SecurityDepositWithhold

### Gets the details of a SecurityDepositWithhold [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "type": "Agency",
            "amount": 10,
            "reason": "Damage to carpet",
            "helddate": "2016-06-21 10:55:43",
            "tabsuser": "/v2/tabsuser/24",
            "bookingextra": "",
            "agency": "/v2/agency/5"
          }

### Update a SecurityDepositWithhold [PUT]

+ Request (application/x-www-form-urlencoded)

        amount=15

+ Response 204

### Deletes a SecurityDepositWithhold [DELETE]

+ Response 204



# Group Branding

## BookingBrand Index [/v2/bookingbrand]
### Get all BookingBrands [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "code": "MAD",
                "name": "Mardens Devon",
                "agency": "/v2/agency/1"
            },
            {
                "id": 2,
                "code": "MAC",
                "name": "Mardens Cornwall",
                "agency": "/v2/agency/1"
            },
            {
                "id": 3,
                "code": "NOBB",
                "name": "Norfolk Country Cottages",
                "agency": "/v2/agency/2"
            },
            {
                "id": 4,
                "code": "MABB",
                "name": "Marsdens Devon Cottages",
                "agency": "/v2/agency/3"
            },
            {
                "id": 5,
                "code": "CCBB",
                "name": "Completely Cottages",
                "agency": "/v2/agency/4"
            }
        ]

### Add a new BookingBrand [POST]
The following fields should be provided in the POST array

* ```code``` The code of the BookingBrand 
* ```name``` The name of the BookingBrand
* ```agencyid``` The id of the Agency the Booking Brand is related to

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/bookingbrand/2

## BookingBrand Detail [/v2/bookingbrand/{id}]
### Gets the details of a BookingBrand [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the BookingBrand to get

+ Response 200 (application/json)

        {
            "id": 1,
            "code": "MAD",
            "name": "Mardens Devon",
            "agency": "/v2/agency/1"
        }

### Update a BookingBrand [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the BookingBrand

+ Request (application/x-www-form-urlencoded)

        bookingbrand=Norfolk Country Cottages

+ Response 204

### Deletes a BookingBrand [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the BookingBrand

+ Response 204



## MarketingBrand Index [/v2/marketingbrand]
### Get all MarketingBrands [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "code": "MAD",
                "name": "Marsdens Devon",
                "agency": "/v2/agency/1",
                "defaultbookingbrand": "/v2/bookingbrand/1",
                "website": null,
                "email": null
            },
            {
                "id": 2,
                "code": "MAC",
                "name": "Marsdens Cornwall",
                "agency": "/v2/agency/1",
                "defaultbookingbrand": "/v2/bookingbrand/2",
                "website": null,
                "email": null
            },
            {
                "id": 3,
                "code": "NOMM",
                "name": "Norfolk Country Cottages",
                "agency": "/v2/agency/2",
                "defaultbookingbrand": "/v2/bookingbrand/3",
                "website": null,
                "email": null
            },
            {
                "id": 4,
                "code": "MAMM",
                "name": "Marsdens",
                "agency": "/v2/agency/3",
                "defaultbookingbrand": "/v2/bookingbrand/4",
                "website": null,
                "email": null
            },
            {
                "id": 5,
                "code": "CCMM",
                "name": "Completely Cottages",
                "agency": "/v2/agency/4",
                "defaultbookingbrand": "/v2/bookingbrand/5",
                "website": null,
                "email": null
            }
        ]

### Add a new MarketingBrand [POST]
The following fields should be provided in the POST array

* ```code``` The code of the MarketingBrand 
* ```name``` The name of the MarketingBrand
* ```agencyid``` The id of the Agency the Marketing Brand is related to
* ```defaultbookingbrandid``` Id of the default Booking Brand
* ```website``` Brand website
* ```email``` Default contact email address

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/marketingbrand/2

## MarketingBrand Detail [/v2/marketingbrand/{id}]
### Gets the details of a MarketingBrand [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the MarketingBrand to get

+ Response 200 (application/json)

        {
            "id": 1,
            "code": "MAD",
            "name": "Marsdens Devon",
            "agency": "/v2/agency/1",
            "defaultbookingbrand": "/v2/bookingbrand/1",
            "website": null,
            "email": null
        }

### Update a MarketingBrand [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the MarketingBrand

+ Request (application/x-www-form-urlencoded)

        website=nocc.co.uk

+ Response 204

### Deletes a MarketingBrand [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the MarketingBrand

+ Response 204



## MarketingBrand EmailList Index [/v2/marketingbrand/{id}/emaillist]

+ Parameters

    + id (required, integer, `1`) ... The id of the MarketingBrand

### Get all EmailLists for a MarketingBrand [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "listname": "Everyone under the sun",
              "fromdate": "2015-01-01",
              "todate": "2022-12-31"
            }
          ]

### Add a new EmailList to a MarketingBrand [POST]

The following fields should be provided in the POST array

* ```listname``` The name of the list
* ```fromdate``` The date the list is active from
* ```todate``` The date the list is active to

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/marketingbrand/1/emaillist/2

## MarketingBrand EmailList Detail [/v2/marketingbrand/{id}/emaillist/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the MarketingBrand
    + id2 (required, integer, `1`) ... The id of the MarketingBrandEmailList

### Gets the details of a MarketingBrand EmailList [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "listname": "Everyone under the sun",
            "fromdate": "2015-01-01",
            "todate": "2022-12-31"
          }

### Update a MarketingBrand EmailList [PUT]

+ Request (application/x-www-form-urlencoded)

        listname=everyone

+ Response 204

### Deletes a MarketingBrand EmailList [DELETE]

+ Response 204




## BrandingGroup Index [/v2/brandinggroup]
### Get all BrandingGroups [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "code": "SWAA",
                "name": "South West",
                "agency": "/v2/agency/4",
                "workorderssettings": []
            },
            {
                "id": 2,
                "code": "NOAA",
                "name": "Norfolk",
                "agency": "/v2/agency/3",
                "workorderssettings": [
                    "/v2/brandinggroup/2/workorderssettings/1"
                ]
            }
        ]

### Add a new BrandingGroup [POST]
The following fields should be provided in the POST array

* ```code``` The code of the BrandingGroup
* ```name``` The name of the BrandingGroup
* ```agencyid``` The id of the Agency the Booking Brand is related to

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/brandinggroup/2

## BrandingGroup Detail [/v2/brandinggroup/{id}]
### Gets the details of a BrandingGroup [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the BrandingGroup to get

+ Response 200 (application/json)

        {
            "id": 1,
            "code": "SWAA",
            "name": "South West",
            "agency": "/v2/agency/4",
            "workorderssettings": []
        }

### Update a BrandingGroup [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the BrandingGroup

+ Request (application/x-www-form-urlencoded)

        agencyid=47

+ Response 204

### Deletes a BrandingGroup [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the BrandingGroup

+ Response 204



## Branding Index [/v2/branding]
### Get all Brandings [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "brandinggroup": {
                    "id": 1,
                    "code": "SWAA",
                    "name": "South West",
                    "agency": "/v2/agency/5",
                    "workorderssettings": []
                },
                "marketingbrand": {
                    "id": 1,
                    "code": "MAD",
                    "name": "Marsdens Devon",
                    "agency": "/v2/agency/3",
                    "defaultbookingbrand": "/v2/bookingbrand/1",
                    "website": "www.mad.co.uk",
                    "email": "info@mad.co.uk"
                },
                "bookingbrand": {
                    "id": 1,
                    "code": "MAD",
                    "name": "Mardens Devon",
                    "agency": "/v2/agency/3"
                },
                "lettingincomevatband": {
                    "id": 2,
                    "vatband": "Standard"
                },
                "bacsbankaccount": "",
                "bacsoutputtype": null,
                "bacssettings": null,
                "allowbookingonwebuntil": "2099-12-31",
                "showpricingonwebuntil": "2099-12-31"
            },
            {
                "id": 2,
                "brandinggroup": {
                    "id": 1,
                    "code": "SWAA",
                    "name": "South West",
                    "agency": "/v2/agency/5",
                    "workorderssettings": []
                },
                "marketingbrand": {
                    "id": 2,
                    "code": "MAC",
                    "name": "Marsdens Cornwall",
                    "agency": "/v2/agency/3",
                    "defaultbookingbrand": "/v2/bookingbrand/2",
                    "website": null,
                    "email": null
                },
                "bookingbrand": {
                    "id": 2,
                    "code": "MAC",
                    "name": "Mardens Cornwall",
                    "agency": "/v2/agency/3"
                },
                "lettingincomevatband": {
                    "id": 2,
                    "vatband": "Standard"
                },
                "bacsbankaccount": "",
                "bacsoutputtype": null,
                "bacssettings": null,
                "allowbookingonwebuntil": "2099-12-31",
                "showpricingonwebuntil": "2099-12-31"
            },
            {
                "id": 3,
                "brandinggroup": {
                    "id": 2,
                    "code": "NOAA",
                    "name": "Norfolk",
                    "agency": "/v2/agency/4",
                    "workorderssettings": [
                        "/v2/brandinggroup/2/workorderssettings/1"
                    ]
                },
                "marketingbrand": {
                    "id": 3,
                    "code": "NOMM",
                    "name": "Norfolk Country Cottages",
                    "agency": "/v2/agency/4",
                    "defaultbookingbrand": "/v2/bookingbrand/3",
                    "website": "www.norfolk.co.uk",
                    "email": "info@norfolk.co.uk"
                },
                "bookingbrand": {
                    "id": 3,
                    "code": "NOBB",
                    "name": "Norfolk Country Cottages",
                    "agency": "/v2/agency/4"
                },
                "lettingincomevatband": {
                    "id": 2,
                    "vatband": "Standard"
                },
                "bacsbankaccount": "",
                "bacsoutputtype": null,
                "bacssettings": null,
                "allowbookingonwebuntil": "2099-12-31",
                "showpricingonwebuntil": "2099-12-31",
                "petextrabranding": {
                    "id": 11,
                    "extra": {
                        "id": 4,
                        "extracode": "PET",
                        "extratype": "Booking",
                        "description": "Pet charge",
                        "brandings": [
                            "/v2/branding/3"
                        ]
                    }
                }
            },
            {
                "id": 4,
                "brandinggroup": {
                    "id": 1,
                    "code": "SWAA",
                    "name": "South West",
                    "agency": "/v2/agency/5",
                    "workorderssettings": []
                },
                "marketingbrand": {
                    "id": 4,
                    "code": "MAMM",
                    "name": "Marsdens",
                    "agency": "/v2/agency/5",
                    "defaultbookingbrand": "/v2/bookingbrand/4",
                    "website": "www.mabb.co.uk",
                    "email": "info@mabb.co.uk"
                },
                "bookingbrand": {
                    "id": 4,
                    "code": "MABB",
                    "name": "Marsdens Devon Cottages",
                    "agency": "/v2/agency/5"
                },
                "lettingincomevatband": {
                    "id": 2,
                    "vatband": "Standard"
                },
                "bacsbankaccount": "",
                "bacsoutputtype": null,
                "bacssettings": null,
                "allowbookingonwebuntil": "2099-12-31",
                "showpricingonwebuntil": "2099-12-31"
            },
            {
                "id": 5,
                "brandinggroup": {
                    "id": 1,
                    "code": "SWAA",
                    "name": "South West",
                    "agency": "/v2/agency/5",
                    "workorderssettings": []
                },
                "marketingbrand": {
                    "id": 5,
                    "code": "CCMM",
                    "name": "Completely Cottages",
                    "agency": "/v2/agency/6",
                    "defaultbookingbrand": "/v2/bookingbrand/5",
                    "website": "www.comm.co.uk",
                    "email": "info@comm.co.uk"
                },
                "bookingbrand": {
                    "id": 4,
                    "code": "MABB",
                    "name": "Marsdens Devon Cottages",
                    "agency": "/v2/agency/5"
                },
                "lettingincomevatband": {
                    "id": 2,
                    "vatband": "Standard"
                },
                "bacsbankaccount": "",
                "bacsoutputtype": null,
                "bacssettings": null,
                "allowbookingonwebuntil": "2099-12-31",
                "showpricingonwebuntil": "2099-12-31"
            },
            {
                "id": 6,
                "brandinggroup": {
                    "id": 1,
                    "code": "SWAA",
                    "name": "South West",
                    "agency": "/v2/agency/5",
                    "workorderssettings": []
                },
                "marketingbrand": {
                    "id": 5,
                    "code": "CCMM",
                    "name": "Completely Cottages",
                    "agency": "/v2/agency/6",
                    "defaultbookingbrand": "/v2/bookingbrand/5",
                    "website": "www.comm.co.uk",
                    "email": "info@comm.co.uk"
                },
                "bookingbrand": {
                    "id": 5,
                    "code": "CCBB",
                    "name": "Completely Cottages",
                    "agency": "/v2/agency/6"
                },
                "lettingincomevatband": {
                    "id": 2,
                    "vatband": "Standard"
                },
                "bacsbankaccount": "",
                "bacsoutputtype": null,
                "bacssettings": null,
                "allowbookingonwebuntil": "2099-12-31",
                "showpricingonwebuntil": "2099-12-31"
            },
            {
                "id": 7,
                "brandinggroup": {
                    "id": 1,
                    "code": "SWAA",
                    "name": "South West",
                    "agency": "/v2/agency/5",
                    "workorderssettings": []
                },
                "marketingbrand": {
                    "id": 3,
                    "code": "NOMM",
                    "name": "Norfolk Country Cottages",
                    "agency": "/v2/agency/4",
                    "defaultbookingbrand": "/v2/bookingbrand/3",
                    "website": "www.norfolk.co.uk",
                    "email": "info@norfolk.co.uk"
                },
                "bookingbrand": {
                    "id": 3,
                    "code": "NOBB",
                    "name": "Norfolk Country Cottages",
                    "agency": "/v2/agency/4"
                },
                "lettingincomevatband": {
                    "id": 2,
                    "vatband": "Standard"
                },
                "bacsbankaccount": "",
                "bacsoutputtype": null,
                "bacssettings": null,
                "allowbookingonwebuntil": "2099-12-31",
                "showpricingonwebuntil": "2099-12-31"
            }
        ]

### Add a new Branding [POST]
The following fields should be provided in the POST array

* ```brandinggroupid``` The id of the BrandingGroup
* ```bookingbrandid``` The id of the BookingBrand
* ```marketingbrandid``` The id of the MarketingBrand
* ```lettingincomevatbandid``` The id of the VatBand which is to be applied to (agency) letting income
* ```petextrabrandingid``` The id of the ExtraBranding which is the default Pet Extra for the Branding
* ```allowbookingonwebuntildate``` The latest date web bookings can be taken for this Branding (optional)
* ```showpricingonwebuntildate``` The latest date to show pricing on the web for this Branding (optional)
* ```updatepropertybrandings``` Whether the allowbookingonwebuntildate and showpricingonwebuntildate dates on
related Property Brandings should be set null, which would have the effect of aligning them with the Branding
value. (optional, if specified will have no effect unless either allowbookingonwebuntildate and/or
showpricingonwebuntildate are set, and then will only update the dates specified)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/branding/2

## Branding Detail [/v2/branding/{id}]

+ Parameters

    + id (required, integer, `3`) ... The id of the Branding to get

### Gets the details of a Branding [GET]

+ Response 200 (application/json)

        {
            "id": 3,
            "brandinggroup": {
              "id": 2,
              "code": "NOAA",
              "name": "Norfolk",
              "agency": "/v2/agency/4",
              "workorderssettings": [
                "/v2/brandinggroup/2/workorderssettings/1"
              ]
            },
            "marketingbrand": {
              "id": 3,
              "code": "NOMM",
              "name": "Norfolk Country Cottages",
              "agency": "/v2/agency/4",
              "defaultbookingbrand": "/v2/bookingbrand/3",
              "website": "www.norfolk.co.uk",
              "email": "info@norfolk.co.uk"
            },
            "bookingbrand": {
              "id": 3,
              "code": "NOBB",
              "name": "Norfolk Country Cottages",
              "agency": "/v2/agency/4"
            },
            "lettingincomevatband": {
              "id": 2,
              "vatband": "Standard"
            },
            "bacsbankaccount": "",
            "bacsoutputtype": null,
            "bacssettings": null,
            "allowbookingonwebuntil": "2099-12-31",
            "showpricingonwebuntil": "2099-12-31",
            "petextrabranding": {
              "id": 11,
              "extra": {
                "id": 4,
                "extracode": "PET",
                "extratype": "Booking",
                "description": "Pet charge",
                "brandings": [
                  "/v2/branding/3"
                ]
              }
            }
          }

### Update a Branding [PUT]

* ```petextrabrandingid``` The id of the ExtraBranding which is the default Pet Extra for the Branding

+ Request (application/x-www-form-urlencoded)

        petextrabrandingid=4

+ Response 204

### Deletes a Branding [DELETE]

+ Response 204




## Branding Target Index [/v2/branding/{id}/target{?year}]
List targets for properties with a branding

+ Parameters

    + id (required, integer, `3`) ... The id of the Branding
    + year (optional, string, `2016`) ... The year's targets to list

### Get all Targets for a Branding [GET]

+ Response 200 (application/json)

        [
            {
                "id": 3,
                "property": "/v2/property/1",
                "year": 2016,
                "daysbooked": 230
            },
            {
                "id": 1,
                "property": "/v2/property/2",
                "year": 2016,
                "daysbooked": 140
            }
        ]

### Add a new Target to a branding [POST]

+ Response 501


## Branding Target List [/v2/branding/{id}/target/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Branding
    + id2 (required, integer, `1`) ... The id of the BrandingTarget 

### Get the details of a Branding Target [GET]

+ Response 501

### Update a Branding Target [PUT]

+ Response 501

### Delete a Branding Target [DELETE]

+ Response 501


## Branding Copy Targets [/v2/branding/{id}/copytargets]
Copy targets from one year to another

+ Parameters

    + id (required, integer, `3`) ... The id of the Branding

### Copy targets [POST]
The following fields should be provided in the POST array. 

* ```fromyear``` The year to copy from
* ```toyear``` The year to copy to
* ```addnew``` Whether to add any 'from' targets to the 'to' year
* ```updateexisting``` Whether to update matching 'to' and 'from' records
* ```deleteexisting``` Whether to delete 'to' year targets where no 'from' year target exists

+ Response 201

    + Headers

            Location: http://plato.apiary.io/v2/branding/1/target?year=2018



## Branding Managed Activity Index [/v2/branding/{id}/managedactivity]

+ Parameters

    + id (required, integer, `1`) ... The id of the Branding

### Get all Managed Activities for a Branding [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "managedactivity": {
                    "id": 1,
                    "name": "Cleaning",
                    "description": "Cleaning a property",
                    "donotmodify": true
                },
                "fromdate": "2016-01-01",
                "todate": "2016-12-31",
                "role": {
                    "id": 3,
                    "name": "Cleaner",
                    "donotdelete": true
                }
            },
            {
                "id": 2,
                "managedactivity": {
                    "id": 2,
                    "name": "Keyholder",
                    "description": "Being the keyholder for a property",
                    "donotmodify": true
                },
                "fromdate": "2016-01-01",
                "todate": "2016-12-31",
                "role": {
                    "id": 4,
                    "name": "Keyholder",
                    "donotdelete": true
                }
            }
        ]

### Add a new Managed Activity to a Branding [POST]

The following fields should be provided in the POST array

* ```managedactivityid``` The id of the activity to be managed
* ```fromdate``` The date the role starts managing the activity
* ```todate``` The date the role finishes managing the activity
* ```roleid``` The id of the role which will manage the activity

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/branding/1/managedactivity/2

## Branding Managed Activity Detail [/v2/branding/{id}/managedactivity/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Branding
    + id2 (required, integer, `2`) ... The id of the BrandingManagedActivity 

### Gets the details of a Branding ManagedActivity [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "managedactivity": {
                "id": 2,
                "name": "Keyholder",
                "description": "Being the keyholder for a property",
                "donotmodify": true
            },
            "fromdate": "2016-01-01",
            "todate": "2016-12-31",
            "role": {
                "id": 4,
                "name": "Keyholder",
                "donotdelete": true
            }
        }

### Update a Branding ManagedActivity [PUT]

+ Request (application/x-www-form-urlencoded)

        subtract=true

+ Response 204

### Deletes a Branding Managed Activity [DELETE]

+ Response 204



## BrandingGroup Work Orders Settings Index [/v2/brandinggroup/{id}/workorderssettings]

+ Parameters

    + id (required, integer, `2`) ... The id of the brandinggroup

### Get all BrandingGroup Work Orders Settings [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "ownerchargemarkuppercent": 10,
                "showchargesseparately": false,
                "commissionongross": true,
                "printadviceonplain": true,
                "sendcompletionadvice": false,
                "sendcompletionadvicecanchange": true,
                "defaultinvoiceto": "Owner",
                "includeidonstatement": true
            }
        ]

### Add a new BrandingGroup Work Orders Settings [POST]
The following fields should be provided in the POST array

* ```ownerchargemarkuppercent``` The owner markup percentage
* ```showchargesseparately``` Show charges separately
* ```commissionongross``` Is commission on the gross amount (false for net)
* ```printadviceonplain``` Should the advice be printed on plain paper (false for headed)
* ```sendcompletionadvice``` Send advice on completion of work order
* ```sendcompletionadvicecanchange``` Whether the user can override the sendcompletionadvice setting
* ```defaultinvoiceto``` Who will be paying for the work by default e.g. Owner
* ```includeidonstatement``` Include the work order id on the statement

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/brandinggroup/2/workorderssettings/1

## BrandingGroup Work Orders Settings Detail [/v2/brandinggroup/{id}/workorderssettings/{id2}]

+ Parameters

    + id (required, integer, `2`) ... The id of the BrandingGroup to get
    + id2 (required, integer, `1`) ... The id of the Work Orders Settings to get

### Gets the details of BrandingGroup Work Orders Settings [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "ownerchargemarkuppercent": 10,
            "showchargesseparately": false,
            "commissionongross": true,
            "printadviceonplain": true,
            "sendcompletionadvice": false,
            "sendcompletionadvicecanchange": true,
            "defaultinvoiceto": "Owner",
            "includeidonstatement": true
        }

### Update BrandingGroup Work Orders Settings [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output.

    e.g. ownerchargemarkuppercent=12.80

+ Response 204

### Deletes BrandingGroup Work Orders Settings [DELETE]

+ Response 204



# Group Brochures

## Brochures [/v2/brochure]
### List brochures [GET]
Retrieves a list of brochures

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "marketingbrand": "/v2/marketingbrand/3",
                "name": "NO Brochure 2014",
                "year": 2014,
                "orderfromdate": "2013-09-01",
                "ordertodate": "2014-12-31",
                "availablefromdate": "2013-09-01",
                "weight": 1,
                "cost": 3,
                "code": "NO2014"
            },
            {
                "id": 2,
                "marketingbrand": "/v2/marketingbrand/4",
                "name": "Marsdens Brochure 2014",
                "year": 2014,
                "orderfromdate": "2013-09-01",
                "ordertodate": "2014-12-31",
                "availablefromdate": "2013-09-01",
                "weight": 1,
                "cost": 3,
                "code": "NO2014"
            },
            {
                "id": 3,
                "marketingbrand": "/v2/marketingbrand/5",
                "name": "Completely Brochure 2014",
                "year": 2014,
                "orderfromdate": "2013-09-01",
                "ordertodate": "2014-12-31",
                "availablefromdate": "2013-09-01",
                "weight": 1,
                "cost": 3,
                "code": "CO2014"
            }
        ]

### Adds a brochure [POST]

* ```marketingbrand``` The Marketing Brand the brochure is for
* ```name``` The name of the brochure
* ```year``` The holiday year the brochure covers
* ```orderfromdate``` The earliest date the brochure can be ordered (optional)
* ```ordertodate``` The latest date the brochure can be ordered (optional)
* ```availablefromdate``` The date the brcohure is available from (optional)
* ```weight``` The weight of the brochure (optional)
* ```cost``` The cost of the brochure (optional)
* ```code``` The legacy Brochure Code (optional)

+ Response 204


## Brochure [/v2/brochure/{id}]

+ Parameters

    + id (required, integer, `1`) ...  Id of the brochure to get details of

### Get details of a brochure [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "marketingbrand": "/v2/marketingbrand/3",
            "name": "NO Brochure 2014",
            "year": 2014,
            "orderfromdate": "2013-09-01",
            "ordertodate": "2014-12-31",
            "availablefromdate": "2013-09-01",
            "weight": 1,
            "cost": 3,
            "code": "NO2014"
        }

### Update a brochure [PUT]
+ Request (application/x-www-form-urlencoded)

        name=New Brochure Name

+ Response 204


### Delete a brochure [DELETE]

+ Response 204



## Brochure Properties [/v2/brochure/{id}/property]
+ Parameters

    + id (required, integer, `1`) ...  Id of the brochure to get properties for

### Get a list of properties [GET]

+ Response 200

        [
            {
                "id": 1,
                "property": "/v2/property/1",
                "page": 24,
                "sequence": 0,
                "prominence": 0
            },
            {
                "id": 2,
                "property": "/v2/property/2",
                "page": 22,
                "sequence": 0,
                "prominence": 0
            }
        ]

### Add a property to a brochure [POST]
Implemented as /property/{id}/marketingbrand/{id2}/brochure

+ Response 501


## Brochure Property [/v2/brochure/{id}/property/{id2}]
Implemented as /property/{id}/marketingbrand/{id2}/brochure/{id3}
+ Parameters

    + id (required, integer, `1`) ...  Id of the brochure that is being propertyed
    + id2 (required, integer, `1`) ... Id of the brochure property that is being propertyed

### Gets detail of a brochure property [GET]
Not implemented

+ Response 501

### Update a brochure property [PUT]
Not implemented

+ Response 501

### Delete a brochure property [DELETE]
Not implemented

+ Response 501



## Brochure Requests [/v2/brochure/{id}/request]

+ Parameters

    + id (required, integer, `1`) ...  Id of the brochure to get requests for

### Get a list of requests [GET]

+ Response 200

        [
            {
                "id": 2,
                "customer": {
                    "id": 8,
                    "type": "Customer",
                    "actorcode": "",
                    "created": "2017-05-15",
                    "updated": "",
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "inactive": false,
                    "firstname": "Thomas",
                    "surname": "Thornley",
                    "title": "Mr",
                    "salutation": "Tom",
                    "companyname": "Norfolk Country Cottages",
                    "vatnumber": "1234567890123456",
                    "companynumber": "123456789012",
                    "contactdetails": [
                        {
                            "id": 4,
                            "type": "F",
                            "contactmethodtype": "Phone",
                            "contactmethodsubtype": "",
                            "countrycode": "123",
                            "subscribernumber": "1603888999",
                            "extension": "",
                            "comment": "",
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [],
                            "dedupekey": "ph-123-1603888999"
                        },
                        {
                            "id": 5,
                            "type": "C",
                            "contactmethodtype": "Email",
                            "contactmethodsubtype": "",
                            "value": "support@tabs-software.co.uk",
                            "comment": "",
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [
                                {
                                    "id": 3,
                                    "branding": "/v2/branding/1",
                                    "rolereason": {
                                        "id": 1,
                                        "role": {
                                            "id": 1,
                                            "name": "Customer",
                                            "donotdelete": true
                                        },
                                        "reason": {
                                            "id": 1,
                                            "name": "Booking Confirmation",
                                            "donotdelete": true
                                        },
                                        "donotdelete": true,
                                        "required": true
                                    },
                                    "priority": 1,
                                    "donotuse": false
                                }
                            ],
                            "dedupekey": "ot-support@tabs-software.co.uk"
                        },
                        {
                            "id": 6,
                            "type": "P",
                            "contactmethodsubtype": "",
                            "address": {
                                "id": 7,
                                "line1": "99 Banana Street",
                                "line2": "",
                                "line3": "",
                                "town": "Fictional Town",
                                "county": "Norfolk",
                                "postcode": "NR22 3JG",
                                "country": {
                                    "alpha2": "GB",
                                    "alpha3": "GBR",
                                    "name": "United Kingdom"
                                },
                                "longitude": "1.652729",
                                "latitude": "52.617954",
                                "geohash": ""
                            },
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [
                                {
                                    "id": 4,
                                    "branding": "/v2/branding/1",
                                    "rolereason": {
                                        "id": 1,
                                        "role": {
                                            "id": 1,
                                            "name": "Customer",
                                            "donotdelete": true
                                        },
                                        "reason": {
                                            "id": 1,
                                            "name": "Booking Confirmation",
                                            "donotdelete": true
                                        },
                                        "donotdelete": true,
                                        "required": true
                                    },
                                    "priority": 1,
                                    "donotuse": false
                                }
                            ],
                            "dedupekey": "po-nr223jg"
                        }
                    ],
                    "bankaccounts": [],
                    "bacsbankaccount": {},
                    "documents": [
                        {
                            "id": 2,
                            "created": "2017-05-15 15:29:38",
                            "document": {
                                "id": 1,
                                "name": "Tabs 2 roadmap.pdf",
                                "filename": "Tabs 2 roadmap.pdf",
                                "timeadded": "2014-01-01 12:00:00",
                                "weight": 0,
                                "private": false,
                                "description": "A document",
                                "mimetype": {
                                    "id": 1,
                                    "name": "application/pdf",
                                    "shortname": "pdf"
                                },
                                "file": "/v2/file/1"
                            }
                        }
                    ],
                    "mergedinto": "",
                    "potentialduplicates": [
                        "/v2/potentialduplicate/1"
                    ],
                    "mergedactors": [
                        "/v2/customer/9"
                    ],
                    "accountingreference": "",
                    "tabscode": "CUS5678",
                    "defaultbrandinggroup": [],
                    "defaultbookingbrand": [],
                    "defaultbranding": []
                },
                "emailoptin": false,
                "sourcemarketingbrand": {
                    "id": 4,
                    "source": {
                        "id": 3,
                        "sourcecode": "COL",
                        "description": "Cornish Life",
                        "showonweb": true,
                        "sourcecategory": {
                            "id": 2,
                            "sourcecategory": "Magazines"
                        },
                        "sourcemarketingbrands": [
                            {
                                "id": 4,
                                "marketingbrand": {
                                    "id": 4,
                                    "code": "MAMM",
                                    "name": "Marsdens",
                                    "agency": "/v2/agency/5",
                                    "defaultbookingbrand": "/v2/bookingbrand/4",
                                    "website": "www.mabb.co.uk",
                                    "email": "info@mabb.co.uk"
                                },
                                "fromdate": "2016-03-01",
                                "todate": "2020-12-31"
                            },
                            {
                                "id": 5,
                                "marketingbrand": {
                                    "id": 5,
                                    "code": "CCMM",
                                    "name": "Completely Cottages",
                                    "agency": "/v2/agency/6",
                                    "defaultbookingbrand": "/v2/bookingbrand/5",
                                    "website": "www.comm.co.uk",
                                    "email": "info@comm.co.uk"
                                },
                                "fromdate": "2016-03-01",
                                "todate": "2020-12-31"
                            },
                            {
                                "id": 6,
                                "marketingbrand": {
                                    "id": 5,
                                    "code": "CCMM",
                                    "name": "Completely Cottages",
                                    "agency": "/v2/agency/6",
                                    "defaultbookingbrand": "/v2/bookingbrand/5",
                                    "website": "www.comm.co.uk",
                                    "email": "info@comm.co.uk"
                                },
                                "fromdate": "2016-02-01",
                                "todate": "2016-02-28"
                            }
                        ]
                    },
                    "marketingbrand": {
                        "id": 4,
                        "code": "MAMM",
                        "name": "Marsdens",
                        "agency": "/v2/agency/5",
                        "defaultbookingbrand": "/v2/bookingbrand/4",
                        "website": "www.mabb.co.uk",
                        "email": "info@mabb.co.uk"
                    },
                    "fromdate": "2016-03-01",
                    "todate": "2020-12-31"
                },
                "requestdatetime": "2016-10-03 20:00:22",
                "processeddatetime": "2016-10-31 22:23:57",
                "tabsuser": null,
                "brochure": "/v2/brochure/1"
            }
        ]

### Request a brochure [POST]
The following fields should be provided in the POST array

* ```customerid``` Id of the customer requesting the brochure
* ```emailoptin``` Whether they opted in to the email list
* ```sourcemarketingbrandid``` Id of the marketing brand source (optional)
* ```requestdatetime``` Date and time the request was made (optional, default = now)
* ```processeddatetime``` Date and time the request was processed (optional)
* ```tabsuserid```  Id of the tabs user processing the request (optional)

+ Response 204


## Brochure Request [/v2/brochure/{id}/request/{id2}]

+ Parameters

    + id (required, integer, `1`) ...  Id of the brochure that is being requested
    + id2 (required, integer, `2`) ... Id of the brochure request that is being requested

### Gets detail of a brochure request [GET]

+ Response 200

        {
            "id": 2,
            "customer": {
                "id": 8,
                "type": "Customer",
                "actorcode": "",
                "created": "2017-04-24",
                "updated": "",
                "language": {
                    "id": 1,
                    "code": "EN",
                    "name": "English"
                },
                "inactive": false,
                "firstname": "Thomas",
                "surname": "Thornley",
                "title": "Mr",
                "salutation": "Tom",
                "companyname": "Norfolk Country Cottages",
                "vatnumber": "1234567890123456",
                "companynumber": "123456789012",
                "contactdetails": [
                    {
                        "id": 4,
                        "type": "F",
                        "contactmethodtype": "Phone",
                        "contactmethodsubtype": "",
                        "countrycode": "123",
                        "subscribernumber": "1603888999",
                        "extension": "",
                        "comment": "",
                        "invalid": false,
                        "invaliddatetime": "",
                        "invalidreason": "",
                        "contactpreferences": [],
                        "dedupekey": "ph-123-1603888999"
                    },
                    {
                        "id": 5,
                        "type": "C",
                        "contactmethodtype": "Email",
                        "contactmethodsubtype": "",
                        "value": "support@tabs-software.co.uk",
                        "comment": "",
                        "invalid": false,
                        "invaliddatetime": "",
                        "invalidreason": "",
                        "contactpreferences": [
                            {
                                "id": 3,
                                "branding": "/v2/branding/1",
                                "rolereason": {
                                    "id": 1,
                                    "role": {
                                        "id": 1,
                                        "name": "Customer",
                                        "donotdelete": true
                                    },
                                    "reason": {
                                        "id": 1,
                                        "name": "Booking Confirmation",
                                        "donotdelete": true
                                    },
                                    "donotdelete": true,
                                    "required": true
                                },
                                "priority": 1,
                                "donotuse": false
                            }
                        ],
                        "dedupekey": "ot-support@tabs-software.co.uk"
                    },
                    {
                        "id": 6,
                        "type": "P",
                        "contactmethodsubtype": "",
                        "address": {
                            "id": 7,
                            "line1": "99 Banana Street",
                            "line2": "",
                            "line3": "",
                            "town": "Fictional Town",
                            "county": "Norfolk",
                            "postcode": "NR22 3JG",
                            "country": {
                                "alpha2": "GB",
                                "alpha3": "GBR",
                                "name": "United Kingdom"
                            },
                            "longitude": "1.652729",
                            "latitude": "52.617954"
                        },
                        "invalid": false,
                        "invaliddatetime": "",
                        "invalidreason": "",
                        "contactpreferences": [
                            {
                                "id": 4,
                                "branding": "/v2/branding/1",
                                "rolereason": {
                                    "id": 1,
                                    "role": {
                                        "id": 1,
                                        "name": "Customer",
                                        "donotdelete": true
                                    },
                                    "reason": {
                                        "id": 1,
                                        "name": "Booking Confirmation",
                                        "donotdelete": true
                                    },
                                    "donotdelete": true,
                                    "required": true
                                },
                                "priority": 1,
                                "donotuse": false
                            }
                        ],
                        "dedupekey": "po-nr223jg"
                    }
                ],
                "bankaccounts": [],
                "bacsbankaccount": {},
                "documents": [
                    {
                        "id": 2,
                        "created": "2017-04-24 15:31:38",
                        "document": {
                            "id": 1,
                            "name": "Tabs 2 roadmap.pdf",
                            "filename": "Tabs 2 roadmap.pdf",
                            "timeadded": "2014-01-01 12:00:00",
                            "weight": 0,
                            "private": false,
                            "description": "A document",
                            "mimetype": {
                                "id": 1,
                                "name": "application/pdf",
                                "shortname": "pdf"
                            },
                            "file": "/v2/file/1"
                        }
                    }
                ],
                "mergedinto": "",
                "potentialduplicates": [
                    "/v2/potentialduplicate/1"
                ],
                "mergedactors": [
                    "/v2/customer/9"
                ],
                "accountingreference": "",
                "tabscode": "CUS5678",
                "defaultbrandinggroup": [],
                "defaultbookingbrand": [],
                "defaultbranding": []
            },
            "emailoptin": false,
            "sourcemarketingbrand": {
                "id": 4,
                "source": {
                    "id": 3,
                    "sourcecode": "COL",
                    "description": "Cornish Life",
                    "showonweb": true,
                    "sourcecategory": {
                        "id": 2,
                        "sourcecategory": "Magazines"
                    },
                    "sourcemarketingbrands": [
                        {
                            "id": 4,
                            "marketingbrand": {
                                "id": 4,
                                "code": "MAMM",
                                "name": "Marsdens",
                                "agency": "/v2/agency/5",
                                "defaultbookingbrand": "/v2/bookingbrand/4",
                                "website": "www.mabb.co.uk",
                                "email": "info@mabb.co.uk"
                            },
                            "fromdate": "2016-03-01",
                            "todate": "2020-12-31"
                        },
                        {
                            "id": 5,
                            "marketingbrand": {
                                "id": 5,
                                "code": "CCMM",
                                "name": "Completely Cottages",
                                "agency": "/v2/agency/6",
                                "defaultbookingbrand": "/v2/bookingbrand/5",
                                "website": "www.comm.co.uk",
                                "email": "info@comm.co.uk"
                            },
                            "fromdate": "2016-03-01",
                            "todate": "2020-12-31"
                        },
                        {
                            "id": 6,
                            "marketingbrand": {
                                "id": 5,
                                "code": "CCMM",
                                "name": "Completely Cottages",
                                "agency": "/v2/agency/6",
                                "defaultbookingbrand": "/v2/bookingbrand/5",
                                "website": "www.comm.co.uk",
                                "email": "info@comm.co.uk"
                            },
                            "fromdate": "2016-02-01",
                            "todate": "2016-02-28"
                        }
                    ]
                },
                "marketingbrand": {
                    "id": 4,
                    "code": "MAMM",
                    "name": "Marsdens",
                    "agency": "/v2/agency/5",
                    "defaultbookingbrand": "/v2/bookingbrand/4",
                    "website": "www.mabb.co.uk",
                    "email": "info@mabb.co.uk"
                },
                "fromdate": "2016-03-01",
                "todate": "2020-12-31"
            },
            "requestdatetime": "2016-10-03 20:00:22",
            "processeddatetime": "2016-10-31 22:23:57",
            "tabsuser": null,
            "brochure": "/v2/brochure/1"
        }

### Update a brochure request [PUT]

+ Request (application/x-www-form-urlencoded)

        sourcemarketingbrandid=5

+ Response 204


### Delete a brochure request [DELETE]

+ Response 204




# Group Change Day

## Change Day Template [/v2/changedaytemplate]
A Change Day Template is a set of rules which define when holidays can start and finish
### Retrieve a list of Change Day Templates. [GET]

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 8,
            "page": 1,
            "count": 8,
            "limit": 10,
            "time": 0,
            "orderBy": null,
            "filter": "",
            "previous": null,
            "next": null,
            "elements": [
                {
                    "id": 3,
                    "route": "/v2/changedaytemplate/3",
                    "type": "Branding",
                    "name": "Friday No Short Breaks",
                    "description": "No short breaks whatsoever",
                    "owner": "/v2/branding/3",
                    "parent": "/v2/changedaytemplate/1",
                    "fromdate": "2025-02-20",
                    "todate": "2100-01-01",
                    "propertybrandings": [
                        "/v2/property/4/branding/6/changedaytemplate"
                    ]
                },
                {
                    "id": 4,
                    "route": "/v2/changedaytemplate/4",
                    "type": "Branding",
                    "name": "Friday Low Season Only",
                    "description": "Friday plus September - May",
                    "owner": "/v2/branding/3",
                    "parent": "/v2/changedaytemplate/1",
                    "fromdate": "2025-02-20",
                    "todate": "2100-01-01",
                    "propertybrandings": [
                        "/v2/property/2/branding/2/changedaytemplate"
                    ]
                },
                {
                    "id": 5,
                    "route": "/v2/changedaytemplate/5",
                    "type": "Branding",
                    "name": "Friday Complicated",
                    "description": "Friday plus other complicated rules",
                    "owner": "/v2/branding/3",
                    "parent": "/v2/changedaytemplate/1",
                    "fromdate": "2024-02-20",
                    "todate": "2100-01-01",
                    "propertybrandings": [
                        "/v2/property/1/branding/1/changedaytemplate"
                    ]
                },
                {
                    "id": 6,
                    "route": "/v2/changedaytemplate/6",
                    "type": "Branding",
                    "name": "Saturday Complicated",
                    "description": "Saturday plus other complicated rules",
                    "owner": "/v2/branding/3",
                    "parent": "/v2/changedaytemplate/2",
                    "fromdate": "2016-01-01",
                    "todate": "2016-12-31",
                    "propertybrandings": [
                        "/v2/property/1/branding/1/changedaytemplate",
                        "/v2/property/2/branding/2/changedaytemplate"
                    ]
                },
                {
                    "id": 7,
                    "route": "/v2/changedaytemplate/7",
                    "type": "Branding",
                    "name": "Friday",
                    "description": "Friday",
                    "owner": "/v2/branding/3",
                    "parent": "/v2/changedaytemplate/1",
                    "fromdate": "2018-01-01",
                    "todate": "2018-12-31",
                    "propertybrandings": [
                        "/v2/property/1/branding/1/changedaytemplate"
                    ]
                },
                {
                    "id": 8,
                    "route": "/v2/changedaytemplate/8",
                    "type": "Property",
                    "name": "Property 1105",
                    "description": "Property level restrictions",
                    "owner": "/v2/property/1/branding/1",
                    "parent": "/v2/changedaytemplate/5",
                    "fromdate": "2024-02-20",
                    "todate": "2100-01-01",
                    "propertybrandings": [
                        "/v2/property/1/branding/1/changedaytemplate"
                    ]
                },
                {
                    "id": 1,
                    "route": "/v2/changedaytemplate/1",
                    "type": "Base",
                    "name": "Every Friday",
                    "description": "Every Friday no other rules",
                    "owner": "",
                    "fromdate": "2024-02-20",
                    "todate": "2100-01-01",
                    "propertybrandings": []
                },
                {
                    "id": 2,
                    "route": "/v2/changedaytemplate/2",
                    "type": "Base",
                    "name": "Every Saturday",
                    "description": "Every Saturday no other rules",
                    "owner": "",
                    "fromdate": "2016-01-01",
                    "todate": "2016-12-31",
                    "propertybrandings": [
                        "/v2/property/2/branding/2/changedaytemplate"
                    ]
                }
            ]
        }

### Add a new Change Day Template [POST]

The following fields should be provided in the POST array

* ```type``` The type of template: Base, Branding or Property
* ```brandingid``` The id of the branding the template is for (type=Branding only) 
* ```propertybrandingid``` The id of the propertybranding the template is for (type=Property only) 
* ```parentid``` The id of the parent template (only required for type=Branding or Property)
* ```name``` Template name - if any other templates exists with the same name, type and key (branding or property), then the dates must not overlap
* ```description``` Description of the rules
* ```fromdate``` Date the template applies from
* ```todate``` Date the template applies until

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/changedaytemplate/1


## Change Day [/v2/changedaytemplate/{id}]

+ Parameters

    + id (required, integer, `4`) ... The id of the Change Day Template

### Get a specific Change Day Template [GET]

+ Response 200 (application/json)

        {
            "id": 4,
            "route": "/v2/changedaytemplate/4",
            "type": "Branding",
            "name": "Friday Low Season Only",
            "description": "Friday plus September - May",
            "owner": "/v2/branding/3",
            "parent": "/v2/changedaytemplate/1",
            "fromdate": "2025-02-20",
            "todate": "2100-01-01",
            "propertybrandings": [
                "/v2/property/2/branding/3/changedaytemplate"
            ]
        }

### Update a Change Day Template for a given id [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. name=Friday

+ Response 204

### Delete a Change Day Template [DELETE]

+ Response 204



## Change Day Rule Index [/v2/changedaytemplate/{id}/rule]
+ Parameters

    + id (required, integer, `5`) ... The id of the ChangeDayTemplate

### Get all Rules for a ChangeDayTemplate [GET]

+ Response 200 (application/json)

        [
            {
              "id": 9,
              "ruleorder": 1,
              "everysaturday": false,
              "everysunday": false,
              "everymonday": false,
              "everytuesday": false,
              "everywednesday": false,
              "everythursday": false,
              "everyfriday": false,
              "fromdate": "2025-12-22",
              "todate": "2025-12-23",
              "isfromdate": true,
              "istodate": true,
              "isnotfromdate": false,
              "isnottodate": false,
              "withindays": null,
              "unlessholidayatleast": null,
              "showonavailability": true,
              "minimumholiday": null,
              "daysbeforeeaster": 0,
              "daysaftereaster": 0,
              "description": "Holidays can start and finish every day between Dec 22 2025 and Dec 23 2025 ",
              "ispriceanchor": false,
              "isnotpriceanchor": false
            },
            {
              "id": 10,
              "ruleorder": 2,
              "everysaturday": false,
              "everysunday": false,
              "everymonday": false,
              "everytuesday": false,
              "everywednesday": false,
              "everythursday": false,
              "everyfriday": false,
              "fromdate": "0000-12-25",
              "todate": "0000-12-26",
              "isfromdate": false,
              "istodate": false,
              "isnotfromdate": true,
              "isnottodate": true,
              "withindays": null,
              "unlessholidayatleast": null,
              "showonavailability": true,
              "minimumholiday": null,
              "daysbeforeeaster": 0,
              "daysaftereaster": 0,
              "description": "Holidays can not start and can not finish every day between Dec 25 and Dec 26 ",
              "ispriceanchor": false,
              "isnotpriceanchor": false
            },
            {
              "id": 11,
              "ruleorder": 3,
              "everysaturday": false,
              "everysunday": false,
              "everymonday": false,
              "everytuesday": false,
              "everywednesday": false,
              "everythursday": false,
              "everyfriday": false,
              "fromdate": "2025-12-29",
              "todate": "2025-12-30",
              "isfromdate": true,
              "istodate": true,
              "isnotfromdate": false,
              "isnottodate": false,
              "withindays": null,
              "unlessholidayatleast": null,
              "showonavailability": true,
              "minimumholiday": null,
              "daysbeforeeaster": 0,
              "daysaftereaster": 0,
              "description": "Holidays can start and finish every day between Dec 29 2025 and Dec 30 2025 ",
              "ispriceanchor": false,
              "isnotpriceanchor": false
            },
            {
              "id": 12,
              "ruleorder": 4,
              "everysaturday": false,
              "everysunday": false,
              "everymonday": false,
              "everytuesday": false,
              "everywednesday": false,
              "everythursday": false,
              "everyfriday": false,
              "fromdate": "2026-01-09",
              "todate": "2026-01-09",
              "isfromdate": false,
              "istodate": false,
              "isnotfromdate": false,
              "isnottodate": true,
              "withindays": null,
              "unlessholidayatleast": null,
              "showonavailability": false,
              "minimumholiday": null,
              "daysbeforeeaster": 0,
              "daysaftereaster": 0,
              "description": "Holidays can not finish every day between Jan 09 2026 and Jan 09 2026 ",
              "ispriceanchor": false,
              "isnotpriceanchor": false
            },
            {
              "id": 4,
              "ruleorder": 5,
              "everysaturday": false,
              "everysunday": false,
              "everymonday": false,
              "everytuesday": false,
              "everywednesday": false,
              "everythursday": false,
              "everyfriday": false,
              "fromdate": "2025-01-01",
              "todate": "2025-04-11",
              "isfromdate": true,
              "istodate": true,
              "isnotfromdate": false,
              "isnottodate": false,
              "withindays": null,
              "unlessholidayatleast": null,
              "showonavailability": false,
              "minimumholiday": null,
              "daysbeforeeaster": 0,
              "daysaftereaster": 0,
              "description": "Holidays can start and finish every day between Jan 01 2025 and Apr 11 2025 ",
              "ispriceanchor": false,
              "isnotpriceanchor": false
            },
            {
              "id": 5,
              "ruleorder": 6,
              "everysaturday": false,
              "everysunday": false,
              "everymonday": false,
              "everytuesday": false,
              "everywednesday": false,
              "everythursday": false,
              "everyfriday": false,
              "fromdate": "2025-04-22",
              "todate": "2025-05-31",
              "isfromdate": true,
              "istodate": true,
              "isnotfromdate": false,
              "isnottodate": false,
              "withindays": null,
              "unlessholidayatleast": null,
              "showonavailability": false,
              "minimumholiday": null,
              "daysbeforeeaster": 0,
              "daysaftereaster": 0,
              "description": "Holidays can start and finish every day between Apr 22 2025 and May 31 2025 ",
              "ispriceanchor": false,
              "isnotpriceanchor": false
            },
            {
              "id": 6,
              "ruleorder": 7,
              "everysaturday": false,
              "everysunday": false,
              "everymonday": false,
              "everytuesday": false,
              "everywednesday": false,
              "everythursday": false,
              "everyfriday": false,
              "fromdate": "2025-06-01",
              "todate": "2025-06-30",
              "isfromdate": true,
              "istodate": true,
              "isnotfromdate": false,
              "isnottodate": false,
              "withindays": 14,
              "unlessholidayatleast": 10,
              "showonavailability": false,
              "minimumholiday": 4,
              "daysbeforeeaster": 0,
              "daysaftereaster": 0,
              "description": "Holidays can start and finish every day between Jun 01 2025 and Jun 30 2025 if booked within 14 days, and longer than 4 days unless the booking is for 10 days or more ",
              "ispriceanchor": false,
              "isnotpriceanchor": false
            },
            {
              "id": 7,
              "ruleorder": 8,
              "everysaturday": false,
              "everysunday": false,
              "everymonday": false,
              "everytuesday": false,
              "everywednesday": false,
              "everythursday": false,
              "everyfriday": false,
              "fromdate": "2025-07-01",
              "todate": "2025-08-31",
              "isfromdate": true,
              "istodate": true,
              "isnotfromdate": false,
              "isnottodate": false,
              "withindays": 7,
              "unlessholidayatleast": 14,
              "showonavailability": false,
              "minimumholiday": 5,
              "daysbeforeeaster": 0,
              "daysaftereaster": 0,
              "description": "Holidays can start and finish every day between Jul 01 2025 and Aug 31 2025 if booked within 7 days, and longer than 5 days unless the booking is for 14 days or more ",
              "ispriceanchor": false,
              "isnotpriceanchor": false
            },
            {
              "id": 8,
              "ruleorder": 9,
              "everysaturday": false,
              "everysunday": false,
              "everymonday": false,
              "everytuesday": false,
              "everywednesday": false,
              "everythursday": false,
              "everyfriday": false,
              "fromdate": "2025-09-01",
              "todate": "2025-12-18",
              "isfromdate": true,
              "istodate": true,
              "isnotfromdate": false,
              "isnottodate": false,
              "withindays": 14,
              "unlessholidayatleast": 10,
              "showonavailability": false,
              "minimumholiday": 0,
              "daysbeforeeaster": 0,
              "daysaftereaster": 0,
              "description": "Holidays can start and finish every day between Sep 01 2025 and Dec 18 2025 if booked within 14 days unless the booking is for 10 days or more ",
              "ispriceanchor": false,
              "isnotpriceanchor": false
            }
          ]

### Add a new Rule to a Change Day Template [POST]

The following fields should be provided in the POST array

* ```ruleorder``` The order the rule should be applied in
* ```everysaturday``` Whether the rule applies to Saturdays (optional, default=false)
* ```everysunday``` Whether the rule applies to Sundays (optional, default=false)
* ```everymonday``` Whether the rule applies to Mondays (optional, default=false)
* ```everytuesday``` Whether the rule applies to Tuesdays (optional, default=false)
* ```everywednesday``` Whether the rule applies to Wednesdays (optional, default=false)
* ```everythursday``` Whether the rule applies to Thursdays (optional, default=false)
* ```everyfriday``` Whether the rule applies to Fridays (optional, default=false)
* ```fromdate``` The date, or start date of the period the rule applies to (if null / omitted it applies at all times). To specify just the month and day, use year=0001. (optional)
* ```todate``` The end date of the period the rule applies to (if null / omitted the rule only applies to the fromdate). To specify just the month and day, use year=0001. (optional)
* ```isfromdate``` Whether the days the rule applies to are FromDates (true=yes they are, false=depends on other rules) (optional, default=false)
* ```istodate``` Whether the days the rule applies to are ToDates (optional, default=false)
* ```isnotfromdate``` Whether the days the rule applies to are not FromDates (cannot be True if isFromDate is True) (optional, default=false)
* ```isnottodate``` Whether the days the rule applies to are not ToDates (cannot be True if isToDate is True) (optional, default=false)
* ```withindays``` The maximum number of days before the holiday starts when the From or To dates are applicable (only applies if isFromDate or isToDate are True)
* ```unlessholidayatleast``` The minimum length of holiday which will override negative rules (only applies if isNotFromDate or isNotToDate are True, or WithinDays is < 9999.
* ```showonavailability``` Whether the effects of the rule should be shown on the Availability calendar
* ```daysbeforeeaster``` The number of days before Easter Sunday the rule applies to
* ```daysaftereaster``` The number of days after Easter Sunday the rule applies to
* ```ispriceanchor``` The days affected are Price Anchors, for the purposes of variable pricing based on start days
* ```isnotpriceanchor``` The days affected are specifically not Price Anchors

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/changedaytemplate/4/rule/4

## Change Day Rule Detail [/v2/changedaytemplate/{id}/rule/{id2}]
+ Parameters

    + id (required, integer, `5`) ... The id of the ChangeDayTemplate
    + id2 (required, integer, `10`) ... The id of the ChangeDayRule to get

### Gets the details of a Change Day Rule [GET]

+ Response 200 (application/json)

        {
            "id": 10,
            "ruleorder": 2,
            "everysaturday": false,
            "everysunday": false,
            "everymonday": false,
            "everytuesday": false,
            "everywednesday": false,
            "everythursday": false,
            "everyfriday": false,
            "fromdate": "0000-12-25",
            "todate": "0000-12-26",
            "isfromdate": false,
            "istodate": false,
            "isnotfromdate": true,
            "isnottodate": true,
            "withindays": null,
            "unlessholidayatleast": null,
            "showonavailability": true,
            "minimumholiday": null,
            "daysbeforeeaster": 0,
            "daysaftereaster": 0,
            "description": "Holidays can not start and can not finish every day between Dec 25 and Dec 26 ",
            "ispriceanchor": false,
            "isnotpriceanchor": false
          }

### Update a Change Day Template Rule [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. everywednesday=true

+ Response 204

### Deletes a Change Day Template Rule [DELETE]

+ Response 204




## Change Day Template Days [/v2/changedaytemplate/{id}/day]

+ Parameters

    + id (required, integer, `4`) ... The id of the Change Day Template

### Retrieve a list of Change Days generated from a Change Day Template. [GET]

+ Response 200 (application/json)

        [
            {
                "date": "2025-02-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-02-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-02-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-02-23",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-02-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-02-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-02-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-02-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-02-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-02",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-09",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-16",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-23",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-29",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-30",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-03-31",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-02",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-09",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-16",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-23",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-29",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-04-30",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-02",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-09",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-16",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-23",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-29",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-30",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-05-31",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-01",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-02",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-03",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-04",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-05",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2025-06-07",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-08",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-09",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-10",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-11",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-12",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2025-06-14",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-15",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-16",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-17",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-18",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-19",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2025-06-21",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-22",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-23",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-24",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-25",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-26",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2025-06-28",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-29",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-06-30",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-01",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-02",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-03",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2025-07-05",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-06",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-07",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-08",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-09",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-10",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2025-07-12",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-13",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-14",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-15",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-16",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-17",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2025-07-19",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-20",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-21",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-22",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-23",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-24",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2025-07-26",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-27",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-28",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-29",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-30",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-07-31",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2025-08-02",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-03",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-04",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-05",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-06",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-07",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2025-08-09",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-10",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-11",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-12",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-13",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-14",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2025-08-16",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-17",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-18",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-19",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-20",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-21",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2025-08-23",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-24",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-25",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-26",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-27",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-28",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-29",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2025-08-30",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-08-31",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-02",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-09",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-16",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-23",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-29",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-09-30",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-02",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-09",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-16",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-23",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-29",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-30",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-10-31",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-02",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-09",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-16",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-23",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-29",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-11-30",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-02",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-09",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-16",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-23",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-29",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-30",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2025-12-31",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-02",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-09",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-16",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-23",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-29",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-30",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-01-31",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-02",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-09",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-16",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-23",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-02-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-02",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-09",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-16",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-23",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-29",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-30",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-03-31",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-02",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-09",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-16",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-23",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-29",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-04-30",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-02",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-09",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-16",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-23",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-29",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-30",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-05-31",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-01",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-02",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-03",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-04",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2026-06-06",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-07",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-08",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-09",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-10",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-11",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2026-06-13",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-14",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-15",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-16",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-17",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-18",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2026-06-20",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-21",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-22",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-23",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-24",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-25",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2026-06-27",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-28",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-29",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-06-30",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-01",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-02",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2026-07-04",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-05",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-06",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-07",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-08",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-09",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2026-07-11",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-12",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-13",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-14",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-15",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-16",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2026-07-18",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-19",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-20",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-21",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-22",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-23",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2026-07-25",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-26",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-27",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-28",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-29",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-30",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-07-31",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2026-08-01",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-02",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-03",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-04",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-05",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-06",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2026-08-08",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-09",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-10",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-11",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-12",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-13",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2026-08-15",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-16",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-17",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-18",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-19",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-20",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2026-08-22",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-23",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-24",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-25",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-26",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-27",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": true
            },
            {
                "date": "2026-08-29",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-30",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-08-31",
                "isfromdate": false,
                "istodate": false,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-02",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-09",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-16",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-23",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-29",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-09-30",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-02",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-09",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-16",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-23",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-29",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-30",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-10-31",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-02",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-09",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-16",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-23",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-29",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-11-30",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-02",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-09",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-16",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-23",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-29",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-30",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2026-12-31",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-02",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-09",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-16",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-20",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-21",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-22",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-23",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-24",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-25",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-26",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-27",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-28",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-29",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-30",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-01-31",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-01",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-02",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-03",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-04",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-05",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-06",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-07",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-08",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-09",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-10",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-11",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-12",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-13",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-14",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-15",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-16",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-17",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-18",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            },
            {
                "date": "2027-02-19",
                "isfromdate": true,
                "istodate": true,
                "earliestbookingdate": "2000-01-01",
                "minimumholiday": 0,
                "unlessholidayatleast": 0,
                "showonavailability": false
            }
        ]

### Add a new Change Day [POST]
Not implemented - Change Days are maintained automatically from Change Day Templates / Rules

+ Response 501


## Change Day [/v2/changedaytemplate/{id}/day/{id2}]

+ Parameters

    + id (required, integer, `4`) ... The id of the Change Day Template
    + id2 (required, integer, `3`) ... The id of the Change Day 

### Get a specific Change Day Template [GET]
Not implemented

+ Response 501

### Updates a Change Day Template for a given id [PUT]
Not implemented

+ Response 501

### Deletes a Change Day Template [DELETE]
Not implemented

+ Response 501




# Group Contact
A Contact is a method of contacting someone e.g. "Email", "Post" etc.

## Contact Index [/v2/contact]
### Add a new Contact [POST]

The following fields should be provided in the POST array

* ```contacttype``` The type of the Contact being added, e.g. CSQ
* ```contactdatetime``` The date and time of the contact
* ```contactmethodtype``` The contact method, e.g. Email
* ```subject``` The subject of the contact (for lists etc)
* ```content``` The text content of the contact (optional)
* ```sendercontactdetailid``` The id of the ContactDetail of the sender
* ```deleted``` True if the contact has been deleted from the user's viewpoint
* ```sourcemarketingbrandid``` Id of the Source Marketing Brand (optional)
* ```status_status``` Status name (free text)
* ```status_statusdatetime``` The date and time the status was set (optional, default = now)
* ```status_intermediary``` The third party providing the status (optional)
* ```status_reference``` The reference related to the status (optional)
* ```status_detail``` A JSON structure containing further details regarding the status (optional)
* ```document_documentid``` The id of a Document (or Image) to be added to the Contact


+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/contact/2

## Contact Detail [/v2/contact/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the Contact to get

### Gets the details of a Contact [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "contacttype": {
              "id": 4,
              "type": "Booking"
            },
            "contactdatetime": "2015-05-01 14:34:56",
            "contactmethodtype": {
              "id": 4,
              "method": "Email",
              "encoding": {
                "id": 2,
                "encoding": "HTML"
              },
              "characterlimit": 0,
              "maximumaddresslength": 0,
              "addressvalidationtype": "",
              "addressvalidation": ""
            },
            "subject": "Latin",
            "content": "Ipsos mori nil illigititatem carborundum",
            "sender": {
              "id": 2,
              "type": "C",
              "contactmethodtype": "Email",
              "contactmethodsubtype": "",
              "value": "support@tabs-software.co.uk",
              "comment": "",
              "invalid": false,
              "invaliddatetime": "",
              "invalidreason": "",
              "contactpreferences": [
                {
                  "id": 1,
                  "branding": "/v2/branding/1",
                  "rolereason": {
                    "id": 1,
                    "role": {
                      "id": 1,
                      "name": "Customer",
                      "donotdelete": true
                    },
                    "reason": {
                      "id": 1,
                      "name": "Booking Confirmation",
                      "donotdelete": true
                    },
                    "donotdelete": true,
                    "required": true
                  },
                  "priority": 1,
                  "donotuse": false
                }
              ],
              "dedupekey": "ot-support@tabs-software.co.uk"
            },
            "status": [],
            "documents": [
              {
                "id": 17,
                "created": "2016-06-24 12:58:44",
                "document": {
                  "id": 1,
                  "name": "Tabs 2 roadmap.pdf",
                  "filename": "Tabs 2 roadmap.pdf",
                  "timeadded": "2014-01-01 12:00:00",
                  "weight": 0,
                  "private": false,
                  "description": "A document",
                  "mimetype": {
                    "id": 1,
                    "name": "application/pdf",
                    "shortname": "pdf"
                  },
                  "file": "/v2/file/1"
                }
              },
              {
                "id": 18,
                "created": "2016-06-25 02:45:02",
                "image": {
                  "id": 5,
                  "name": "abc.jpg",
                  "filename": "abc.jpg",
                  "timeadded": "2014-01-01 12:00:00",
                  "weight": 0,
                  "private": false,
                  "description": "Here is another placeholder image",
                  "mimetype": {
                    "id": 2,
                    "name": "image/jpeg",
                    "shortname": "jpg"
                  },
                  "file": "/v2/file/5",
                  "height": 360,
                  "width": 480,
                  "alt": "The empire state building"
                }
              },
              {
                "id": 19,
                "created": "2016-06-26 14:45:02",
                "image": {
                  "id": 6,
                  "name": "xyz.jpg",
                  "filename": "xyz.jpg",
                  "timeadded": "2014-01-01 12:00:00",
                  "weight": 0,
                  "private": false,
                  "description": "Bathroom",
                  "mimetype": {
                    "id": 2,
                    "name": "image/jpeg",
                    "shortname": "jpg"
                  },
                  "file": "/v2/file/6",
                  "height": 300,
                  "width": 200,
                  "alt": "The Bathroom"
                }
              }
            ],
            "sourcemarketingbrand": {
              "id": 2,
              "source": {
                "id": 2,
                "sourcecode": "EDC",
                "description": "EDP Cottages",
                "showonweb": true,
                "sourcecategory": {
                  "id": 1,
                  "sourcecategory": "Internet"
                },
                "sourcemarketingbrands": [
                  {
                    "id": 2,
                    "marketingbrand": {
                      "id": 3,
                      "code": "NOMM",
                      "name": "Norfolk Country Cottages",
                      "agency": "/v2/agency/4",
                      "defaultbookingbrand": "/v2/bookingbrand/3",
                      "website": "www.norfolk.co.uk",
                      "email": "info@norfolk.co.uk"
                    },
                    "fromdate": "2016-03-01",
                    "todate": "2020-12-31"
                  },
                  {
                    "id": 3,
                    "marketingbrand": {
                      "id": 4,
                      "code": "MAMM",
                      "name": "Marsdens",
                      "agency": "/v2/agency/5",
                      "defaultbookingbrand": "/v2/bookingbrand/4",
                      "website": "www.mabb.co.uk",
                      "email": "info@mabb.co.uk"
                    },
                    "fromdate": "2016-03-01",
                    "todate": "2020-12-31"
                  }
                ]
              },
              "marketingbrand": {
                "id": 3,
                "code": "NOMM",
                "name": "Norfolk Country Cottages",
                "agency": "/v2/agency/4",
                "defaultbookingbrand": "/v2/bookingbrand/3",
                "website": "www.norfolk.co.uk",
                "email": "info@norfolk.co.uk"
              },
              "fromdate": "2016-03-01",
              "todate": "2020-12-31"
            },
            "contactentities": [
              {
                "id": 4,
                "contactentitytype": "TabsUser",
                "entityid": 1,
                "function": "from",
                "intermediary": "Bloggs",
                "reference": "XA-12a456",
                "status": [],
                "status_history": []
              },
              {
                "id": 5,
                "contactentitytype": "Customer",
                "entityid": 7,
                "function": "to",
                "intermediary": "Bloggs",
                "reference": "XA-333-456",
                "status": [],
                "status_history": [],
                "contactdetail": "/v2/customer/7/contactdetail/3",
                "contactdetailvalue": "55 Banana Street Fictional Town Norfolk NR22 2JG United Kingdom"
              },
              {
                "id": 6,
                "contactentitytype": "Booking",
                "entityid": 9,
                "function": "content",
                "intermediary": null,
                "reference": null,
                "status": [],
                "status_history": []
              }
            ],
            "deleted": false
          }

### Update a Contact [PUT]

+ Request (application/x-www-form-urlencoded)

        content=laurem ipsum quis custodiet ipsos custodes

+ Response 204




## Contact Document Index [/v2/contact/{id}/document]

+ Parameters

    + id (required, integer, `2`) ... The id of the Contact

### Get all Contact Documents [GET]

+ Response 200 (application/json)

        [
            {
                "id": 16,
                "created": "2016-06-24 12:58:44",
                "document": {
                    "id": 1,
                    "name": "Tabs 2 roadmap.pdf",
                    "filename": "Tabs 2 roadmap.pdf",
                    "timeadded": "2014-01-01 12:00:00",
                    "weight": 0,
                    "private": false,
                    "description": "A document",
                    "mimetype": {
                        "id": 1,
                        "name": "application/pdf",
                        "shortname": "pdf"
                    },
                    "file": "/v2/file/1"
                }
            },
            {
                "id": 17,
                "created": "2016-06-25 02:45:02",
                "image": {
                    "id": 4,
                    "name": "abc.jpg",
                    "filename": "abc.jpg",
                    "timeadded": "2014-01-01 12:00:00",
                    "weight": 0,
                    "private": false,
                    "description": "Here is another placeholder image",
                    "mimetype": {
                        "id": 2,
                        "name": "image/jpeg",
                        "shortname": "jpg"
                    },
                    "file": "/v2/file/4",
                    "height": 360,
                    "width": 480,
                    "alt": "The empire state building"
                }
            },
            {
                "id": 18,
                "created": "2016-06-26 14:45:02",
                "image": {
                    "id": 5,
                    "name": "xyz.jpg",
                    "filename": "xyz.jpg",
                    "timeadded": "2014-01-01 12:00:00",
                    "weight": 0,
                    "private": false,
                    "description": "Bathroom",
                    "mimetype": {
                        "id": 2,
                        "name": "image/jpeg",
                        "shortname": "jpg"
                    },
                    "file": "/v2/file/5",
                    "height": 300,
                    "width": 200,
                    "alt": "The Bathroom"
                }
            }
        ]

### Add a new Contact Document [POST]
The following fields should be provided in the POST array

* ```documentid``` The id of the Document

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/contact/1/document/1

## Contact Document Details [/v2/contact/{id}/document/{id2}]

+ Parameters

    + id (required, integer, `2`) ... The id of the Contact
    + id2 (required, integer, `18`) ... The id of the ContactDocument

### Get the details of a Contact Document [GET]

+ Response 200 (application/json)

        {
            "id": 18,
            "created": "2016-06-25 02:45:02",
            "image": {
                "id": 4,
                "name": "abc.jpg",
                "filename": "abc.jpg",
                "timeadded": "2014-01-01 12:00:00",
                "weight": 0,
                "private": false,
                "description": "Here is another placeholder image",
                "mimetype": {
                    "id": 2,
                    "name": "image/jpeg",
                    "shortname": "jpg"
                },
                "file": "/v2/file/4",
                "height": 360,
                "width": 480,
                "alt": "The empire state building"
            }
        }

### Update the a Contact Document [PUT]
Not implemented

+ Response 501

### Delete a Contact Document [DELETE]

+ Response 204



## Contact Entity Index [/v2/contact/{id}/entity]
+ Parameters

    + id (required, integer, `1`) ... The id of the Contact

### Get all Entities for a Contact [GET]
+ Response 200 (application/json)

        [
            {
                "id": 1,
                "contactentitytype": "Agency",
                "entityid": 4,
                "function": "from",
                "intermediary": "Bloggs",
                "reference": "XA-12-456",
                "status": []
            },
            {
                "id": 2,
                "contactentitytype": "Customer",
                "entityid": 7,
                "function": "to",
                "intermediary": "Bloggs",
                "reference": "XA-12-456",
                "status": [],
                "contactdetail": "/v2/customer/7/contactdetail/2",
                "contactdetailvalue": "support@tabs-software.co.uk"
            },
            {
                "id": 3,
                "contactentitytype": "Brochure",
                "entityid": 3,
                "function": "content",
                "intermediary": null,
                "reference": null,
                "status": []
            }
        ]

### Add a new Entity to a Contact [POST]

The following fields should be provided in the POST array

* ```contactentitytype``` The type of Entity being added
* ```entityid``` The Id of the Entity
* ```function``` The role of the entity in the contact, e.g. 'From', 'To', 'cc', 'content' etc
* ```contactdetailid``` The id of the ContactDetail used by the Contact
* ```intermediary``` The third party providing the status (optional)
* ```reference``` The reference related to the status (optional)
* ```perform_send``` Whether to perform the send or not (optional, if supplied don't supply status_* fields)
* ```status_status``` Status name (free text)
* ```status_statusdatetime``` The date and time the status was set (optional, default = now)
* ```status_detail``` A JSON structure containing further details regarding the status (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/contact/1/entity/2

## Contact Entity Detail [/v2/contact/{id}/entity/{eid}]
+ Parameters

    + id (required, integer, `1`) ... The id of the Contact to get
    + eid (required, integer, `2`) ... The id of the ContactEntity to get

### Gets the details of a Contact Entity [GET]
+ Response 200 (application/json)

        {
            "id": 2,
            "contactentitytype": "Customer",
            "entityid": 7,
            "function": "to",
            "intermediary": "Bloggs",
            "reference": "XA-12-456",
            "status": [],
            "contactdetail": "/v2/customer/7/contactdetail/2",
            "contactdetailvalue": "support@tabs-software.co.uk"
        }

### Update a Contact's Entity [PUT]

+ Request (application/x-www-form-urlencoded)

        function=To

+ Response 204

### Deletes a Contact's Entity [DELETE]

+ Response 204



## Contact Entity Status Index [/v2/contact/{id}/entity/{id2}/status]

+ Parameters

    + id (required, integer, `1`) ... The id of the Contact
    + id2 (required, integer, `1`) ... The id of the ContactEntity

### Get all Statuses for a Contact Entity [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "status": "Submitted",
                "statusdatetime": "2016-06-09 16:23:38",
                "detail": "JSON encoded string"
            },
            {
                "id": 2,
                "status": "Sent",
                "statusdatetime": "2016-06-09 16:44:38",
                "detail": "New JSON encoded string"
            }
        ]

### Add a new Status to a Entity Contact [POST]

The following fields should be provided in the POST array
* ```status``` Status name (free text)
* ```statusdatetime``` The date and time the status was set (optional, default = now)
* ```detail``` A JSON structure containing further details regarding the status (optional)
* ```currentstatus``` whether this status is the current status (optional, default=false)
 
+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/contact/1/entity/2/status

## Contact Entity Status Detail [/v2/contact/{id}/entity/{id2}/status/{id3}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Contact
    + id2 (required, integer, `1`) ... The id of the ContactEntity 
    + id3 (required, integer, `2`) ... The id of the ContactEntityStatus 

### Gets the details of an Contact Entity Status [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "status": "Sent",
            "statusdatetime": "2016-06-09 16:44:38",
            "detail": "New JSON encoded string"
        }

### Update an Contact Entity Status [PUT]
Not implemented - POST another status

+ Response 501

### Deletes an Contact Entity Status [DELETE]
Not implemented - POST another status

+ Response 501



## ContactEntityType Index [/v2/contactentitytype]
A ContactEntityType is a type of contact, e.g. Confirmation

### Get all ContactEntityTypes [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "contactentitytype": "Actor",
                "logcontactdetails": true
            },
            {
                "id": 2,
                "contactentitytype": "Customer",
                "logcontactdetails": true
            },
            {
                "id": 3,
                "contactentitytype": "Owner",
                "logcontactdetails": true
            },
            {
                "id": 4,
                "contactentitytype": "Cleaner",
                "logcontactdetails": true
            },
            {
                "id": 5,
                "contactentitytype": "Keyholder",
                "logcontactdetails": true
            },
            {
                "id": 6,
                "contactentitytype": "Supplier",
                "logcontactdetails": true
            },
            {
                "id": 7,
                "contactentitytype": "TabsUser",
                "logcontactdetails": true
            },
            {
                "id": 8,
                "contactentitytype": "Agency",
                "logcontactdetails": false
            },
            {
                "id": 9,
                "contactentitytype": "Brochure",
                "logcontactdetails": false
            },
            {
                "id": 10,
                "contactentitytype": "Booking",
                "logcontactdetails": false
            },
            {
                "id": 11,
                "contactentitytype": "Property",
                "logcontactdetails": false
            },
            {
                "id": 12,
                "contactentitytype": "WorkOrder",
                "logcontactdetails": false
            }
        ]

### Add a new ContactEntityType [POST]

The following fields should be provided in the POST array

* ```contactentitytype``` The type of ContactEntity, e.g. 'Cleaner'
* ```logcontactdetails``` Whether to log the contact details of the actor etc contacted

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/contactentitytype/2

## ContactEntityType Detail [/v2/contactentitytype/{id}]
### Gets the details of a ContactEntityType [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the ContactEntityType to get

+ Response 200 (application/json)

        {
            "id": 2,
            "contactentitytype": "Customer",
            "logcontactdetails": true
        }

### Update a ContactEntityType [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the ContactEntityType

+ Request (application/x-www-form-urlencoded)

        contactentitytype=Caretaker

+ Response 204

### Deletes a ContactEntityType [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the ContactEntityType

+ Response 204




## ContactType Index [/v2/contacttype]
A ContactType is a type of contact, e.g. Confirmation

### Get all ContactTypes [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "type": "CustomerConfirmation"
            },
            {
                "id": 2,
                "type": "OwnerConfirmationCustomer"
            },
            {
                "id": 3,
                "type": "OwnerConfirmationOwner"
            },
            {
                "id": 4,
                "type": "Booking"
            },
            {
                "id": 5,
                "type": "CSQ"
            },
            {
                "id": 6,
                "type": "Brochure"
            },
            {
                "id": 7,
                "type": "Direct Mail"
            },
            {
                "id": 8,
                "type": "Direct Email"
            }
        ]

### Add a new ContactType [POST]

The following fields should be provided in the POST array

* ```type``` The type of communication, e.g. 'Confirmation'

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/contacttype/2

## ContactType Detail [/v2/contacttype/{id}]
+ Parameters

    + id (required, integer, `1`) ... The id of the ContactType to get

### Gets the details of a ContactType [GET]
+ Response 200 (application/json)

        {
            "id": 2,
            "type": "OwnerConfirmationCustomer"
        }

### Update a ContactType [PUT]

+ Request (application/x-www-form-urlencoded)

        type=Confirmation

+ Response 204

### Deletes a ContactType [DELETE]

+ Response 204



## ContactMethodElement Index [/v2/contactmethodtype/{id}/element]

+ Parameters

    + id (required, integer, `5`) ... The id of the ContactMethodType

### Retrieve a list of contact method elements. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "contactmethodelement": "body",
                "description": "Body of the letter"
            },
            {
                "id": 3,
                "contactmethodelement": "bodyleft",
                "description": "Left column of Body of the letter"
            },
            {
                "id": 4,
                "contactmethodelement": "bodyright",
                "description": "Right column of Body of the letter"
            },
            {
                "id": 5,
                "contactmethodelement": "additionalbody",
                "description": "Additional Body of the letter"
            },
            {
                "id": 6,
                "contactmethodelement": "address",
                "description": "Address section of the letter"
            },
            {
                "id": 7,
                "contactmethodelement": "title",
                "description": "Title section of the letter"
            },
            {
                "id": 8,
                "contactmethodelement": "propertydetails",
                "description": "Property details section of the letter"
            },
            {
                "id": 9,
                "contactmethodelement": "partydetails",
                "description": "Party details section of the letter"
            },
            {
                "id": 12,
                "contactmethodelement": "header",
                "description": "Header of the letter"
            },
            {
                "id": 13,
                "contactmethodelement": "footer",
                "description": "Footer of the letter"
            }
        ]

### Add a new ContactMethodElement [POST]
The following fields should be provided in the POST array

* ```contactmethodelement``` The contact method element
* ```description``` The description

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/contactmethodtype/1/element/1

## ContactMethodElement Detail [/v2/contactmethodtype/{id}/element/{id2}]

+ Parameters

    + id (required, integer, `5`) ... The id of the ContactMethodType 
    + id2 (required, integer, `1`) ... The id of ContactMethodElement 

### Gets the details of a ContactMethodElement [GET]
+ Response 200 (application/json)

        {
            "id": 1,
            "contactmethodelement": "body",
            "description": "Body of the letter"
        }

### Update a ContactMethodElement [PUT]

+ Request (application/x-www-form-urlencoded)

        description=Body of the letter

+ Response 204

### Deletes a ContactMethodElement [DELETE]

+ Response 204



## ContactMethodType Index [/v2/contactmethodtype]
A ContactMethodType is a method of contacting someone e.g. "Email", "Post" etc.

### Get all ContactMethodTypes [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "method": "Phone",
                "encoding": {
                    "id": 1,
                    "encoding": "Plain"
                },
                "characterlimit": 0,
                "maximumaddresslength": 20,
                "addressvalidationtype": "",
                "addressvalidation": ""
            },
            {
                "id": 2,
                "method": "Mobile",
                "encoding": {
                    "id": 1,
                    "encoding": "Plain"
                },
                "characterlimit": 0,
                "maximumaddresslength": 20,
                "addressvalidationtype": "",
                "addressvalidation": ""
            },
            {
                "id": 3,
                "method": "Email",
                "encoding": {
                    "id": 2,
                    "encoding": "HTML"
                },
                "characterlimit": 0,
                "maximumaddresslength": 20,
                "addressvalidationtype": "",
                "addressvalidation": ""
            },
            {
                "id": 4,
                "method": "Post",
                "encoding": {
                    "id": 1,
                    "encoding": "Plain"
                },
                "characterlimit": 0,
                "maximumaddresslength": 0,
                "addressvalidationtype": "PAF",
                "addressvalidation": "www.paf.co.uk"
            },
            {
                "id": 5,
                "method": "Text",
                "encoding": {
                    "id": 1,
                    "encoding": "Plain"
                },
                "characterlimit": 140,
                "maximumaddresslength": 0,
                "addressvalidationtype": "",
                "addressvalidation": ""
            },
            {
                "id": 6,
                "method": "Twitter",
                "encoding": {
                    "id": 1,
                    "encoding": "Plain"
                },
                "characterlimit": 140,
                "maximumaddresslength": 0,
                "addressvalidationtype": "regex",
                "addressvalidation": "^@?(\\w){1,15}$"
            }
        ]

### Add a new ContactMethodType [POST]

+ Response 501

## ContactMethodType Detail [/v2/contactmethodtype/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the ContactMethodType to get

### Gets the details of a ContactMethodType [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "method": "Mobile",
            "encoding": {
                "id": 1,
                "encoding": "Plain"
            },
            "characterlimit": 0,
            "maximumaddresslength": 20,
            "addressvalidationtype": "",
            "addressvalidation": ""
        }

### Update a ContactMethodType [PUT]

+ Response 501

### Deletes a ContactMethodType [DELETE]

+ Response 501



## ContactMethodSubtype Index [/v2/contactmethodsubtype]
A ContactMethodSubtype indicates the uasge of a ContactMethodType, e.g. "Home", "Work" etc.

### Get all ContactMethodSubtypes [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "contactmethodsubtype": "Main"
            },
            {
                "id": 2,
                "contactmethodsubtype": "Home"
            },
            {
                "id": 3,
                "contactmethodsubtype": "Work"
            },
            {
                "id": 4,
                "contactmethodsubtype": "Play"
            }
        ]

### Add a new ContactMethodSubtype [POST]

The following fields should be provided in the POST array

* ```contactmethodsubtype``` The name of the ContactMethodSubtype being added

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/contactmethodsubtype/2

## ContactMethodSubtype Detail [/v2/contactmethodsubtype/{id}]
### Gets the details of a ContactMethodSubtype [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the ContactMethodSubtype to get

+ Response 200 (application/json)

        {
            "id": 2,
            "contactmethodsubtype": "Home"
        }

### Update a ContactMethodSubtype [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the ContactMethodSubtype

+ Request (application/x-www-form-urlencoded)

        contactmethodsubtype="Work"

+ Response 204

### Deletes a ContactMethodSubtype [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the ContactMethodSubtype

+ Response 204




## Contact Status Index [/v2/contact/{id}/status]

+ Parameters

    + id (required, integer, `1`) ... The id of the Contact

### Get all Statuses for a Contact [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "status": "Submitted",
                "statusdatetime": "2016-06-09 16:23:38",
                "intermediary": "Bloggs",
                "reference": "XA-12-456",
                "detail": "JSON encoded string"
            },
            {
                "id": 2,
                "status": "Sent",
                "statusdatetime": "2016-06-09 16:44:38",
                "intermediary": "Bloggs",
                "reference": "XA-12-456",
                "detail": "New JSON encoded string"
            }
        ]

### Add a new Status to a Contact [POST]

The following fields should be provided in the POST array

* ```status``` Status name (free text)
* ```statusdatetime``` The date and time the status was set (optional, default = now)
* ```intermediary``` The third party providing the status (optional) 
* ```reference``` The reference related to the status (optional)
* ```detail``` A JSON structure containing further details regarding the status (optional)
* ```currentstatus``` whether this status is the current status (optional, default=false)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/contact/1/status/2

## Contact Status Detail [/v2/contact/{id}/status/{eid}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Contact
    + eid (required, integer, `2`) ... The id of the ContactStatus

### Gets the details of a Contact Status [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "status": "Sent",
            "statusdatetime": "2016-06-09 16:44:38",
            "intermediary": "Bloggs",
            "reference": "XA-12-456",
            "detail": "New JSON encoded string"
        }

### Update a Contact's Status [PUT]
Not implemented - POST another status

+ Response 501

### Deletes a Contact's Status [DELETE]
Not implemented - POST another status

+ Response 501



## ApiRequestCount Index [/v2/apirequestcount]
### Get all ApiRequestCounts [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "billingperiod": "2016-07-25 12:22:22",
              "requests": 4502
            }
          ]

### Add a new ApiRequestCount [POST]

The following fields should be provided in the POST array

* ```billingperioddatetime``` The period start time
* ```requests``` The number of requests

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/apirequestcount/2

## ApiRequestCount Detail [/v2/apirequestcount/{id}]
+ Parameters

    + id (required, integer, `1`) ... The id of the ApiRequestCount to get

### Gets the details of a ApiRequestCount [GET]
+ Response 200 (application/json)

        {
            "id": 1,
            "billingperiod": "2016-07-25 12:22:22",
            "requests": 4502
          }

### Update an ApiRequestCount [PUT]

+ Request (application/x-www-form-urlencoded)

        requests=20

+ Response 204

### Deletes an ApiRequestCount [DELETE]

+ Response 204



# Group Common

## BookingEvent Index [/v2/bookingevent]
### Get all BookingEvents [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "event": "Provisional",
                "description": "The booking has been agreed but not yet confirmed"
            },
            {
                "id": 2,
                "event": "Confirmed",
                "description": "The booking had a payment (either deposit or full balance) and is therefore confirmed"
            },
            {
                "id": 3,
                "event": "Cancelled",
                "description": "The booking has been cancelled"
            },
            {
                "id": 4,
                "event": "TransferredFrom",
                "description": "The booking has been transferred from another booking (i.e. created)"
            },
            {
                "id": 5,
                "event": "TransferredTo",
                "description": "The booking has been transferred to another booking (i.e. cancelled)"
            }
        ]

### Add a new BookingEvent [POST]

The following fields should be provided in the POST array

* ```event``` The name of the BookingEvent being added
* ```description``` Description of the BookingEvent 

+ Response 501

## BookingEvent Detail [/v2/bookingevent/{id}]
+ Parameters

    + id (required, integer, `2`) ... The id of the BookingEvent to get

### Gets the details of a BookingEvent [GET]
+ Response 200 (application/json)

        {
            "id": 2,
            "event": "Confirmed",
            "description": "The booking had a payment (either deposit or full balance) and is therefore confirmed"
        }

### Update a BookingEvent [PUT]

+ Response 501

### Deletes a BookingEvent [DELETE]

+ Response 501




## Country Index [/v2/country]
### Get all Countries [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Afghanistan",
                "alpha2": "AF",
                "alpha3": "AFG",
                "phonecode": "93"
            },
            {
                "id": 2,
                "name": "Aland Islands",
                "alpha2": "AX",
                "alpha3": "ALA",
                "phonecode": "358"
            }
        ]

### Add a new Country [POST]

The following fields should be provided in the POST array

* ```name``` The name of the Country being added
* ```alpha2``` The 2-character alpha code
* ```alpha3``` The 3-character alpha code
* ```phonecode``` The international e.164 country code

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/country/2

## Country Detail [/v2/country/{id}]
+ Parameters

    + id (required, integer, `2`) ... The id of the Country to get

### Gets the details of a Country [GET]
+ Response 200 (application/json)

        {
            "id": 2,
            "name": "Aland Islands",
            "alpha2": "AX",
            "alpha3": "ALA",
            "phonecode": "358"
        }

### Update a Country [PUT]

+ Request (application/x-www-form-urlencoded)

        alpha2=FD

+ Response 204

### Deletes a Country [DELETE]

+ Response 204




## Language Index [/v2/language]
### Get all Languages [GET]

+ Response 200 (application/json)

        [
            {
                "id":1,
                "code":"EN",
                "name":"English"
            },
            {
                "id":2,
                "code":"CY",
                "name":"Welsh"
            }
        ]

### Add a new Language [POST]

The following fields should be provided in the POST array

* ```code``` The code of the Language being added
* ```name``` The name of the language.

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/language/2

## Language Detail [/v2/language/{id}]
### Gets the details of a Language [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the Language to get

+ Response 200 (application/json)

        {
            "id":1,
            "code":"EN",
            "name":"English"
        }

### Update a Language [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the Language

+ Request (application/x-www-form-urlencoded)

        name=Scottish

+ Response 204

### Deletes a Language [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the Language

+ Response 204




## Unit Index [/v2/unit]
### Get all Units [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name":"km",
                "description":"kilometre",
                "decimalplaces": 1
            },
            {
                "id": 2,
                "name":"m",
                "description":"Metre",
                "decimalplaces": 1
            },
            {
                "id": 3,
                "name":"unit",
                "description":"Simple count of an item",
                "decimalplaces": 0
            }
        ]

### Add a new Unit [POST]

The following fields should be provided in the POST array

* ```name``` The name of the Unit being added
* ```description``` A description of the unit
* ```decimalplaces``` The number of decimal places to display values measured in the unit.

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/unit/2

## Unit Detail [/v2/unit/{id}]
+ Parameters

    + id (required, integer, `1`) ... The id of the Unit to get

### Gets the details of a Unit [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "name":"km",
            "description":"kilometre",
            "decimalplaces": 1
        }

### Update a Unit [PUT]

+ Request (application/x-www-form-urlencoded)

        decimalplaces=3

+ Response 204

### Deletes a Unit [DELETE]

+ Response 204



## Unit PerUnit Index [/v2/unit/{id}/perunit]

+ Parameters

    + id (required, integer, `1`) ... The id of the Unit

### Get all PerUnits for a Unit [GET]

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "tounit": {
                    "id": 2,
                    "name": "m",
                    "description": "Metre",
                    "decimalplaces": 1
                },
                "multiplier": 1000
            }
        ]

### Add a new UnitPerUnit [POST]
The following fields should be provided in the POST array

* ```tounitid``` The id of the Unit being converted into
* ```multiplier``` The value to use to convert the base unit into the unit specified in unitid

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/unit/1/perunit/1

## Unit PerUnit Details [/v2/unit/{id}/perunit/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Unit
    + id2 (required, integer, `2`) ... The id of the UnitPerUnit

### Get the details of a Unit PerUnit [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "tounit": {
                "id": 2,
                "name": "m",
                "description": "Metre",
                "decimalplaces": 1
            },
            "multiplier": 1000
        }

### Update the details of a unit PerUnit [PUT]

+ Request (application/x-www-form-urlencoded)

        multiplier=12

+ Response 204

### Delete a Unit PerUnit [DELETE]

+ Response 204



## Encoding Index [/v2/encoding]
### Retreive a list of Encodings. [GET]
Description encodings.

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "encoding": "Plain"
            },
            {
                "id": 2,
                "encoding": "HTML"
            },
            {
                "id": 3,
                "encoding": "XML"
            }
        ]

### Add a new Encoding [POST]
The following fields should be provided in the POST array

* ```encoding``` The name of the Encoding.

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/encoding/2

## Encoding Detail [/v2/encoding/{id}]
### Gets the details of an Encoding [GET]
+ Parameters

    + id (required, integer, `2`) ... The id of the Encoding to get

+ Response 200 (application/json)

        {
            "id": 2,
            "encoding": "HTML"
        }

### Update an Encoding [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the Encoding

+ Request (application/x-www-form-urlencoded)

        description=new booking fee

+ Response 204

### Deletes an Encoding [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the Encoding

+ Response 204



## LabelQueue Index [/v2/labelqueue]
### Retreive a list of labels in the queue. [GET]
Description labels.

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 2,
            "page": 1,
            "count": 2,
            "limit": 10,
            "time": 0,
            "orderBy": null,
            "filter": "",
            "previous": null,
            "next": null,
            "elements": [
                {
                    "id": 1,
                    "sortreference": "NO Brochure",
                    "reference": "ABC123",
                    "textjson": "[\"79 St Marys Road\",\"Poringland\",\"Norwich\",\"Norfolk\",\"NR14 7SU\"]",
                    "printed": true
                },
                {
                    "id": 2,
                    "sortreference": "SS Brochure",
                    "reference": "ABC456",
                    "textjson": "[\"79 St Marys Road\",\"Poringland\",\"Norwich\",\"Norfolk\",\"NR14 7SU\"]",
                    "printed": false
                }
            ]
        }

### Add a new LabelQueue [POST]
The following fields should be provided in the POST array

* ```sortreference``` The sort reference.
* ```reference``` The reference.
* ```textjson``` JSON array of label lines, i.e. an address.

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/labelqueue/2

## LabelQueue Detail [/v2/labelqueue/{id}]
### Gets the details of a LabelQueue [GET]
+ Parameters

    + id (required, integer, `2`) ... The id of the LabelQueue to get

+ Response 200 (application/json)

        {
            "id": 2,
            "sortreference": "SS Brochure",
            "reference": "ABC456",
            "textjson": "[\"79 St Marys Road\",\"Poringland\",\"Norwich\",\"Norfolk\",\"NR14 7SU\"]",
            "printed": false
        }

### Update a LabelQueue [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the LabelQueue

+ Request (application/x-www-form-urlencoded)

        reference=ABC789

+ Response 204

### Deletes an LabelQueue [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the LabelQueue

+ Response 204



## LabelTemplate Index [/v2/labeltemplate]
### Retrieve a list of label templates. [GET]
Description label templates.

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "3x8",
                "papersize": {
                   "id": 1,
                   "name": "A4"
                },
                "headersize": 0,
                "horizontalcount": 3,
                "verticalcount": 8,
                "labelwidth": 64,
                "labelheight": 34,
                "columnspacing": 2,
                "rowspacing": 0,
                "labelpadding": 4,
                "fontfamily": "Arial",
                "fontsize": 12,
                "margintop": 12.5,
                "marginbottom": 12.5,
                "marginleft": 7,
                "marginright": 7
            }
        ]

### Add a new LabelTemplate [POST]
The following fields should be provided in the POST array

* ```name``` The name of the template.
* ```papersizeid``` The LabelTemplatePaperSize id
* ```headersize``` The header size in mm.
* ```horizontalcount``` The number of labels horizontally.
* ```verticalcount``` The number of labels vertically.
* ```labelwidth``` The label width in mm
* ```labelheight``` The label height in mm
* ```columnspacing``` The spacing between columns in mm
* ```rowspacing``` The spacing between rows in mm
* ```labelpadding``` The padding of the labels in mm
* ```fontfamily``` The font family, i.e. Arial
* ```fontsize``` The font size in pixels
* ```margintop``` The top margin in mm
* ```marginbottom``` The bottom margin in mm
* ```marginleft``` The left margin in mm
* ```marginright``` The right margin in mm

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/labeltemplate/1

## LabelTemplate Detail [/v2/labeltemplate/{id}]
### Gets the details of a LabelTemplate [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the LabelTemplate to get

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "3x8",
            "papersize": {
               "id": 1,
               "name": "A4"
            },
            "headersize": 0,
            "horizontalcount": 3,
            "verticalcount": 8,
            "labelwidth": 64,
            "labelheight": 34,
            "columnspacing": 2,
            "rowspacing": 0,
            "labelpadding": 4,
            "fontfamily": "Arial",
            "fontsize": 12,
            "margintop": 12.5,
            "marginbottom": 12.5,
            "marginleft": 7,
            "marginright": 7
        }

### Update a LabelTemplate [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the LabelTemplate

+ Request (application/x-www-form-urlencoded)

        name=2x7

+ Response 204

### Deletes an LabelTemplate [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the LabelTemplate

+ Response 204



## LabelTemplatePaperSize Index [/v2/labeltemplatepapersize]
### Retreive a list of label template paper sizes. [GET]
Description labels.

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "A4"             
            }
        ]

### Add a new LabelTemplatePaperSize [POST]
The following fields should be provided in the POST array

* ```name``` The name.

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/labeltemplatepapersize/1

## LabelTemplatePaperSize Detail [/v2/labeltemplatepapersize/{id}]
### Gets the details of a LabelTemplatePaperSize [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the LabelTemplatePaperSize to get

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "A4"  
        }

### Update a LabelTemplatePaperSize [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the LabelTemplatePaperSize

+ Request (application/x-www-form-urlencoded)

        name=A3

+ Response 204

### Deletes an LabelTemplatePaperSize [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the LabelTemplatePaperSize

+ Response 204



# Group Customer Enquiry
An enquiry from a customer regarding a potential future booking.

## Customer Enquiry Index [/v2/customer/{id}/enquiry]
### Get all Enquiries for a Customer [GET]
+ Parameters

    + id (required, integer, `7`) ... The id of the Customer

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "marketingbrand": {
                    "id": 3,
                    "code": "NOMM",
                    "name": "Norfolk Country Cottages",
                    "agency": "/v2/agency/2",
                    "defaultbookingbrand": "/v2/bookingbrand/3",
                    "website": "www.norfolk.co.uk",
                    "email": "info@norfolk.co.uk"
                },
                "enquirydatetime": "2013-04-05",
                "pets": 0,
                "bedrooms": 2,
                "adults": 2,
                "children": 2,
                "infants": 2,
                "contactfrequencydays": 2,
                "closed": true
            }
        ]

### Add a new Enquiry to a Customer [POST]

The following fields should be provided in the POST array

* ```marketingbrandid``` The id of the marketing brand
* ```enquirydatetime``` Date and time of the enquiry (defaults to current date and time)
* ```pets``` whether or not the enquirer requires any property to take pets (-1=no, property doesn't need to take pets, 0=don't care, 1=pets must be accomodated)
* ```bedrooms``` Minimum number of bedrooms the property must have (optional, default = adults / 2)
* ```adults``` Number of adults in the party (or total party size if split not known)
* ```children``` Number of children in the party (optional)
* ```infants``` Number of infants in the party (optional)
* ```contactfrequencydays``` How often do they want to be contacted (optional)
* ```closed``` whether the enquiry is closed (optional)

+ Parameters

    + id (required, integer, `1`) ... The id of the Customer

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/customer/1/enquiry/2

## Customer Enquiry Detail [/v2/customer/{id}/enquiry/{eid}]
### Gets the details of a Customer Enquiry [GET]
+ Parameters

    + id (required, integer, `7`) ... The id of the Customer
    + eid (required, integer, `1`) ... The id of the CustomerEnquiry to get

+ Response 200 (application/json)

        {
            "id": 1,
            "marketingbrand": {
                "id": 3,
                "code": "NOMM",
                "name": "Norfolk Country Cottages",
                "agency": "/v2/agency/2",
                "defaultbookingbrand": "/v2/bookingbrand/3",
                "website": "www.norfolk.co.uk",
                "email": "info@norfolk.co.uk"
            },
            "enquirydatetime": "2013-04-05",
            "pets": 0,
            "bedrooms": 2,
            "adults": 2,
            "children": 2,
            "infants": 2,
            "contactfrequencydays": 2,
            "closed": true
        }

### Update a Customer's Enquiry [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. adults=8

+ Parameters

    + id (required, integer, `1`) ... The id of the Customer
    + eid (required, integer, `1`) ... The id of the CustomerEnquiry to update

+ Response 204

### Deletes a Customer's Enquiry [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the Customer
    + eid (required, integer, `1`) ... The id of the CustomerEnquiry to delete

+ Response 204




## Customer Enquiry Attribute Index [/v2/customer/{id}/enquiry/{id2}/attribute]

+ Parameters

    + id (required, integer, `7`) ... The id of the Customer
    + id2 (required, integer, `1`) ... The id of the CustomerEnquiry

### Get all Attributes for a Customer Enquiry [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "attribute": {
                    "id": 5,
                    "code": "ATTR003",
                    "group": {
                        "id": 3,
                        "name": "Misc"
                    },
                    "name": "Green Tourism Award",
                    "description": "Silver",
                    "type": "String",
                    "usedinavailabilitysearch": false,
                    "donotmodify": false,
                    "important": false,
                    "options": [
                        {
                            "id": 1,
                            "option": "Gold",
                            "optionorder": 1
                        },
                        {
                            "id": 2,
                            "option": "Silver",
                            "optionorder": 2
                        },
                        {
                            "id": 3,
                            "option": "Bronze",
                            "optionorder": 3
                        }
                    ]
                },
                "attributevalue": "Silver",
                "required": false
            },
            {
                "id": 2,
                "attribute": {
                    "id": 8,
                    "code": "ATTR004",
                    "group": {
                        "id": 4,
                        "name": "Location"
                    },
                    "name": "Distance to Pub",
                    "description": "Blah blah",
                    "type": "Number",
                    "usedinavailabilitysearch": true,
                    "donotmodify": false,
                    "important": false,
                    "unit": {
                        "id": 2,
                        "name": "m",
                        "description": "Metre",
                        "decimalplaces": 1
                    },
                    "operator": "<=",
                    "minimumvalue": 0,
                    "maximumvalue": 2000
                },
                "attributevalue": "3",
                "required": true
            }
        ]

### Add a new Attribute to a Enquiry Customer [POST]

The following fields should be provided in the POST array

* ```attributeid``` The Attribute id
* ```attributevalue``` The required attribute value
* ```required``` Whether the attribute MUST have the value (or is only a preference)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/customer/1/enquiry/1/attribute

## Customer Enquiry Attribute Detail [/v2/customer/{id}/enquiry/{id2}/attribute/{id3}]

+ Parameters

    + id (required, integer, `7`) ... The id of the Customer
    + id2 (required, integer, `1`) ... The id of the CustomerEnquiry to get
    + id3 (required, integer, `2`) ... The id of the Attribute to get

### Gets the details of an Customer Enquiry Attribute [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "attribute": {
                "id": 8,
                "code": "ATTR004",
                "group": {
                    "id": 4,
                    "name": "Location"
                },
                "name": "Distance to Pub",
                "description": "Blah blah",
                "type": "Number",
                "usedinavailabilitysearch": true,
                "donotmodify": false,
                "important": false,
                "unit": {
                    "id": 2,
                    "name": "m",
                    "description": "Metre",
                    "decimalplaces": 1
                },
                "operator": "<=",
                "minimumvalue": 0,
                "maximumvalue": 2000
            },
            "attributevalue": "3",
            "required": true
        }

### Update an Customer Enquiry Attribute [PUT]

+ Request (application/x-www-form-urlencoded)

        required=false

+ Response 204

### Deletes an Customer Enquiry Attribute [DELETE]

+ Response 204



## Customer Enquiry Dates Index [/v2/customer/{id}/enquiry/{id2}/dates]
### Get all Datess for a Customer Enquiry [GET]
+ Parameters

    + id (required, integer, `7`) ... The id of the Customer
    + id2 (required, integer, `1`) ... The id of the CustomerEnquiry

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "daysfrom": 7,
                "daysto": 10,
                "fromdate": "2025-03-14",
                "todate": "2025-05-01"
            },
            {
                "id": 2,
                "daysfrom": 3,
                "daysto": 4,
                "fromdate": "2026-08-01",
                "todate": "2026-08-31"
            }
        ]

### Add a new Dates to a Enquiry Customer [POST]

The following fields should be provided in the POST array

* ```daysfrom``` The minimum length of holiday requested
* ```daysto``` The maximum length of holiday requested
* ```fromdate``` The earliest date the holiday can start
* ```todate``` The latest date the holiday can end

+ Parameters

    + id (required, integer, `1`) ... The id of the Customer
    + id2 (required, integer, `1`) ... The id of the CustomerEnquiry

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/customer/1/enquiry/1/dates

## Customer Enquiry Dates Detail [/v2/customer/{id}/enquiry/{id2}/dates/{id3}]
### Gets the details of an Customer Enquiry Dates [GET]
+ Parameters

    + id (required, integer, `7`) ... The id of the Customer
    + id2 (required, integer, `1`) ... The id of the CustomerEnquiry to get
    + id3 (required, integer, `2`) ... The id of the CustomerEnquiryDates to get

+ Response 200 (application/json)

        {
            "id": 2,
            "daysfrom": 3,
            "daysto": 4,
            "fromdate": "2026-08-01",
            "todate": "2026-08-31"
        }

### Update an Customer Enquiry Dates [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. days=8

+ Parameters

    + id (required, integer, `1`) ... The id of the Customer
    + id2 (required, integer, `1`) ... The id of the CustomerEnquiry to update
    + id3 (required, integer, `1`) ... The id of the CustomerEnquiryDates to delete

+ Response 204

### Deletes an Customer Enquiry Dates [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the Customer
    + id2 (required, integer, `1`) ... The id of the CustomerEnquiry to delete
    + id3 (required, integer, `1`) ... The id of the CustomerEnquiryDates to delete

+ Response 204




## Customer Enquiry GroupingValue Index [/v2/customer/{id}/enquiry/{id2}/groupingvalue]
+ Parameters

    + id (required, integer, `7`) ... The id of the Customer
    + id2 (required, integer, `1`) ... The id of the CustomerEnquiry

### Get all GroupingValues for a Customer Enquiry [GET]
+ Response 200 (application/json)

        [
            {
                "id": 1,
                "groupingvalue": {
                    "id": 1,
                    "marketingbrand": "/v2/marketingbrand/3",
                    "name": "The Broads & East Coast Villages",
                    "qualifier": "",
                    "parentgroupingvalue": "",
                    "description": "The Norfolk Broads is somewhat of a claim to fame for Norfolk.",
                    "latitude": "0.000000",
                    "longitude": "0.000000",
                    "radiuskm": 0,
                    "nearkm": 0,
                    "promote": false,
                    "code": "BECV",
                    "geohash": ""
                },
                "required": true
            },
            {
                "id": 2,
                "groupingvalue": {
                    "id": 3,
                    "marketingbrand": "/v2/marketingbrand/3",
                    "name": "Irstead",
                    "qualifier": "Norfolk",
                    "parentgroupingvalue": "/v2/grouping/1/value/1",
                    "description": "A small hamlet in the middle of the Broads, close to Wroxham and the East Coast",
                    "latitude": "52.234500",
                    "longitude": "1.234500",
                    "radiuskm": 2,
                    "nearkm": 5,
                    "promote": false,
                    "code": "IRST",
                    "geohash": "u12chj4bj"
                },
                "required": false
            }
        ]

### Add a new GroupingValue to a Customer Enquiry [POST]

The following fields should be provided in the POST array

* ```groupingvalueid``` The GroupingValue id

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/customer/1/enquiry/1/groupingvalue

## Customer Enquiry GroupingValue Detail [/v2/customer/{id}/enquiry/{id2}/groupingvalue/{id3}]
+ Parameters

    + id (required, integer, `7`) ... The id of the Customer
    + id2 (required, integer, `1`) ... The id of the CustomerEnquiry to get
    + id3 (required, integer, `2`) ... The id of the CustomerEnquiryGroupingValue to get

### Gets the details of a Customer Enquiry GroupingValue [GET]
+ Response 200 (application/json)

        {
            "id": 2,
            "groupingvalue": {
                "id": 3,
                "marketingbrand": "/v2/marketingbrand/3",
                "name": "Irstead",
                "qualifier": "Norfolk",
                "parentgroupingvalue": "/v2/grouping/1/value/1",
                "description": "A small hamlet in the middle of the Broads, close to Wroxham and the East Coast",
                "latitude": "52.234500",
                "longitude": "1.234500",
                "radiuskm": 2,
                "nearkm": 5,
                "promote": false,
                "code": "IRST",
                "geohash": "u12chj4bj"
            },
            "required": false
        }

### Update an Customer Enquiry GroupingValue [PUT]

+ Request (application/x-www-form-urlencoded)

        required=true

+ Response 204

### Deletes a Customer Enquiry GroupingValue [DELETE]

+ Response 204




## Customer Enquiry Property Index [/v2/customer/{id}/enquiry/{id2}/property]
customer/7/enquiry/1/property

+ Parameters

    + id (required, integer, `7`) ... The id of the Customer
    + id2 (required, integer, `1`) ... The id of the CustomerEnquiry

### Get all Propertys for a Customer Enquiry [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "property": {
                    "id": 1,
                    "type": "property",
                    "tabspropref": "1105",
                    "name": "Angler Cottage",
                    "namequalifier": "Irstead",
                    "status": {
                        "id": 1,
                        "name": "Live",
                        "allowbooking": true,
                        "allowoverride": false,
                        "priority": 10,
                        "allowbalance": true
                    },
                    "address": {
                        "id": 58,
                        "line1": "Angler Cottage",
                        "line2": "Hall Road",
                        "line3": "",
                        "town": "Irstead",
                        "county": "Norfolk",
                        "postcode": "NR12 8XP",
                        "country": {
                            "alpha2": "GB",
                            "alpha3": "GBR",
                            "name": "United Kingdom"
                        },
                        "longitude": "1.481100",
                        "latitude": "52.734800",
                        "geohash": "u13h18nd2"
                    },
                    "sleeps": 4,
                    "bedrooms": 2,
                    "accomodationdescription": "1 double 1 twin",
                    "maximumpets": 2,
                    "telephonenumber": "",
                    "checkinearliesttime": "10:20",
                    "checkinlatesttime": "13:45",
                    "checkintext": "If after 5 please leave key under mat",
                    "checkouttime": "14:20",
                    "checkouttext": "Charge extra if 1 minute late!!!",
                    "office": {
                        "office": "/v2/office/50",
                        "name": "Holt"
                    },
                    "brandings": [
                        {
                            "id": 1,
                            "branding": "/v2/branding/3",
                            "primarybranding": true,
                            "brandinggroup": "/v2/brandinggroup/2",
                            "bookingbrand": "/v2/property/1/bookingbrand/1",
                            "primarybookingbrand": true,
                            "marketingbrand": "/v2/property/1/marketingbrand/1",
                            "status": {
                                "id": 1,
                                "name": "Live",
                                "allowbooking": true,
                                "allowoverride": false,
                                "priority": 10,
                                "allowbalance": true
                            },
                            "statusreason": "",
                            "promote": false,
                            "allowbookingonwebuntil": "2099-12-31",
                            "showpricingonwebuntil": "2099-12-31"
                        }
                    ],
                    "rating": 3.5,
                    "ratinginspectiontype": {
                        "id": 1,
                        "inspectiontype": "VisitEngland",
                        "schedule": "1 year",
                        "gradingunit": "Star",
                        "defaultgrading": ""
                    },
                    "primarypropertybranding": {
                        "id": 1,
                        "branding": "/v2/branding/3",
                        "primarybranding": true,
                        "brandinggroup": "/v2/brandinggroup/2",
                        "bookingbrand": "/v2/property/1/bookingbrand/1",
                        "primarybookingbrand": true,
                        "marketingbrand": "/v2/property/1/marketingbrand/1",
                        "status": {
                            "id": 1,
                            "name": "Live",
                            "allowbooking": true,
                            "allowoverride": false,
                            "priority": 10,
                            "allowbalance": true
                        },
                        "statusreason": "",
                        "promote": false,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "houskeeping": {
                        "nextchangedate": null,
                        "bookings": [],
                        "suppliers": [
                            {
                                "activity": "Cleaning",
                                "actor": "/v2/supplier/12",
                                "fromdate": "2013-10-01",
                                "todate": "2100-01-01",
                                "services": [
                                    {
                                        "name": "Towels",
                                        "fromdate": "2015-04-23",
                                        "todate": "2027-07-01"
                                    }
                                ]
                            },
                            {
                                "activity": "Keyholder",
                                "actor": "/v2/supplier/14",
                                "fromdate": "2013-10-01",
                                "todate": "2100-01-01",
                                "services": []
                            }
                        ]
                    },
                    "documents": [
                        {
                            "id": 6,
                            "created": "2017-05-15 15:29:48",
                            "image": {
                                "id": 6,
                                "name": "xyz.jpg",
                                "filename": "xyz.jpg",
                                "timeadded": "2014-01-01 12:00:00",
                                "weight": 0,
                                "private": false,
                                "description": "Bathroom",
                                "mimetype": {
                                    "id": 2,
                                    "name": "image/jpeg",
                                    "shortname": "jpg"
                                },
                                "file": "/v2/file/6",
                                "height": 300,
                                "width": 200,
                                "alt": "The Bathroom"
                            }
                        },
                        {
                            "id": 7,
                            "created": "2017-05-15 15:29:48",
                            "image": {
                                "id": 5,
                                "name": "abc.jpg",
                                "filename": "abc.jpg",
                                "timeadded": "2014-01-01 12:00:00",
                                "weight": 0,
                                "private": false,
                                "description": "Here is another placeholder image",
                                "mimetype": {
                                    "id": 2,
                                    "name": "image/jpeg",
                                    "shortname": "jpg"
                                },
                                "file": "/v2/file/5",
                                "height": 360,
                                "width": 480,
                                "alt": "The empire state building"
                            }
                        }
                    ],
                    "updated": "2017-05-15 15:29:48"
                }
            },
            {
                "id": 2,
                "property": {
                    "id": 2,
                    "type": "property",
                    "tabspropref": "1212",
                    "name": "Reedmere",
                    "namequalifier": "Horning",
                    "status": {
                        "id": 1,
                        "name": "Live",
                        "allowbooking": true,
                        "allowoverride": false,
                        "priority": 10,
                        "allowbalance": true
                    },
                    "address": {
                        "id": 59,
                        "line1": "New Street",
                        "line2": "",
                        "line3": "",
                        "town": "Horning",
                        "county": "Norfolk",
                        "postcode": "NR12 8AA",
                        "country": {
                            "alpha2": "GB",
                            "alpha3": "GBR",
                            "name": "United Kingdom"
                        },
                        "longitude": "1.466114",
                        "latitude": "52.705827",
                        "geohash": "u135c6g9dymb"
                    },
                    "sleeps": 4,
                    "bedrooms": 2,
                    "accomodationdescription": "1 twin 1 double bunk",
                    "maximumpets": 3,
                    "telephonenumber": "01234 808080",
                    "checkinearliesttime": "10:40",
                    "checkinlatesttime": "16:45",
                    "checkintext": "",
                    "checkouttime": "11:20",
                    "checkouttext": "",
                    "office": {
                        "office": "/v2/office/49",
                        "name": "Brighton"
                    },
                    "brandings": [
                        {
                            "id": 2,
                            "branding": "/v2/branding/4",
                            "primarybranding": true,
                            "brandinggroup": "/v2/brandinggroup/1",
                            "bookingbrand": "/v2/property/2/bookingbrand/2",
                            "primarybookingbrand": true,
                            "marketingbrand": "/v2/property/2/marketingbrand/2",
                            "status": {
                                "id": 1,
                                "name": "Live",
                                "allowbooking": true,
                                "allowoverride": false,
                                "priority": 10,
                                "allowbalance": true
                            },
                            "statusreason": "",
                            "promote": false,
                            "allowbookingonwebuntil": "2099-12-31",
                            "showpricingonwebuntil": "2099-12-31"
                        },
                        {
                            "id": 3,
                            "branding": "/v2/branding/6",
                            "primarybranding": false,
                            "brandinggroup": "/v2/brandinggroup/1",
                            "bookingbrand": "/v2/property/2/bookingbrand/3",
                            "primarybookingbrand": false,
                            "marketingbrand": "/v2/property/2/marketingbrand/3",
                            "status": {
                                "id": 1,
                                "name": "Live",
                                "allowbooking": true,
                                "allowoverride": false,
                                "priority": 10,
                                "allowbalance": true
                            },
                            "statusreason": "",
                            "promote": false,
                            "allowbookingonwebuntil": "2099-12-31",
                            "showpricingonwebuntil": "2099-12-31"
                        },
                        {
                            "id": 4,
                            "branding": "/v2/branding/7",
                            "primarybranding": false,
                            "brandinggroup": "/v2/brandinggroup/1",
                            "bookingbrand": "/v2/property/2/bookingbrand/4",
                            "primarybookingbrand": false,
                            "marketingbrand": "/v2/property/2/marketingbrand/4",
                            "status": {
                                "id": 1,
                                "name": "Live",
                                "allowbooking": true,
                                "allowoverride": false,
                                "priority": 10,
                                "allowbalance": true
                            },
                            "statusreason": "",
                            "promote": false,
                            "allowbookingonwebuntil": "2099-12-31",
                            "showpricingonwebuntil": "2099-12-31"
                        }
                    ],
                    "rating": 0,
                    "ratinginspectiontype": {
                        "id": 2,
                        "inspectiontype": "VisitWales",
                        "schedule": "6 months",
                        "gradingunit": "Star",
                        "defaultgrading": ""
                    },
                    "primarypropertybranding": {
                        "id": 2,
                        "branding": "/v2/branding/4",
                        "primarybranding": true,
                        "brandinggroup": "/v2/brandinggroup/1",
                        "bookingbrand": "/v2/property/2/bookingbrand/2",
                        "primarybookingbrand": true,
                        "marketingbrand": "/v2/property/2/marketingbrand/2",
                        "status": {
                            "id": 1,
                            "name": "Live",
                            "allowbooking": true,
                            "allowoverride": false,
                            "priority": 10,
                            "allowbalance": true
                        },
                        "statusreason": "",
                        "promote": false,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "houskeeping": {
                        "nextchangedate": null,
                        "bookings": [],
                        "suppliers": [
                            {
                                "activity": "Cleaning",
                                "actor": "/v2/supplier/14",
                                "fromdate": "2013-10-01",
                                "todate": "2100-01-01",
                                "services": [
                                    {
                                        "name": "Cleaning",
                                        "fromdate": "2015-04-23",
                                        "todate": "2017-07-01"
                                    }
                                ]
                            },
                            {
                                "activity": "Keyholder",
                                "actor": "/v2/supplier/14",
                                "fromdate": "2013-10-01",
                                "todate": "2100-01-01",
                                "services": []
                            }
                        ]
                    },
                    "documents": [
                        {
                            "id": 8,
                            "created": "2017-05-15 15:29:48",
                            "image": {
                                "id": 5,
                                "name": "abc.jpg",
                                "filename": "abc.jpg",
                                "timeadded": "2014-01-01 12:00:00",
                                "weight": 0,
                                "private": false,
                                "description": "Here is another placeholder image",
                                "mimetype": {
                                    "id": 2,
                                    "name": "image/jpeg",
                                    "shortname": "jpg"
                                },
                                "file": "/v2/file/5",
                                "height": 360,
                                "width": 480,
                                "alt": "The empire state building"
                            }
                        },
                        {
                            "id": 9,
                            "created": "2017-05-15 15:29:48",
                            "image": {
                                "id": 4,
                                "name": "placeholder.jpg",
                                "filename": "placeholder.jpg",
                                "timeadded": "2014-01-01 12:00:00",
                                "weight": 0,
                                "private": false,
                                "description": "Here is a placeholder image",
                                "mimetype": {
                                    "id": 2,
                                    "name": "image/jpeg",
                                    "shortname": "jpg"
                                },
                                "file": "/v2/file/4",
                                "height": 300,
                                "width": 200,
                                "alt": "An image"
                            }
                        }
                    ],
                    "updated": "2017-05-15 15:29:48"
                }
            }
        ]

### Add a new Property to a Enquiry Customer [POST]

The following fields should be provided in the POST array

* ```propertyid``` The Property id

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/customer/1/enquiry/1/property

## Customer Enquiry Property Detail [/v2/customer/{id}/enquiry/{id2}/property/{id3}]

+ Parameters

    + id (required, integer, `7`) ... The id of the Customer
    + id2 (required, integer, `1`) ... The id of the CustomerEnquiry to get
    + id3 (required, integer, `2`) ... The id of the CustomerEnquiryProperty to get

### Gets the details of a Customer Enquiry Property [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "property": {
                "id": 2,
                "type": "property",
                "tabspropref": "1212",
                "name": "Reedmere",
                "namequalifier": "Horning",
                "status": {
                    "id": 1,
                    "name": "Live",
                    "allowbooking": true,
                    "allowoverride": false,
                    "priority": 10,
                    "allowbalance": true
                },
                "address": {
                    "id": 59,
                    "line1": "New Street",
                    "line2": "",
                    "line3": "",
                    "town": "Horning",
                    "county": "Norfolk",
                    "postcode": "NR12 8AA",
                    "country": {
                        "alpha2": "GB",
                        "alpha3": "GBR",
                        "name": "United Kingdom"
                    },
                    "longitude": "1.466114",
                    "latitude": "52.705827",
                    "geohash": "u135c6g9dymb"
                },
                "sleeps": 4,
                "bedrooms": 2,
                "accomodationdescription": "1 twin 1 double bunk",
                "maximumpets": 3,
                "telephonenumber": "01234 808080",
                "checkinearliesttime": "10:40",
                "checkinlatesttime": "16:45",
                "checkintext": "",
                "checkouttime": "11:20",
                "checkouttext": "",
                "office": {
                    "office": "/v2/office/49",
                    "name": "Brighton"
                },
                "brandings": [
                    {
                        "id": 2,
                        "branding": "/v2/branding/4",
                        "primarybranding": true,
                        "brandinggroup": "/v2/brandinggroup/1",
                        "bookingbrand": "/v2/property/2/bookingbrand/2",
                        "primarybookingbrand": true,
                        "marketingbrand": "/v2/property/2/marketingbrand/2",
                        "status": {
                            "id": 1,
                            "name": "Live",
                            "allowbooking": true,
                            "allowoverride": false,
                            "priority": 10,
                            "allowbalance": true
                        },
                        "statusreason": "",
                        "promote": false,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    {
                        "id": 3,
                        "branding": "/v2/branding/6",
                        "primarybranding": false,
                        "brandinggroup": "/v2/brandinggroup/1",
                        "bookingbrand": "/v2/property/2/bookingbrand/3",
                        "primarybookingbrand": false,
                        "marketingbrand": "/v2/property/2/marketingbrand/3",
                        "status": {
                            "id": 1,
                            "name": "Live",
                            "allowbooking": true,
                            "allowoverride": false,
                            "priority": 10,
                            "allowbalance": true
                        },
                        "statusreason": "",
                        "promote": false,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    {
                        "id": 4,
                        "branding": "/v2/branding/7",
                        "primarybranding": false,
                        "brandinggroup": "/v2/brandinggroup/1",
                        "bookingbrand": "/v2/property/2/bookingbrand/4",
                        "primarybookingbrand": false,
                        "marketingbrand": "/v2/property/2/marketingbrand/4",
                        "status": {
                            "id": 1,
                            "name": "Live",
                            "allowbooking": true,
                            "allowoverride": false,
                            "priority": 10,
                            "allowbalance": true
                        },
                        "statusreason": "",
                        "promote": false,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    }
                ],
                "rating": 0,
                "ratinginspectiontype": {
                    "id": 2,
                    "inspectiontype": "VisitWales",
                    "schedule": "6 months",
                    "gradingunit": "Star",
                    "defaultgrading": ""
                },
                "primarypropertybranding": {
                    "id": 2,
                    "branding": "/v2/branding/4",
                    "primarybranding": true,
                    "brandinggroup": "/v2/brandinggroup/1",
                    "bookingbrand": "/v2/property/2/bookingbrand/2",
                    "primarybookingbrand": true,
                    "marketingbrand": "/v2/property/2/marketingbrand/2",
                    "status": {
                        "id": 1,
                        "name": "Live",
                        "allowbooking": true,
                        "allowoverride": false,
                        "priority": 10,
                        "allowbalance": true
                    },
                    "statusreason": "",
                    "promote": false,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                },
                "houskeeping": {
                    "nextchangedate": null,
                    "bookings": [],
                    "suppliers": [
                        {
                            "activity": "Cleaning",
                            "actor": "/v2/supplier/14",
                            "fromdate": "2013-10-01",
                            "todate": "2100-01-01",
                            "services": [
                                {
                                    "name": "Cleaning",
                                    "fromdate": "2015-04-23",
                                    "todate": "2017-07-01"
                                }
                            ]
                        },
                        {
                            "activity": "Keyholder",
                            "actor": "/v2/supplier/14",
                            "fromdate": "2013-10-01",
                            "todate": "2100-01-01",
                            "services": []
                        }
                    ]
                },
                "documents": [
                    {
                        "id": 8,
                        "created": "2017-05-15 15:29:48",
                        "image": {
                            "id": 5,
                            "name": "abc.jpg",
                            "filename": "abc.jpg",
                            "timeadded": "2014-01-01 12:00:00",
                            "weight": 0,
                            "private": false,
                            "description": "Here is another placeholder image",
                            "mimetype": {
                                "id": 2,
                                "name": "image/jpeg",
                                "shortname": "jpg"
                            },
                            "file": "/v2/file/5",
                            "height": 360,
                            "width": 480,
                            "alt": "The empire state building"
                        }
                    },
                    {
                        "id": 9,
                        "created": "2017-05-15 15:29:48",
                        "image": {
                            "id": 4,
                            "name": "placeholder.jpg",
                            "filename": "placeholder.jpg",
                            "timeadded": "2014-01-01 12:00:00",
                            "weight": 0,
                            "private": false,
                            "description": "Here is a placeholder image",
                            "mimetype": {
                                "id": 2,
                                "name": "image/jpeg",
                                "shortname": "jpg"
                            },
                            "file": "/v2/file/4",
                            "height": 300,
                            "width": 200,
                            "alt": "An image"
                        }
                    }
                ],
                "updated": "2017-05-15 15:29:48"
            }
        }

### Update a Customer Enquiry Property [PUT]
Not implemented

+ Response 501

### Deletes a Customer Enquiry Property [DELETE]

+ Response 204




# Group Document
The document routes allow the control of documents / images within the api.

## Document Index [/v2/document]
### Get information about all Documents, but not the actual documents [GET]

+ Response 200

        {
            "searchId": 0,
            "total": 3,
            "page": 1,
            "count": 3,
            "limit": 10,
            "time": 0,
            "orderBy": null,
            "filter": "",
            "previous": null,
            "next": null,
            "elements": [
                {
                    "id": 1,
                    "name": "Tabs 2 roadmap.pdf",
                    "filename": "Tabs 2 roadmap.pdf",
                    "timeadded": "2014-01-01 12:00:00",
                    "weight": 0,
                    "private": false,
                    "description": "A document",
                    "mimetype": {
                        "id": 1,
                        "name": "application/pdf",
                        "shortname": "pdf"
                    },
                    "file": "/v2/file/1"
                },
                {
                    "id": 2,
                    "name": "A Simple text file",
                    "filename": "A Simple Text File.txt",
                    "timeadded": "2014-01-01 12:00:00",
                    "weight": 0,
                    "private": false,
                    "description": "Text file",
                    "mimetype": {
                        "id": 3,
                        "name": "text/plain",
                        "shortname": "txt"
                    },
                    "file": "/v2/file/2"
                },
                {
                    "id": 3,
                    "name": "A bit of text attached to a contact",
                    "filename": "A Simple Text File.txt",
                    "timeadded": "2014-01-01 12:00:00",
                    "weight": 0,
                    "private": false,
                    "description": "Text file",
                    "mimetype": {
                        "id": 3,
                        "name": "text/plain",
                        "shortname": "txt"
                    },
                    "file": "/v2/file/3"
                }
            ]
        }

### Add a new Document [POST]

The following fields should be provided in the POST array

* ```data``` The blob data of the document that's being added

Optionally, the following fields could also be supplied.

* ```name```        String. The filename (will be defaulted by the name of the file being uploaded).
* ```weight```      Number. The document weight.  Can be used for ordering documents.
* ```description``` String.  A description of the document.
* ```private```     Boolean. Defaulted to true, can be set to false to hide document visibility.

+ Response 201

    + Headers

            Location: /v2/document/1

## Document Detail [/v2/document/{id}]
+ Parameters

    + id (required, integer, `1`) ... The id of the Document to get

### Gets the details of a Document [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "Tabs 2 roadmap.pdf",
            "filename": "Tabs 2 roadmap.pdf",
            "timeadded": "2014-01-01 12:00:00",
            "weight": 0,
            "private": false,
            "description": "A document",
            "mimetype": {
                "id": 1,
                "name": "application/pdf",
                "shortname": "pdf"
            },
            "file": "/v2/file/1"
        }

### Update a Document [PUT]

+ Request (application/x-www-form-urlencoded)

        description=This is my file

+ Response 204

### Deletes a Document [DELETE]

+ Response 204



## DocumentNote Index [/v2/documentnote]
### Get all Document Notes [GET]

+ Response 200


        [
            {
                "id": 1,
                "document": "/v2/document/2",
                "note": "/v2/note/2"
            },
            {
                "id": 2,
                "document": "/v2/image/5",
                "note": "/v2/note/2"
            }
        ]

### Add an existing Note to a Document[POST]
The following fields should be provided in the POST array:

* ```documentid``` Id of Note to add to the Document
* ```noteid``` Id of Note to add to the Document

+ Response 201

    + Headers

            Location: http://plato.apiary.io/v2/documentnote/1

## DocumentNote Detail [/v2/documentnote/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the DocumentNote

### Retreive an invidual DocumentNote [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "document": "/v2/document/2",
            "note": "/v2/note/2"
        }

### Updates the Document Note for for a given id [PUT]
Not implemented - use /v2/note/{id}

+ Response 501

### Removes the Document from the Note [DELETE]

+ Response 204



## Image Index [/v2/image]
### Get information about all Images, but not the actual images [GET]

+ Response 501

### Add a new Image [POST]
The following fields should be provided in the POST array

* ```data``` The blob data of the image that's being added

Optionally, the following fields could also be supplied.

* ```name```        String. The filename (will be defaulted by the name of the file being uploaded).
* ```weight```      Number. The image weight.  Can be used for ordering images.
* ```description``` String.  A description of the image.
* ```private```     Boolean. Defaulted to true, can be set to false to hide image visibility.
* ```height```      Integer. Image height.
* ```width```       Integer. Image width.
* ```alt```         String. An alternative description.

+ Response 201

    + Headers

            Location: /v2/image/1

## Image Detail [/v2/image/{id}]
+ Parameters

    + id (required, integer, `5`) ... The id of the Image to get

### Gets the details of a Image [GET]

+ Response 200 (application/json)

        {
            "id": 5,
            "name": "xyz.jpg",
            "filename": "xyz.jpg",
            "timeadded": "2014-01-01 12:00:00",
            "weight": 0,
            "private": false,
            "description": "Bathroom",
            "mimetype": {
                "id": 2,
                "name": "image/jpeg",
                "shortname": "jpg"
            },
            "file": "/v2/file/5",
            "height": 300,
            "width": 200,
            "alt": "The Bathroom"
        }

### Update a Image [PUT]

+ Request (application/x-www-form-urlencoded)

        description=This is my file

+ Response 204

### Deletes a Image [DELETE]

+ Response 204



## Mimetype Index [/v2/mimetype]
### Get all Mimetypes [GET]

+ Response 200

        [
            {
                "id": 1,
                "name": "application/pdf",
                "shortname": "pdf"
            },
            {
                "id": 2,
                "name": "image/jpeg",
                "shortname": "jpg"
            },
            {
                "id": 3,
                "name": "text/plain",
                "shortname": "txt"
            }
        ]

### Add a new Mimetype [POST]

The following fields should be provided in the POST array

* ```name``` The name of the mimetype
* ```shortname``` The short name of the mimetype

+ Response 201

    + Headers

            Location: /v2/mimetype/1

## Mimetype Detail [/v2/mimetype/{id}]
+ Parameters

    + id (required, integer, `2`) ... The id of the Mimetype to get

### Gets the details of a Mimetype [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "name": "image/jpeg",
            "shortname": "jpg"
        }

### Update a Mimetype [PUT]

+ Request (application/x-www-form-urlencoded)

        description=This is my file

+ Response 204

### Deletes a Mimetype [DELETE]

+ Response 204



# Group Exchange Rate

## Currency Index [/v2/currency]
### Get all Currencies [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
            },
            {
                "id": 2,
                "code": "EUR",
                "name": "Euro",
                "decimalplaces": 2
            }
        ]

### Add a new Currency [POST]

The following fields should be provided in the POST array

* ```code``` The code of the Currency being added
* ```name``` The name of the Currency being added
* ```decimalplaces``` The number of decimal places to use when displaying values in the currency.

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/currency/2

## Currency Detail [/v2/currency/{id}]
### Gets the details of a Currency [GET]
+ Parameters

    + id (required, integer, `2`) ... The id of the Currency to get

+ Response 200 (application/json)

        {
            "id": 2,
            "code": "EUR",
            "name": "Euro",
            "decimalplaces": 2
        }

### Update a Currency [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the Currency

+ Request (application/x-www-form-urlencoded)

        decimalplaces=3

+ Response 204

### Deletes a Currency [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the Currency

+ Response 204




## ExchangeRateIssue Rate Index [/v2/exchangerateissue/{id}/rate]

+ Parameters

    + id (required, integer, `1`) ... The id of the ExchangeRateIssue

### Get all Rates for a ExchangeRateIssue [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "currency": {
                    "id": 1,
                    "code": "GBP",
                    "name": "Pound Sterling",
                    "decimalplaces": 2
                },
                "unitsperbaseunit": 1
            },
            {
                "id": 2,
                "currency": {
                    "id": 2,
                    "code": "EUR",
                    "name": "Euro",
                    "decimalplaces": 2
                },
                "unitsperbaseunit": 1.123456
            }
        ]

### Add a new ExchangeRateIssueRate [POST]
The following fields should be provided in the POST array

* ```currencyid``` The id of the Currency
* ```unitsperbaseunit``` The number to multiply the base currency value by to get the value in the specified currency

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/exchangerateissue/1/rate/1

## ExchangeRateIssue Rate Details [/v2/exchangerateissue/{id}/rate/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the ExchangeRateIssue
    + id2 (required, integer, `1`) ... The id of the ExchangeRate

### Get the details of a Rate [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
            },
            "unitsperbaseunit": 1
        }

### Update a Rate [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output.

+ Request (application/x-www-form-urlencoded)

        unitsperbaseunit=2

+ Response 204

### Delete a Rate [DELETE]

+ Response 204



## ExchangeRateIssue Index [/v2/exchangerateissue]
### Get all Exchange Rates [GET]

+ Response 200 (application/json)

        [
          {
              "id": 1,
              "type": {
                  "id": 2,
                  "exchangerateissuetype": "Booking",
                  "description": "The exchange rate to use when taking a payment for a booking"
              },
              "currency": {
                  "id": 1,
                  "code": "GBP",
                  "name": "Pound Sterling",
                  "decimalplaces": 2
              },
              "issuenumber": "1",
              "fromdate": "2016-01-01",
              "todate": "2016-12-31",
              "description": "This year",
              "exchangeRates": [
                  {
                      "id": 1,
                      "currency": {
                        "id": 1,
                        "code": "GBP",
                        "name": "Pound Sterling",
                        "decimalplaces": 2
                      },
                      "unitsperbaseunit": 1
                  },
                  {
                      "id": 2,
                      "currency": {
                          "id": 2,
                          "code": "EUR",
                          "name": "Euro",
                          "decimalplaces": 2
                      },
                      "unitsperbaseunit": 1.123456
                  }
              ]
          },
          {
            "id": 2,
            "type": {
                "id": 2,
                "exchangerateissuetype": "Booking",
                "description": "The exchange rate to use when taking a payment for a booking"
            },
            "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
            },
            "issuenumber": "2",
            "fromdate": "2017-01-01",
            "todate": "2017-12-31",
            "description": "Next year",
            "exchangeRates": [
                {
                    "id": 3,
                    "currency": {
                        "id": 1,
                        "code": "GBP",
                        "name": "Pound Sterling",
                        "decimalplaces": 2
                    },
                    "unitsperbaseunit": 1
                },
                {
                    "id": 4,
                    "currency": {
                        "id": 2,
                        "code": "EUR",
                        "name": "Euro",
                        "decimalplaces": 2
                    },
                    "unitsperbaseunit": 1.2
                }
            ]
          }
        ]

### Add a new ExchangeRateIssue [POST]

The following fields should be provided in the POST array

* ```exchangerateissuetypeid``` The ExchangeRateIssueType id
* ```currencyid``` The id of the base Currency for all rates in this Issue
* ```issuenumber``` A unique code identifying the issue
* ```fromdate``` The date the rates apply from
* ```todate``` The date the rates apply to
* ```description``` A description of the issue

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/exchangerateissue/2

## ExchangeRateIssue Detail [/v2/exchangerateissue/{id}]
+ Parameters

    + id (required, integer, `2`) ... The id of the ExchangeRateIssue

### Get the details of an ExchangeRateIssue [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "type": {
                "id": 2,
                "exchangerateissuetype": "Booking",
                "description": "The exchange rate to use when taking a payment for a booking"
            },
            "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
            },
            "issuenumber": "2",
            "fromdate": "2017-01-01",
            "todate": "2017-12-31",
            "description": "Next year",
            "exchangeRates": [
                {
                    "id": 3,
                    "currency": {
                        "id": 1,
                        "code": "GBP",
                        "name": "Pound Sterling",
                        "decimalplaces": 2
                    },
                    "unitsperbaseunit": 1
                },
                {
                    "id": 4,
                    "currency": {
                        "id": 2,
                        "code": "EUR",
                        "name": "Euro",
                        "decimalplaces": 2
                    },
                    "unitsperbaseunit": 1.2
                }
            ]
        }

### Update an ExchangeRateIssue [PUT]

+ Request (application/x-www-form-urlencoded)

        todate=2016-12-31

+ Response 204

### Delete an ExchangeRateIssue [DELETE]

+ Response 204



## ExchangeRateIssueType Index [/v2/exchangerateissuetype]
### Get all Exchange Rates [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "exchangerateissuetype": "Accounting",
                "description": "The exchange rate to use for accounting purposes"
            },
            {
                "id": 2,
                "exchangerateissuetype": "Booking",
                "description": "The exchange rate to use when taking a payment for a booking"
            },
            {
                "id": 3,
                "exchangerateissuetype": "OwnerPayment",
                "description": "The exchange rate to use when paying owners"
            }
        ]

### Add a new ExchangeRateIssueType [POST]

The following fields should be provided in the POST array

* ```exchangerateissuetype``` The ExchangeRateIssueType
* ```description``` Description of what exchange rates of this issue type are used for

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/exchangerateissuetype/2

## ExchangeRateIssueType Detail [/v2/exchangerateissuetype/{id}]
+ Parameters

    + id (required, integer, `2`) ... The id of the ExchangeRateIssueType

### Get the details of an ExchangeRateIssueType [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "exchangerateissuetype": "Booking",
            "description": "The exchange rate to use when taking a payment for a booking"
        }

### Update an ExchangeRateIssueType [PUT]

+ Request (application/x-www-form-urlencoded)

        description=Blah blah blah

+ Response 204

### Delete an ExchangeRateIssueType [DELETE]

+ Response 204




# Group Extra
An extra is an additional cost to a booking.

## Extra Index [/v2/extra]
### Get all Extras [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "extracode": "BKFE",
                "extratype": "Booking",
                "description": "Booking Fee",
                "brandings": [
                    "/v2/branding/1",
                    "/v2/branding/2",
                    "/v2/branding/3"
                ]
            },
            {
                "id": 2,
                "extracode": "CANC",
                "extratype": "Booking",
                "description": "Cancellation Scheme",
                "brandings": [
                    "/v2/branding/1",
                    "/v2/branding/3"
                ]
            },
            {
                "id": 3,
                "extracode": "HEAT",
                "extratype": "Booking",
                "description": "Heating",
                "brandings": [
                    "/v2/branding/2",
                    "/v2/branding/3"
                ]
            },
            {
                "id": 4,
                "extracode": "PET",
                "extratype": "Booking",
                "description": "Pet charge",
                "brandings": [
                    "/v2/branding/3"
                ]
            },
            {
                "id": 5,
                "extracode": "UNITPR",
                "extratype": "Booking",
                "description": "Unit Priced Extra",
                "brandings": [
                    "/v2/branding/1"
                ]
            },
            {
                "id": 6,
                "extracode": "WEEKPR",
                "extratype": "Booking",
                "description": "Week Priced Extra",
                "brandings": [
                    "/v2/branding/1",
                    "/v2/branding/3"
                ]
            },
            {
                "id": 7,
                "extracode": "DAILYPR",
                "extratype": "Booking",
                "description": "Week Priced Extra",
                "brandings": [
                    "/v2/branding/1"
                ]
            },
            {
                "id": 8,
                "extracode": "CON",
                "extratype": "Booking",
                "description": "Concierge Service",
                "brandings": [
                    "/v2/branding/3"
                ]
            },
            {
                "id": 9,
                "extracode": "OFEE",
                "extratype": "Booking",
                "description": "Owner Fee",
                "brandings": [
                    "/v2/branding/3"
                ]
            },
            {
                "id": 10,
                "extracode": "CCC",
                "extratype": "Booking",
                "description": "Credit Card Charge",
                "brandings": [
                    "/v2/branding/3",
                    "/v2/branding/1"
                ]
            },
            {
                "id": 11,
                "extracode": "GY01",
                "extratype": "Marketing",
                "description": "Gym Membership",
                "brandings": [
                    "/v2/branding/1"
                ]
            }
        ]

### Add a new Extra [POST]
The following fields should be provided in the POST array

* ```extracode``` The code of the Extra being added
* ```extratype``` The type of extra, Booking or Marketing
* ```description``` The description of the extra.

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/extra/2

## Extra Detail [/v2/extra/{id}]
### Gets the details of a Extra [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the Extra to get

+ Response 200 (application/json)

        {
            "id": 1,
            "extracode": "BKFE",
            "extratype": "Booking",
            "description": "Booking Fee",
            "brandings": [
                "/v2/branding/1",
                "/v2/branding/2",
                "/v2/branding/3"
            ]
        }

### Update a Extra [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the Extra

+ Request (application/x-www-form-urlencoded)

        description=new booking fee

+ Response 204

### Deletes a Extra [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the Extra

+ Response 204



## Extra Branding Index [/v2/extra/{id}/branding]
Postman: /v2/extra/1/branding

+ Parameters

    + id (required, integer, `1`) ... The id of the Extra

### Get all Brandings for an Extra [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "extra": {
                "id": 1,
                "extracode": "BKFE",
                "extratype": "Booking",
                "description": "Booking Fee",
                "brandings": [
                  "/v2/branding/1",
                  "/v2/branding/2",
                  "/v2/branding/3",
                  "/v2/branding/4",
                  "/v2/branding/6"
                ]
              },
              "branding": {
                "id": 1,
                "brandinggroup": {
                  "id": 1,
                  "code": "SWAA",
                  "name": "South West",
                  "agency": "/v2/agency/5",
                  "workorderssettings": []
                },
                "marketingbrand": {
                  "id": 1,
                  "code": "MAD",
                  "name": "Marsdens Devon",
                  "agency": "/v2/agency/3",
                  "defaultbookingbrand": "/v2/bookingbrand/1",
                  "website": "www.mad.co.uk",
                  "email": "info@mad.co.uk"
                },
                "bookingbrand": {
                  "id": 1,
                  "code": "MAD",
                  "name": "Mardens Devon",
                  "agency": "/v2/agency/3"
                },
                "lettingincomevatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "bacsbankaccount": "",
                "bacsoutputtype": null,
                "bacssettings": null,
                "allowbookingonwebuntil": "2099-12-31",
                "showpricingonwebuntil": "2099-12-31"
              },
              "petextrabranding": false
            },
            {
              "id": 2,
              "extra": {
                "id": 1,
                "extracode": "BKFE",
                "extratype": "Booking",
                "description": "Booking Fee",
                "brandings": [
                  "/v2/branding/1",
                  "/v2/branding/2",
                  "/v2/branding/3",
                  "/v2/branding/4",
                  "/v2/branding/6"
                ]
              },
              "branding": {
                "id": 2,
                "brandinggroup": {
                  "id": 1,
                  "code": "SWAA",
                  "name": "South West",
                  "agency": "/v2/agency/5",
                  "workorderssettings": []
                },
                "marketingbrand": {
                  "id": 2,
                  "code": "MAC",
                  "name": "Marsdens Cornwall",
                  "agency": "/v2/agency/3",
                  "defaultbookingbrand": "/v2/bookingbrand/2",
                  "website": null,
                  "email": null
                },
                "bookingbrand": {
                  "id": 2,
                  "code": "MAC",
                  "name": "Mardens Cornwall",
                  "agency": "/v2/agency/3"
                },
                "lettingincomevatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "bacsbankaccount": "",
                "bacsoutputtype": null,
                "bacssettings": null,
                "allowbookingonwebuntil": "2099-12-31",
                "showpricingonwebuntil": "2099-12-31"
              },
              "petextrabranding": false
            },
            {
              "id": 12,
              "extra": {
                "id": 1,
                "extracode": "BKFE",
                "extratype": "Booking",
                "description": "Booking Fee",
                "brandings": [
                  "/v2/branding/1",
                  "/v2/branding/2",
                  "/v2/branding/3",
                  "/v2/branding/4",
                  "/v2/branding/6"
                ]
              },
              "branding": {
                "id": 3,
                "brandinggroup": {
                  "id": 2,
                  "code": "NOAA",
                  "name": "Norfolk",
                  "agency": "/v2/agency/4",
                  "workorderssettings": [
                    "/v2/brandinggroup/2/workorderssettings/1"
                  ]
                },
                "marketingbrand": {
                  "id": 3,
                  "code": "NOMM",
                  "name": "Norfolk Country Cottages",
                  "agency": "/v2/agency/4",
                  "defaultbookingbrand": "/v2/bookingbrand/3",
                  "website": "www.norfolk.co.uk",
                  "email": "info@norfolk.co.uk"
                },
                "bookingbrand": {
                  "id": 3,
                  "code": "NOBB",
                  "name": "Norfolk Country Cottages",
                  "agency": "/v2/agency/4"
                },
                "lettingincomevatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "bacsbankaccount": "",
                "bacsoutputtype": null,
                "bacssettings": null,
                "allowbookingonwebuntil": "2099-12-31",
                "showpricingonwebuntil": "2099-12-31",
                "petextrabranding": {
                  "id": 11,
                  "extra": {
                    "id": 4,
                    "extracode": "PET",
                    "extratype": "Booking",
                    "description": "Pet charge",
                    "brandings": [
                      "/v2/branding/3"
                    ]
                  }
                }
              },
              "petextrabranding": false
            },
            {
              "id": 21,
              "extra": {
                "id": 1,
                "extracode": "BKFE",
                "extratype": "Booking",
                "description": "Booking Fee",
                "brandings": [
                  "/v2/branding/1",
                  "/v2/branding/2",
                  "/v2/branding/3",
                  "/v2/branding/4",
                  "/v2/branding/6"
                ]
              },
              "branding": {
                "id": 4,
                "brandinggroup": {
                  "id": 1,
                  "code": "SWAA",
                  "name": "South West",
                  "agency": "/v2/agency/5",
                  "workorderssettings": []
                },
                "marketingbrand": {
                  "id": 4,
                  "code": "MAMM",
                  "name": "Marsdens",
                  "agency": "/v2/agency/5",
                  "defaultbookingbrand": "/v2/bookingbrand/4",
                  "website": "www.mabb.co.uk",
                  "email": "info@mabb.co.uk"
                },
                "bookingbrand": {
                  "id": 4,
                  "code": "MABB",
                  "name": "Marsdens Devon Cottages",
                  "agency": "/v2/agency/5"
                },
                "lettingincomevatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "bacsbankaccount": "",
                "bacsoutputtype": null,
                "bacssettings": null,
                "allowbookingonwebuntil": "2099-12-31",
                "showpricingonwebuntil": "2099-12-31"
              },
              "petextrabranding": false
            },
            {
              "id": 43,
              "extra": {
                "id": 1,
                "extracode": "BKFE",
                "extratype": "Booking",
                "description": "Booking Fee",
                "brandings": [
                  "/v2/branding/1",
                  "/v2/branding/2",
                  "/v2/branding/3",
                  "/v2/branding/4",
                  "/v2/branding/6"
                ]
              },
              "branding": {
                "id": 6,
                "brandinggroup": {
                  "id": 1,
                  "code": "SWAA",
                  "name": "South West",
                  "agency": "/v2/agency/5",
                  "workorderssettings": []
                },
                "marketingbrand": {
                  "id": 5,
                  "code": "CCMM",
                  "name": "Completely Cottages",
                  "agency": "/v2/agency/6",
                  "defaultbookingbrand": "/v2/bookingbrand/5",
                  "website": "www.comm.co.uk",
                  "email": "info@comm.co.uk"
                },
                "bookingbrand": {
                  "id": 5,
                  "code": "CCBB",
                  "name": "Completely Cottages",
                  "agency": "/v2/agency/6"
                },
                "lettingincomevatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "bacsbankaccount": "",
                "bacsoutputtype": null,
                "bacssettings": null,
                "allowbookingonwebuntil": "2099-12-31",
                "showpricingonwebuntil": "2099-12-31"
              },
              "petextrabranding": false
            }
          ]

### Add a new Branding to an Extra [POST]

The following fields should be provided in the POST array

* ```brandingid``` The Id of the Branding

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/extra/1/branding/2

## Extra Branding Detail [/v2/extra/{id}/branding/{eid}]
Postman: /v2/extra/1/branding/2

+ Parameters

    + id (required, integer, `1`) ... The id of the Extra
    + eid (required, integer, `2`) ... The id of the ExtraBranding to get

### Gets the details of an Extra Branding [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "extra": {
              "id": 1,
              "extracode": "BKFE",
              "extratype": "Booking",
              "description": "Booking Fee",
              "brandings": [
                "/v2/branding/1",
                "/v2/branding/2",
                "/v2/branding/3",
                "/v2/branding/4",
                "/v2/branding/6"
              ]
            },
            "branding": {
              "id": 2,
              "brandinggroup": {
                "id": 1,
                "code": "SWAA",
                "name": "South West",
                "agency": "/v2/agency/5",
                "workorderssettings": []
              },
              "marketingbrand": {
                "id": 2,
                "code": "MAC",
                "name": "Marsdens Cornwall",
                "agency": "/v2/agency/3",
                "defaultbookingbrand": "/v2/bookingbrand/2",
                "website": null,
                "email": null
              },
              "bookingbrand": {
                "id": 2,
                "code": "MAC",
                "name": "Mardens Cornwall",
                "agency": "/v2/agency/3"
              },
              "lettingincomevatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "bacsbankaccount": "",
              "bacsoutputtype": null,
              "bacssettings": null,
              "allowbookingonwebuntil": "2099-12-31",
              "showpricingonwebuntil": "2099-12-31"
            },
            "petextrabranding": false
          }

### Update an Extra's Branding [PUT]

+ Response 501

### Deletes an Extra's Branding [DELETE]

+ Response 204




## Extra Branding Configuration Index [/v2/extra/{id}/branding/{id2}/configuration]

+ Parameters

    + id (required, integer, `1`) ... The id of the Extra
    + id2 (required, integer, `1`) ... The id of the ExtraBranding

### Get all Configurations for a Branding Extra [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "fromdate": "2014-01-01",
              "todate": "2024-01-01",
              "compulsory": true,
              "included": true,
              "decimalplaces": 2,
              "payagency": true,
              "payowner": false,
              "visibletoowner": true,
              "visibletocustomer": false,
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "customerselectable": false,
              "priceoverrideallowed": true,
              "defaultquantity": 1,
              "quantityoverrideallowed": true,
              "maximumquantity": 1,
              "usepropertyprimarybranding": false,
              "changesbrochureprice": false,
              "type": "BrandExtraConfiguration"
            },
            {
              "id": 2,
              "fromdate": "2024-01-01",
              "todate": "2034-01-01",
              "compulsory": true,
              "included": false,
              "decimalplaces": 2,
              "payagency": true,
              "payowner": false,
              "visibletoowner": true,
              "visibletocustomer": true,
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "customerselectable": false,
              "priceoverrideallowed": true,
              "defaultquantity": 1,
              "quantityoverrideallowed": true,
              "maximumquantity": 1,
              "usepropertyprimarybranding": false,
              "changesbrochureprice": false,
              "type": "BrandExtraConfiguration"
            }
          ]

### Add a new Configuration to a Branding Extra [POST]

The following fields should be provided in the POST array

* ```propertyid``` The Id of the Property (for Property configurations only)
* ```fromdate``` The date the configuration is applicable from
* ```todate``` The date the configuration is applicable to
* ```compulsory``` Whether the extra is compulsory, i.e. must be purchased
* ```included``` Whether the extra is included in the brochure price
* ```decimalplaces``` The number of decimal places permitted / shown in the price
* ```payagency``` Whether the agency gets any/all of the money
* ```payowner``` Whether the owner gets any/all of the money
* ```visibletoowner``` Whether the extra appears on owner communications
* ```visibletocustomer``` Whether the extra appears on customer communications
* ```vatband``` The VAT Band (type, Standard, Reduced etc.)
* ```customerselectable``` Whether the customer can add the extra to a booking or not (optional, default: false)
* ```priceoverrideallowed``` Whether the user can override the price of the extra (optional, default: true)
* ```defaultquantity``` The default number of this extra which will be added to a booking (optional, default: 1)
* ```quantityoverrideallowed``` Whether the user can override the quantity of the extra (optional, default: true)
* ```maximumquantity``` The maximum number of this extra which can be added to a booking (optional, default: 1)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/extra/1/branding/2/configuration

## Extra Branding Configuration Detail [/v2/extra/{id}/branding/{id2}/configuration/{id3}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Extra
    + id2 (required, integer, `1`) ... The id of the ExtraBranding
    + id3 (required, integer, `2`) ... The id of the ExtraConfiguration to update

### Gets the details of an Extra Branding Configuration [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "fromdate": "2024-01-01",
            "todate": "2034-01-01",
            "compulsory": true,
            "included": false,
            "decimalplaces": 2,
            "payagency": true,
            "payowner": false,
            "visibletoowner": true,
            "visibletocustomer": true,
            "vatband": {
              "id": 2,
              "vatband": "Standard"
            },
            "customerselectable": false,
            "priceoverrideallowed": true,
            "defaultquantity": 1,
            "quantityoverrideallowed": true,
            "maximumquantity": 1,
            "usepropertyprimarybranding": false,
            "changesbrochureprice": false,
            "type": "BrandExtraConfiguration"
          }

### Update an Extra Branding Configuration [PUT]

+ Request (application/x-www-form-urlencoded)

        todate="2015-02-01"

+ Response 204

### Deletes an Extra Branding Configuration [DELETE]

+ Response 204




## Extra Branding Pricing Index [/v2/extra/{id}/branding/{id2}/pricing]
+ Parameters

    + id (required, integer, `1`) ... The id of the Extra
    + id2 (required, integer, `1`) ... The id of the ExtraBranding

### Get all Pricings for a Branding Extra [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "pricingperiod": "Week",
                "fromdate": "2023-01-01",
                "todate": "2023-01-31",
                "currency": {
                    "id": 1,
                    "code": "GBP",
                    "name": "Pound Sterling",
                    "decimalplaces": 2
                },
                "pricingtype": "Amount",
                "perperiod": false,
                "price": 23.45,
                "peradult": false,
                "perchild": false,
                "perinfant": false,
                "dailyprices": []
            },
            {
                "id": 2,
                "pricingperiod": "Week",
                "fromdate": "2023-02-01",
                "todate": "2023-02-28",
                "currency": {
                    "id": 1,
                    "code": "GBP",
                    "name": "Pound Sterling",
                    "decimalplaces": 2
                },
                "pricingtype": "Amount",
                "perperiod": true,
                "price": 17.99,
                "peradult": false,
                "perchild": false,
                "perinfant": false,
                "dailyprices": []
            },
            {
                "id": 3,
                "pricingperiod": "Week",
                "fromdate": "2023-03-01",
                "todate": "2023-03-31",
                "currency": {
                    "id": 2,
                    "code": "EUR",
                    "name": "Euro",
                    "decimalplaces": 2
                },
                "pricingtype": "Amount",
                "perperiod": true,
                "price": 0,
                "peradult": false,
                "perchild": false,
                "perinfant": false,
                "dailyprices": [
                    {
                        "id": 1,
                        "pricetype": {
                            "id": 1,
                            "pricetype": "1D",
                            "pricingperiod": "Week",
                            "description": "1 day break",
                            "periods": 1,
                            "additional": false
                        },
                        "price": 15
                    },
                    {
                        "id": 2,
                        "pricetype": {
                            "id": 2,
                            "pricetype": "2D",
                            "pricingperiod": "Week",
                            "description": "2 day break",
                            "periods": 2,
                            "additional": false
                        },
                        "price": 19.25
                    },
                    {
                        "id": 3,
                        "pricetype": {
                            "id": 3,
                            "pricetype": "3D",
                            "pricingperiod": "Week",
                            "description": "3 day break",
                            "periods": 3,
                            "additional": false
                        },
                        "price": 23
                    },
                    {
                        "id": 4,
                        "pricetype": {
                            "id": 4,
                            "pricetype": "4D",
                            "pricingperiod": "Week",
                            "description": "4 day break",
                            "periods": 4,
                            "additional": false
                        },
                        "price": 26
                    },
                    {
                        "id": 5,
                        "pricetype": {
                            "id": 5,
                            "pricetype": "5D",
                            "pricingperiod": "Week",
                            "description": "5 day break",
                            "periods": 5,
                            "additional": false
                        },
                        "price": 29
                    },
                    {
                        "id": 6,
                        "pricetype": {
                            "id": 6,
                            "pricetype": "6D",
                            "pricingperiod": "Week",
                            "description": "6 day break",
                            "periods": 6,
                            "additional": false
                        },
                        "price": 31
                    },
                    {
                        "id": 7,
                        "pricetype": {
                            "id": 7,
                            "pricetype": "7D",
                            "pricingperiod": "Week",
                            "description": "Week",
                            "periods": 7,
                            "additional": false
                        },
                        "price": 33
                    },
                    {
                        "id": 8,
                        "pricetype": {
                            "id": 8,
                            "pricetype": "1P",
                            "pricingperiod": "Week",
                            "description": "1 additional day",
                            "periods": 1,
                            "additional": true
                        },
                        "price": 5
                    },
                    {
                        "id": 9,
                        "pricetype": {
                            "id": 9,
                            "pricetype": "2P",
                            "pricingperiod": "Week",
                            "description": "2 additional days",
                            "periods": 2,
                            "additional": true
                        },
                        "price": 10
                    },
                    {
                        "id": 10,
                        "pricetype": {
                            "id": 10,
                            "pricetype": "3P",
                            "pricingperiod": "Week",
                            "description": "3 additional days",
                            "periods": 3,
                            "additional": true
                        },
                        "price": 15
                    },
                    {
                        "id": 11,
                        "pricetype": {
                            "id": 11,
                            "pricetype": "4P",
                            "pricingperiod": "Week",
                            "description": "4 additional days",
                            "periods": 4,
                            "additional": true
                        },
                        "price": 20
                    },
                    {
                        "id": 12,
                        "pricetype": {
                            "id": 12,
                            "pricetype": "5P",
                            "pricingperiod": "Week",
                            "description": "5 additional days",
                            "periods": 5,
                            "additional": true
                        },
                        "price": 25
                    },
                    {
                        "id": 13,
                        "pricetype": {
                            "id": 13,
                            "pricetype": "6P",
                            "pricingperiod": "Week",
                            "description": "6 additional days",
                            "periods": 6,
                            "additional": true
                        },
                        "price": 31
                    }
                ]
            },
            {
                "id": 4,
                "pricingperiod": "Week",
                "fromdate": "2023-04-01",
                "todate": "2023-04-30",
                "currency": {
                    "id": 2,
                    "code": "EUR",
                    "name": "Euro",
                    "decimalplaces": 2
                },
                "pricingtype": "Percentage",
                "perperiod": true,
                "percentage": 5.45,
                "basedon": "Brochure",
                "minimum": 0,
                "maximum": 9999
            },
            {
                "id": 5,
                "pricingperiod": "Week",
                "fromdate": "2023-06-01",
                "todate": "2023-06-30",
                "currency": {
                    "id": 1,
                    "code": "GBP",
                    "name": "Pound Sterling",
                    "decimalplaces": 2
                },
                "pricingtype": "Range",
                "perperiod": true,
                "basedon": "Basic",
                "ranges": [
                    {
                        "id": 1,
                        "lowvalue": "0",
                        "highvalue": "149",
                        "prices": [
                            {
                                "id": 1,
                                "pricetype": {
                                    "id": 7,
                                    "pricetype": "7D",
                                    "pricingperiod": "Week",
                                    "description": "Week",
                                    "periods": 7,
                                    "additional": false
                                },
                                "price": "25.00"
                            }
                        ]
                    },
                    {
                        "id": 2,
                        "lowvalue": "150",
                        "highvalue": "399",
                        "prices": [
                            {
                                "id": 2,
                                "pricetype": {
                                    "id": 7,
                                    "pricetype": "7D",
                                    "pricingperiod": "Week",
                                    "description": "Week",
                                    "periods": 7,
                                    "additional": false
                                },
                                "price": "27.49"
                            }
                        ]
                    },
                    {
                        "id": 3,
                        "lowvalue": "400",
                        "highvalue": "699",
                        "prices": [
                            {
                                "id": 3,
                                "pricetype": {
                                    "id": 7,
                                    "pricetype": "7D",
                                    "pricingperiod": "Week",
                                    "description": "Week",
                                    "periods": 7,
                                    "additional": false
                                },
                                "price": "31.00"
                            }
                        ]
                    },
                    {
                        "id": 4,
                        "lowvalue": "700",
                        "highvalue": "999",
                        "prices": [
                            {
                                "id": 4,
                                "pricetype": {
                                    "id": 7,
                                    "pricetype": "7D",
                                    "pricingperiod": "Week",
                                    "description": "Week",
                                    "periods": 7,
                                    "additional": false
                                },
                                "price": "35.00"
                            }
                        ]
                    },
                    {
                        "id": 5,
                        "lowvalue": "1000",
                        "highvalue": "99999",
                        "prices": [
                            {
                                "id": 5,
                                "pricetype": {
                                    "id": 7,
                                    "pricetype": "7D",
                                    "pricingperiod": "Week",
                                    "description": "Week",
                                    "periods": 7,
                                    "additional": false
                                },
                                "price": "40.00"
                            }
                        ]
                    }
                ]
            }
        ]

### Add a new Pricing to a Branding Extra [POST]

The following fields should be provided in the POST array

* ```pricingperiod``` The Pricing Period, i.e. Week, Month etc.
* ```propertypricing``` True if the pricing is for a specific property
* ```propertyid``` The Id of the Property (for Property pricings only)
* ```fromdate``` The date the pricing is applicable from
* ```todate``` The date the pricing is applicable to
* ```currencycode``` The currency the pricing uses
* ```pricingtype``` The type of pricing: Amount, Percentage, PercentagePlus or Range
* ```perperiod``` Whether the price is per period or not (will be overridden to True for pricingtype = Percentage or Range)

Where pricingtype = Amount:
* ```price``` The price of the extra, either per period, or per booking
* ```peradult``` Whether the price is per adult or not
* ```perchild``` Whether the price is per child or not
* ```perinfant``` Whether the price is per infant or not

Where pricingtype = Percentage:
* ```percentage``` The percentage
* ```basedon``` The base the percentage is calculated on, e.g. Brochure, Basic
* ```minimumprice``` The minimum price for the extra (optional, default=0)
* ```maximumprice``` The maximum price for the extra (optional, default=9999)

Where pricingtype = Range
* ```ranges``` Array, each element containing ```lowvalue```, ```highvalue```
               and ```prices```, an array, each element containing ```days```, ```additional```, and the price
* ```basedon``` The base the percentage is calculated on, e.g. Brochure, Basic, Peak

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/extra/1/branding/1/pricing

## Extra Branding Pricing Detail [/v2/extra/{id}/branding/{id2}/pricing/{id3}]
+ Parameters

    + id (required, integer, `1`) ... The id of the Extra
    + id2 (required, integer, `1`) ... The id of the ExtraBranding to get
    + id3 (required, integer, `1`) ... The id of the Pricing to get

### Gets the details of an Extra Branding Pricing [GET]

+ Response 200 (application/json)

         {
            "id": 1,
            "pricingperiod": "Week",
            "fromdate": "2023-01-01",
            "todate": "2023-01-31",
            "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
            },
            "pricingtype": "Amount",
            "perperiod": false,
            "price": 23.45,
            "peradult": false,
            "perchild": false,
            "perinfant": false,
            "dailyprices": []
        }

### Update an Extra Branding Pricing [PUT]

+ Request (application/x-www-form-urlencoded)

        percentage=7

+ Response 204

### Deletes an Extra Branding Pricing [DELETE]

+ Response 204



## Extra Branding Pricing Amount PriceType Index [/v2/extra/{id}/branding/{id2}/pricing/{id3}/pricetype]
+ Parameters

    + id (required, integer, `4`) ... The id of the Extra
    + id2 (required, integer, `11`) ... The id of the ExtraBranding
    + id3 (required, integer, `24`) ... The id of the ExtraPriceAmount

### Get all PriceTypes for an ExtraPriceAmount [GET]

+ Response 200 (application/json)

        [
            {
                "id": 53,
                "pricetype": {
                    "id": 2,
                    "pricetype": "2D",
                    "pricingperiod": "Week",
                    "description": "2 day break",
                    "periods": 2,
                    "additional": false
                },
                "price": 2.22
            },
            {
                "id": 54,
                "pricetype": {
                    "id": 3,
                    "pricetype": "3D",
                    "pricingperiod": "Week",
                    "description": "3 day break",
                    "periods": 3,
                    "additional": false
                },
                "price": 3.33
            },
            {
                "id": 55,
                "pricetype": {
                    "id": 4,
                    "pricetype": "4D",
                    "pricingperiod": "Week",
                    "description": "4 day break",
                    "periods": 4,
                    "additional": false
                },
                "price": 4.44
            },
            {
                "id": 56,
                "pricetype": {
                    "id": 5,
                    "pricetype": "5D",
                    "pricingperiod": "Week",
                    "description": "5 day break",
                    "periods": 5,
                    "additional": false
                },
                "price": 5.55
            },
            {
                "id": 57,
                "pricetype": {
                    "id": 6,
                    "pricetype": "6D",
                    "pricingperiod": "Week",
                    "description": "6 day break",
                    "periods": 6,
                    "additional": false
                },
                "price": 6.66
            },
            {
                "id": 58,
                "pricetype": {
                    "id": 7,
                    "pricetype": "7D",
                    "pricingperiod": "Week",
                    "description": "Week",
                    "periods": 7,
                    "additional": false
                },
                "price": 7.77
            },
            {
                "id": 59,
                "pricetype": {
                    "id": 8,
                    "pricetype": "1P",
                    "pricingperiod": "Week",
                    "description": "1 additional day",
                    "periods": 1,
                    "additional": true
                },
                "price": 2.11
            },
            {
                "id": 60,
                "pricetype": {
                    "id": 9,
                    "pricetype": "2P",
                    "pricingperiod": "Week",
                    "description": "2 additional days",
                    "periods": 2,
                    "additional": true
                },
                "price": 3.22
            },
            {
                "id": 61,
                "pricetype": {
                    "id": 10,
                    "pricetype": "3P",
                    "pricingperiod": "Week",
                    "description": "3 additional days",
                    "periods": 3,
                    "additional": true
                },
                "price": 4.33
            },
            {
                "id": 62,
                "pricetype": {
                    "id": 11,
                    "pricetype": "4P",
                    "pricingperiod": "Week",
                    "description": "4 additional days",
                    "periods": 4,
                    "additional": true
                },
                "price": 5.44
            },
            {
                "id": 63,
                "pricetype": {
                    "id": 12,
                    "pricetype": "5P",
                    "pricingperiod": "Week",
                    "description": "5 additional days",
                    "periods": 5,
                    "additional": true
                },
                "price": 6.55
            },
            {
                "id": 64,
                "pricetype": {
                    "id": 13,
                    "pricetype": "6P",
                    "pricingperiod": "Week",
                    "description": "6 additional days",
                    "periods": 6,
                    "additional": true
                },
                "price": 7.66
            }
        ]

### Add a new PriceType to a Extra Branding Pricing Amount [POST]

The following fields should be provided in the POST array

* ```pricetypeid``` The PriceType id
* ```price``` The price of the extra

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/extra/1/branding/1/pricing/1/pricetype/1

## Extra Branding Pricing Amount PriceType Detail [/v2/extra/{id}/branding/{id2}/pricing/{id3}/pricetype/{id4}]
+ Parameters

    + id (required, integer, `4`) ... The id of the Extra
    + id2 (required, integer, `11`) ... The id of the ExtraBranding
    + id3 (required, integer, `24`) ... The id of the ExtraPriceAmount
    + id4 (required, integer, `53`) ... The id of the ExtraPriceAmountPriceType

### Gets the details of an Extra Branding Pricing Amount PriceType [GET]

+ Response 200 (application/json)

        {
            "id": 53,
            "pricetype": {
                "id": 2,
                "pricetype": "2D",
                "pricingperiod": "Week",
                "description": "2 day break",
                "periods": 2,
                "additional": false
            },
            "price": 2.22
        }

### Update an Extra Branding Pricing Amount PriceType [PUT]

+ Request (application/x-www-form-urlencoded)

        price=43.20

+ Response 204

### Deletes an Extra Branding Pricing Amount PriceType [DELETE]

+ Response 204



## Extra Branding Pricing Range Element Index [/v2/extra/{id}/branding/{id2}/pricing/{id3}/rangeelement]
extra/1/branding/1/pricing/5/rangeelement

+ Parameters

    + id (required, integer, `1`) ... The id of the Extra
    + id2 (required, integer, `1`) ... The id of the ExtraBranding
    + id3 (required, integer, `5`) ... The id of the ExtraPriceAmount

### Get all Range Elements for an ExtraPriceAmount [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "lowvalue": "0",
              "highvalue": "149",
              "price": "14",
              "prices": [
                {
                  "id": 1,
                  "pricetype": {
                    "id": 7,
                    "pricetype": "7D",
                    "pricingperiod": "Week",
                    "description": "Week",
                    "periods": 7,
                    "additional": false
                  },
                  "price": "25.00"
                }
              ]
            },
            {
              "id": 2,
              "lowvalue": "150",
              "highvalue": "399",
              "price": "14",
              "prices": [
                {
                  "id": 2,
                  "pricetype": {
                    "id": 7,
                    "pricetype": "7D",
                    "pricingperiod": "Week",
                    "description": "Week",
                    "periods": 7,
                    "additional": false
                  },
                  "price": "27.49"
                }
              ]
            },
            {
              "id": 3,
              "lowvalue": "400",
              "highvalue": "699",
              "price": "14",
              "prices": [
                {
                  "id": 3,
                  "pricetype": {
                    "id": 7,
                    "pricetype": "7D",
                    "pricingperiod": "Week",
                    "description": "Week",
                    "periods": 7,
                    "additional": false
                  },
                  "price": "31.00"
                }
              ]
            },
            {
              "id": 4,
              "lowvalue": "700",
              "highvalue": "999",
              "price": "14",
              "prices": [
                {
                  "id": 4,
                  "pricetype": {
                    "id": 7,
                    "pricetype": "7D",
                    "pricingperiod": "Week",
                    "description": "Week",
                    "periods": 7,
                    "additional": false
                  },
                  "price": "35.00"
                }
              ]
            },
            {
              "id": 5,
              "lowvalue": "1000",
              "highvalue": "99999",
              "price": "14",
              "prices": [
                {
                  "id": 5,
                  "pricetype": {
                    "id": 7,
                    "pricetype": "7D",
                    "pricingperiod": "Week",
                    "description": "Week",
                    "periods": 7,
                    "additional": false
                  },
                  "price": "40.00"
                }
              ]
            }
          ]

### Add a new Range Element to a Extra Branding Pricing Amount [POST]

The following fields should be provided in the POST array

* ```lowvalue``` The low bound of the range
* ```highvalue``` The upper bound of the range
* ```price``` The extra price applicable to the booking price range (unless any ExtraPriceRangeElementPriceTypes are present)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/extra/1/branding/1/pricing/1/rangeelement/1

## Extra Branding Pricing Range Element Detail [/v2/extra/{id}/branding/{id2}/pricing/{id3}/rangeelement/{id4}]
extra/1/branding/1/pricing/5/rangeelement/2

+ Parameters

    + id (required, integer, `1`) ... The id of the Extra
    + id2 (required, integer, `1`) ... The id of the ExtraBranding
    + id3 (required, integer, `5`) ... The id of the ExtraPriceAmount
    + id4 (required, integer, `2`) ... The id of the ExtraPriceAmountRangeElement

### Gets the details of an Extra Branding Pricing Range Element [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "lowvalue": "150",
            "highvalue": "399",
            "price": "14",
            "prices": [
              {
                "id": 2,
                "pricetype": {
                  "id": 7,
                  "pricetype": "7D",
                  "pricingperiod": "Week",
                  "description": "Week",
                  "periods": 7,
                  "additional": false
                },
                "price": "27.49"
              }
            ]
          }

### Update an Extra Branding Pricing Range Element [PUT]

+ Request (application/x-www-form-urlencoded)

        highvalue=43

+ Response 204

### Deletes an Extra Branding Pricing Range Element [DELETE]

+ Response 204



## Extra Pricing Range Element Price Type Index [/v2/extra/{id}/branding/{id2}/pricing/{id3}/rangeelement/{id4}/pricetype]
+ Parameters

    + id (required, integer, `1`) ... The id of the Extra
    + id2 (required, integer, `1`) ... The id of the ExtraBranding
    + id3 (required, integer, `5`) ... The id of the ExtraPriceRange
    + id4 (required, integer, `1`) ... The id of the ExtraPriceRangeElement

### Get all PriceTypes for an ExtraPriceRangeElement [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "pricetype": {
                    "id": 7,
                    "pricetype": "7D",
                    "pricingperiod": "Week",
                    "description": "Week",
                    "periods": 7,
                    "additional": false
                },
                "price": "25.00"
            }
        ]

### Add a new PriceType to an ExtraPriceRangeElement [POST]

The following fields should be provided in the POST array

* ```pricetypeid``` The PriceType id
* ```price``` The price of the extra

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/extra/1/branding/1/pricing/1/rangeelement/1/pricetype/1

## Extra Pricing Range Element Price Type Detail [/v2/extra/{id}/branding/{id2}/pricing/{id3}/rangeelement/{id4}/pricetype/{id5}]
+ Parameters

    + id (required, integer, `1`) ... The id of the Extra
    + id2 (required, integer, `1`) ... The id of the ExtraBranding
    + id3 (required, integer, `5`) ... The id of the ExtraPriceRange
    + id4 (required, integer, `1`) ... The id of the ExtraPriceRangeElement
    + id5 (required, integer, `1`) ... The id of the ExtraPriceRangeElementPriceType

### Gets the details of an ExtraPriceRangeElementPriceType [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "pricetype": {
                "id": 7,
                "pricetype": "7D",
                "pricingperiod": "Week",
                "description": "Week",
                "periods": 7,
                "additional": false
            },
            "price": "25.00"
        }

### Update an ExtraPriceRangeElementPriceType [PUT]

+ Request (application/x-www-form-urlencoded)

        price=43.28

+ Response 204

### Deletes an ExtraPriceRangeElementPriceType [DELETE]

+ Response 204



# Group Keys

## KeyTag Index [/v2/keytag]
### Retrieve a list of key tags. [GET]

+ Response 200 (application/json)


        {
            "searchId": 0,
            "total": 4,
            "page": 1,
            "count": 4,
            "limit": 10,
            "time": 0,
            "orderBy": null,
            "filter": "",
            "previous": null,
            "next": null,
            "elements": [
                {
                    "id": 1,
                    "property": {
                        "id": 1,
                        "type": "property",
                        "tabspropref": "1105",
                        "name": "Angler Cottage"
                    },
                    "tag": "ABC1",
                    "colour": "Red",
                    "keyset": {
                        "id": 1,
                        "keyset": "Master"
                    },
                    "deleted": false,
                    "lastcheck": {
                        "id": 3,
                        "type": "KeyCheckOut",
                        "checkdatetime": "2014-05-15 12:34:56",
                        "notes": "No notes",
                        "tabsuser": {
                            "id": 23,
                            "name": "Mr Ian Stamp"
                        },
                        "actor": {
                            "id": 1,
                            "name": "system system"
                        },
                        "keycheckreason": {
                            "id": 1,
                            "keyusertype": {
                                "id": 1,
                                "keyusertype": "Customer",
                                "role": {
                                    "id": 1,
                                    "name": "Customer",
                                    "donotdelete": true
                                },
                                "description": null
                            },
                            "keycheckreason": "Ingoing tenant",
                            "description": "",
                            "checkoutperioddays": 0,
                            "checkoutperiodhours": 0
                        },
                        "expectedbackdatetime": "2014-05-22 12:34:56"
                    }
                },
                {
                    "id": 2,
                    "property": {
                        "id": 1,
                        "type": "property",
                        "tabspropref": "1105",
                        "name": "Angler Cottage"
                    },
                    "tag": "1105-A",
                    "colour": "Green",
                    "keyset": {
                        "id": 2,
                        "keyset": "Tenant"
                    },
                    "deleted": null,
                    "lastcheck": {
                        "id": 4,
                        "type": "KeyCheckIn",
                        "checkdatetime": "2014-04-21 12:14:00",
                        "notes": "",
                        "tabsuser": {
                            "id": 23,
                            "name": "Mr Ian Stamp"
                        }
                    }
                },
                {
                    "id": 3,
                    "property": {
                        "id": 1,
                        "type": "property",
                        "tabspropref": "1105",
                        "name": "Angler Cottage"
                    },
                    "tag": "1105-B",
                    "colour": "Green",
                    "keyset": {
                        "id": 2,
                        "keyset": "Tenant"
                    },
                    "deleted": null,
                    "lastcheck": {}
                },
                {
                    "id": 4,
                    "property": {
                        "id": 1,
                        "type": "property",
                        "tabspropref": "1212",
                        "name": "Reedmere"
                    },
                    "tag": "1212-A2",
                    "colour": "Blue",
                    "keyset": {
                        "id": 2,
                        "keyset": "Tenant"
                    },
                    "deleted": true,
                    "lastcheck": {}
                }
            ]
        }

### Add a new KeyTag [POST]
The following fields should be provided in the POST array

* ```propertyid``` The Property id
* ```tag``` The tag identifier
* ```colour``` The tag colour (optional)
* ```keysetid``` The KeySet id
* ```deleted``` Whether the KeyTag is deleted (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/keytag/2

## KeyTag Detail [/v2/keytag/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the KeyTag to get

### Gets the details of a KeyTag [GET]

+ Response 200 (application/json)

        {
            "id": 4,
            "property": {
                "id": 1,
                "type": "property",
                "tabspropref": "1212",
                "name": "Reedmere"
            },
            "tag": "1212-A2",
            "colour": "Blue",
            "keyset": {
                "id": 2,
                "keyset": "Tenant"
            },
            "deleted": true,
            "lastcheck": {}
        }

### Update a KeyTag [PUT]

+ Request (application/x-www-form-urlencoded)

        tag=1105-A

+ Response 204

### Deletes a KeyTag [DELETE]

+ Response 204



## KeySet Index [/v2/keyset]
### Retrieve a list of Key Sets. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "keyset": "Master"
            },
            {
                "id": 2,
                "keyset": "Tenant"
            },
            {
                "id": 3,
                "keyset": "Other"
            }
        ]

### Add a new KeySet [POST]
The following fields should be provided in the POST array

* ```keyset``` The key set

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/keyset/2

## KeySet Detail [/v2/keyset/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the KeySet to get

### Gets the details of a KeySet [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "keyset": "Tenant"
        }

### Update a KeySet [PUT]

+ Request (application/x-www-form-urlencoded)

        keyset=Tenant

+ Response 204

### Deletes a KeySet [DELETE]

+ Response 204



## Keyy Index [/v2/keytag/{id}/keyy]

+ Parameters

    + id (required, integer, `1`) ... The id of the Keyy

### Retrieve a list of keys. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "serialnumber": "12345",
                "manufacturerortype": "Yale",
                "description": "Yale key"
            }
        ]

### Add a new Keyy [POST]
The following fields should be provided in the POST array

* ```serialnumber``` The serial number
* ```manufacturerortype``` The manufacturer or type of key
* ```description``` The description of the key

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/keytag/1/keyy/1

## Keyy Detail [/v2/keytag/{id}/keyy/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the KeyTag
    + id2 (required, integer, `1`) ... The id of the Keyy

### Gets the details of a Keyy [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "serialnumber": "12345",
            "manufacturerortype": "Yale",
            "description": "Yale key"
        }

### Update a Keyy [PUT]

+ Request (application/x-www-form-urlencoded)

        serialnumber=12345

+ Response 204

### Deletes a Keyy [DELETE]

+ Response 204



## KeyCheck Index [/v2/keytag/{id}/check]

+ Parameters

    + id (required, integer, `1`) ... The id of the KeyTag

### Retrieve a list of key check ins/outs. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "type": "KeyCheckOut",
                "checkdatetime": "2014-04-15 19:00:00",
                "notes": "No notes",
                "tabsuser": {
                    "id": 23,
                    "name": "Mr Ian Stamp"
                },
                "keycheckreason": {
                    "id": 3,
                    "keyusertype": {
                        "id": 5,
                        "keyusertype": "Agency",
                        "role": null,
                        "description": "Agency or Brand"
                    },
                    "keycheckreason": "Photography",
                    "description": "",
                    "checkoutperioddays": 0,
                    "checkoutperiodhours": 6
                },
                "expectedbackdatetime": "2014-04-15 19:00:00"
            },
            {
                "id": 2,
                "type": "KeyCheckOut",
                "checkdatetime": "2014-04-15 12:34:56",
                "notes": "No notes",
                "tabsuser": {
                    "id": 23,
                    "name": "Mr Ian Stamp"
                },
                "actor": {
                    "id": 1,
                    "name": "system system"
                },
                "keycheckreason": {
                    "id": 1,
                    "keyusertype": {
                        "id": 1,
                        "keyusertype": "Customer",
                        "role": {
                            "id": 1,
                            "name": "Customer",
                            "donotdelete": true
                        },
                        "description": null
                    },
                    "keycheckreason": "Ingoing tenant",
                    "description": "",
                    "checkoutperioddays": 0,
                    "checkoutperiodhours": 0
                },
                "expectedbackdatetime": "2014-04-22 12:34:56"
            },
            {
                "id": 3,
                "type": "KeyCheckOut",
                "checkdatetime": "2014-05-15 12:34:56",
                "notes": "No notes",
                "tabsuser": {
                    "id": 23,
                    "name": "Mr Ian Stamp"
                },
                "actor": {
                    "id": 1,
                    "name": "system system"
                },
                "keycheckreason": {
                    "id": 1,
                    "keyusertype": {
                        "id": 1,
                        "keyusertype": "Customer",
                        "role": {
                            "id": 1,
                            "name": "Customer",
                            "donotdelete": true
                        },
                        "description": null
                    },
                    "keycheckreason": "Ingoing tenant",
                    "description": "",
                    "checkoutperioddays": 0,
                    "checkoutperiodhours": 0
                },
                "expectedbackdatetime": "2014-05-22 12:34:56"
            },
            {
                "id": 4,
                "type": "KeyCheckIn",
                "checkdatetime": "2014-04-21 12:14:00",
                "notes": "",
                "tabsuser": {
                    "id": 23,
                    "name": "Mr Ian Stamp"
                }
            }
        ]

### Add a new KeyCheck [POST]

The following fields should be provided in the POST array

All KeyChecks:
* ```type``` The type of element, i.e. KeyCheckIn or KeyCheckOut
* ```checkdatetime``` The check in or out date/time
* ```notes``` The notes
* ```tabsuserid``` The id of the TabsUser

KeyCheckOuts:
* ```keycheckreasonid``` The id of the KeyCheckReason
* ```actorid``` The id of the actor checked out to (optional dependant on reason)
* ```expectedbackdatetime``` The date and time the key is expected back (optional)

KeyCheckIn:
* ```keycheckoutid``` The id of the previous KeyCheckOut

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/keytag/2/check/1

## KeyCheck Detail [/v2/keytag/{id}/check/{id2}]

+ Parameters

    + id (required, integer, `2`) ... The id of the KeyTag
    + id2 (required, integer, `1`) ... The id of the KeyCheck

### Gets the details of a KeyCheck [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "type": "KeyCheckOut",
            "checkdatetime": "2014-04-15 19:00:00",
            "notes": "No notes",
            "tabsuser": "/v2/tabsuser/23",
            "keycheckreason": {
                "id": 3,
                "keyusertype": {
                    "id": 5,
                    "keyusertype": "Agency",
                    "role": null,
                    "description": "Agency or Brand"
                },
                "keycheckreason": "Photography",
                "description": "",
                "checkoutperioddays": 0,
                "checkoutperiodhours": 6
            },
            "expectedbackdatetime": "2014-04-15 19:00:00"
        }

### Update a KeyCheck [PUT]

+ Request (application/x-www-form-urlencoded)

        notes=No notes

+ Response 204

### Deletes a KeyCheck [DELETE]

+ Response 204



## KeyCheckReason Index [/v2/keycheckreason]
### Retrieve a list of key check reasons. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "keyusertype": {
                    "id": 1,
                    "keyusertype": "Customer",
                    "role": {
                        "id": 1,
                        "name": "Customer",
                        "donotdelete": true
                    },
                    "description": null
                },
                "keycheckreason": "Ingoing tenant",
                "description": "",
                "checkoutperioddays": 0,
                "checkoutperiodhours": 0
            },
            {
                "id": 2,
                "keyusertype": {
                    "id": 1,
                    "keyusertype": "Customer",
                    "role": {
                        "id": 1,
                        "name": "Customer",
                        "donotdelete": true
                    },
                    "description": null
                },
                "keycheckreason": "Other",
                "description": "Not the ingoing tenant",
                "checkoutperioddays": 2,
                "checkoutperiodhours": 0
            },
            {
                "id": 3,
                "keyusertype": {
                    "id": 5,
                    "keyusertype": "Agency",
                    "role": null,
                    "description": "Agency or Brand"
                },
                "keycheckreason": "Photography",
                "description": "",
                "checkoutperioddays": 0,
                "checkoutperiodhours": 6
            },
            {
                "id": 4,
                "keyusertype": {
                    "id": 5,
                    "keyusertype": "Agency",
                    "role": null,
                    "description": "Agency or Brand"
                },
                "keycheckreason": "Furniture delivery",
                "description": "",
                "checkoutperioddays": 2,
                "checkoutperiodhours": 0
            },
            {
                "id": 5,
                "keyusertype": {
                    "id": 5,
                    "keyusertype": "Agency",
                    "role": null,
                    "description": "Agency or Brand"
                },
                "keycheckreason": "Delivery",
                "description": "Non-furniture delivery",
                "checkoutperioddays": 1,
                "checkoutperiodhours": 0
            },
            {
                "id": 6,
                "keyusertype": {
                    "id": 2,
                    "keyusertype": "Cleaner",
                    "role": {
                        "id": 3,
                        "name": "Cleaner",
                        "donotdelete": true
                    },
                    "description": null
                },
                "keycheckreason": "Cleaning",
                "description": "",
                "checkoutperioddays": 1,
                "checkoutperiodhours": 0
            },
            {
                "id": 7,
                "keyusertype": {
                    "id": 4,
                    "keyusertype": "Supplier",
                    "role": {
                        "id": 5,
                        "name": "Supplier",
                        "donotdelete": true
                    },
                    "description": null
                },
                "keycheckreason": "Maintenance",
                "description": "",
                "checkoutperioddays": 3,
                "checkoutperiodhours": 4
            },
            {
                "id": 8,
                "keyusertype": {
                    "id": 4,
                    "keyusertype": "Supplier",
                    "role": {
                        "id": 5,
                        "name": "Supplier",
                        "donotdelete": true
                    },
                    "description": null
                },
                "keycheckreason": "Building work",
                "description": "",
                "checkoutperioddays": 7,
                "checkoutperiodhours": 0
            },
            {
                "id": 9,
                "keyusertype": {
                    "id": 7,
                    "keyusertype": "Property",
                    "role": null,
                    "description": "Key is at property"
                },
                "keycheckreason": "Permanent",
                "description": "Ket at property permanently",
                "checkoutperioddays": 9999,
                "checkoutperiodhours": 0
            },
            {
                "id": 10,
                "keyusertype": {
                    "id": 8,
                    "keyusertype": "Keysafe",
                    "role": null,
                    "description": "Key is in a keysafe"
                },
                "keycheckreason": "Permanent",
                "description": "Ket in keysafe permanently",
                "checkoutperioddays": 9999,
                "checkoutperiodhours": 0
            }
        ]

### Add a new KeyCheckReason [POST]
The following fields should be provided in the POST array

* ```keyusertypeid``` The KeyUserType id
* ```keycheckreason``` The key check reason
* ```description``` The description (optional)
* ```checkoutperioddays``` The checkout period days (optional)
* ```checkoutperiodhours``` The checkout period hours (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/keycheckreason/2

## KeyCheckReason Detail [/v2/keycheckreason/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the KeyCheckReason to get

### Gets the details of a KeyCheckReason [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "keyusertype": {
                "id": 1,
                "keyusertype": "Customer",
                "role": {
                    "id": 1,
                    "name": "Customer",
                    "donotdelete": true
                },
                "description": null
            },
            "keycheckreason": "Other",
            "description": "Not the ingoing tenant",
            "checkoutperioddays": 2,
            "checkoutperiodhours": 0
        }

### Update a KeyCheckReason [PUT]

+ Request (application/x-www-form-urlencoded)

        description=Not the ingoing tenant

+ Response 204

### Deletes a KeyCheckReason [DELETE]

+ Response 204



## KeysBookingBrand Index [/v2/keysbookingbrand]
### Retrieve a list of key booking brands. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "bookingbrand": {
                    "id": 3,
                    "code": "NOBB",
                    "name": "Norfolk Country Cottages",
                    "agency": "/v2/agency/2"
                },
                "defaultkeycheckreason": {
                    "id": 1,
                    "keyusertype": { 
                        "id": 1,
                        "keyusertype": "Customer",
                        "role": {
                            "id": 1,
                            "name": "Customer",
                            "donotdelete": true
                        },
                        "description": null
                    },
                    "keycheckreason": "Ingoing tenant",
                    "description": "",
                    "checkoutperioddays": 0,
                    "checkoutperiodhours": 0
                }
            }
        ]

### Add a new KeysBookingBrand [POST]
The following fields should be provided in the POST array

* ```bookingbrandid``` The BookingBrand id
* ```defaultkeycheckreasonid``` The KeyCheckReason id

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/keysbookingbrand/1

## KeysBookingBrand Detail [/v2/keysbookingbrand/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the KeysBookingBrand to get

### Gets the details of a KeysBookingBrand [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "bookingbrand": {
                "id": 3,
                "code": "NOBB",
                "name": "Norfolk Country Cottages",
                "agency": "/v2/agency/2"
            },
            "defaultkeycheckreason": {
                "id": 1,
                "keyusertype": { 
                    "id": 1,
                    "keyusertype": "Customer",
                    "role": {
                        "id": 1,
                        "name": "Customer",
                        "donotdelete": true
                    },
                    "description": null
                },
                "keycheckreason": "Ingoing tenant",
                "description": "",
                "checkoutperioddays": 0,
                "checkoutperiodhours": 0
            }
        }

### Update a KeysBookingBrand [PUT]

+ Request (application/x-www-form-urlencoded)

        bookingbrandid=3

+ Response 204

### Deletes a KeysBookingBrand [DELETE]

+ Response 204



## KeysBookingBrandUserType Index [/v2/keysbookingbrand/{id}/usertype]

+ Parameters

    + id (required, integer, `1`) ... The id of the KeysBookingBrandUserType

### Retrieve a list of KeysBookingBrandUserTypes [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "keyusertype": {
                    "id": 1,
                    "keyusertype": "Customer",
                    "role": {
                        "id": 1,
                        "name": "Customer",
                        "donotdelete": true
                    },
                    "description": null
                },
                "checkoutperioddays": 7,
                "checkoutperiodhours": 0,
                "keyuserssql": ""
            }
        ]

### Add a new KeysBookingBrandUserType [POST]
The following fields should be provided in the POST array

* ```keysbookingbrandid``` The KeyTag id
* ```keyusertypeid``` The KeyUserType id
* ```checkoutperioddays``` The checkout period in days
* ```checkoutperiodhours``` The checkout period in hours
* ```keyuserssql``` The key user SQL

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/keysbookingbrand/1/usertype/1

## KeysBookingBrandUserType Detail [/v2/keysbookingbrand/{id}/usertype/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the KeysBookingBrand
    + id2 (required, integer, `1`) ... The id of the KeysBookingBrandUserType

### Gets the details of a KeysBookingBrandUserType [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "keyusertype": {
                "id": 1,
                "keyusertype": "Customer",
                "role": {
                    "id": 1,
                    "name": "Customer",
                    "donotdelete": true
                },
                "description": null
            },
            "checkoutperioddays": 7,
            "checkoutperiodhours": 0,
            "keyuserssql": ""
        }

### Update a KeysBookingBrandUserType [PUT]

+ Request (application/x-www-form-urlencoded)

        checkoutperioddays=8

+ Response 204

### Deletes a KeysBookingBrandUserType [DELETE]

+ Response 204



## KeyUserType Index [/v2/keyusertype]
### Retrieve a list of Key User Types. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "keyusertype": "Customer",
                "role": {
                    "id": 1,
                    "name": "Customer",
                    "donotdelete": true
                },
                "description": null
            },
            {
                "id": 2,
                "keyusertype": "Cleaner",
                "role": {
                    "id": 3,
                    "name": "Cleaner",
                    "donotdelete": true
                },
                "description": null
            },
            {
                "id": 3,
                "keyusertype": "Owner",
                "role": null,
                "description": null
            },
            {
                "id": 4,
                "keyusertype": "Supplier",
                "role": {
                    "id": 5,
                    "name": "Supplier",
                    "donotdelete": true
                },
                "description": null
            },
            {
                "id": 5,
                "keyusertype": "Agency",
                "role": null,
                "description": "Agency or Brand"
            },
            {
                "id": 6,
                "keyusertype": "Office",
                "role": null,
                "description": "Office location"
            },
            {
                "id": 7,
                "keyusertype": "Property",
                "role": null,
                "description": "Key is at property"
            },
            {
                "id": 8,
                "keyusertype": "Keysafe",
                "role": null,
                "description": "Key is in a keysafe"
            },
            {
                "id": 9,
                "keyusertype": "Other",
                "role": null,
                "description": "None of the above"
            }
        ]

### Add a new KeyUserType [POST]
The following fields should be provided in the POST array

* ```keyusertype``` The key user type
* ```roleid``` The role id (optional)
* ```description``` The description (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/keyusertype/2

## KeyUserType Detail [/v2/keyusertype/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the KeyUserType to get

### Gets the details of a KeyUserType [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "keyusertype": "Cleaner",
            "role": {
                "id": 3,
                "name": "Cleaner",
                "donotdelete": true
            },
            "description": null
        }

### Update a KeyUserType [PUT]

+ Request (application/x-www-form-urlencoded)

        description=Office location

+ Response 204

### Deletes a KeyUserType [DELETE]

+ Response 204



# Group Managed Services

## Managed Activity Index [/v2/managedactivity]
### Retreive a list of Managed Activities. [GET]
A managed activity is anything which needs to be managed about a property (e.g. Cleaning, Photogrpahy, Management)

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Cleaning",
                "description": "Cleaning a property",
                "donotmodify": true
            },
            {
                "id": 2,
                "name": "Keyholder",
                "description": "Being the keyholder for a property",
                "donotmodify": true
            },
            {
                "id": 3,
                "name": "Management",
                "description": "Manageing any or all aspects of a property",
                "donotmodify": true
            },
            {
                "id": 4,
                "name": "Inspections",
                "description": "Grading inspections such as VisitBritain",
                "donotmodify": true
            },
            {
                "id": 5,
                "name": "Photography",
                "description": "All aspects of image creation and processing",
                "donotmodify": false
            },
            {
                "id": 6,
                "name": "Safety",
                "description": "Gas and electrical safety",
                "donotmodify": false
            }
        ]

### Add a new Managed Activity [POST]
The following fields should be provided in the POST array

* ```name``` Name of managed activity
* ```description``` Description of managed activity (!)
* ```donotmodify``` Whether the activity can be modified (i.e. isn't a required activity)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/managedactivity/2

## Managed Activity Detail [/v2/managedactivity/{id}]
+ Parameters

    + id (required, integer, `2`) ... The id of the Managed Activity to get

### Get the details of a Managed Activity [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "name": "Keyholder",
            "description": "Being the keyholder for a property",
            "donotmodify": true
        }

### Update a Managed Activity [PUT]

+ Request (application/x-www-form-urlencoded)

        name=New Name

+ Response 204

### Delete Managed Activity [DELETE]

+ Response 204 



## Managed Activity Service Index [/v2/managedactivity/{id}/service]

+ Parameters

    + id (required, integer, `3`) ... The id of the ManagedActivity

### Get all Services for a Managed Activity [GET]

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "service": {
                    "id": 3,
                    "name": "Linen",
                    "description": "Providing linen",
                    "donotmodify": true,
                    "vatband": [],
                    "datetouse": "fromdate",
                    "customerbookings": true,
                    "ownerbookings": true
                },
                "fromdate": "2015-01-01",
                "todate": "2020-12-31"
            },
            {
                "id": 3,
                "service": {
                    "id": 4,
                    "name": "Towels",
                    "description": "Collecting and laundering towels",
                    "donotmodify": true,
                    "vatband": [],
                    "datetouse": "todate",
                    "customerbookings": true,
                    "ownerbookings": true
                },
                "fromdate": "2016-01-01",
                "todate": "2020-12-31"
            }
        ]

### Add a new ManagedActivityService [POST]
The following fields should be provided in the POST array

* ```serviceid``` The id of the Service provided as part of the Managed Activity
* ```fromdate``` The date the Service is part of the Managed Activity from
* ```todate``` The date the Service is part of the Managed Activity until

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/managedactivity/1/service/1

## Managed Activity Service Details [/v2/managedactivity/{id}/service/{id2}]

+ Parameters

    + id (required, integer, `3`) ... The id of the ManagedActivity
    + id2 (required, integer, `2`) ... The id of the ManagedActivityService 

### Get the details of a Managed Activity Service [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "service": {
                "id": 3,
                "name": "Linen",
                "description": "Providing linen",
                "donotmodify": true,
                "vatband": [],
                "datetouse": "fromdate",
                "customerbookings": true,
                "ownerbookings": true
            },
            "fromdate": "2015-01-01",
            "todate": "2020-12-31"
        }

### Update a Managed Activity Service [PUT]

+ Request (application/x-www-form-urlencoded)

        todate=2017-12-31

+ Response 204

### Delete a Managed Activity Service [DELETE]

+ Response 204



## Service Index [/v2/service]
### Retreive a list of Services. [GET]
A service is something supplied in relation to a managed activity, e.g. 'Cleaning'

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Cleaning",
                "description": "Cleaning a property",
                "donotmodify": true,
                "vatband": {
                    "id": 2,
                    "vatband": "Standard"
                },
                "datetouse": "fromdate",
                "customerbookings": true,
                "ownerbookings": false
            },
            {
                "id": 2,
                "name": "Keyholding",
                "description": "Holding the keys for a property",
                "donotmodify": true,
                "vatband": [],
                "datetouse": "",
                "customerbookings": true,
                "ownerbookings": false
            },
            {
                "id": 3,
                "name": "Linen",
                "description": "Providing linen",
                "donotmodify": true,
                "vatband": [],
                "datetouse": "fromdate",
                "customerbookings": true,
                "ownerbookings": true
            },
            {
                "id": 4,
                "name": "Towels",
                "description": "Collecting and laundering towels",
                "donotmodify": true,
                "vatband": [],
                "datetouse": "todate",
                "customerbookings": true,
                "ownerbookings": true
            },
            {
                "id": 5,
                "name": "Bin push",
                "description": "Pushing bin(s) to front of property",
                "donotmodify": false,
                "vatband": {
                    "id": 2,
                    "vatband": "Standard"
                },
                "datetouse": "",
                "customerbookings": false,
                "ownerbookings": false
            }
        ]

### Add a new Service [POST]
The following fields should be provided in the POST array

* ```name``` Name of service
* ```description``` Description of service (!)
* ```donotmodify``` Whether the activity can be modified (i.e. isn't a required activity)
* ```vatbandid``` The VAT band the service attracts (if any) (optional)
* ```datetouse``` The booking date to use to determine the Supplier and Charge applicable, e.g. FromDate
* ```customerbookings``` Whether the service applies to customer bookings (optional, default=false)
* ```ownerbookings``` Whether the service applies to owner bookings (optional, default=false)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/service/2

## Service Detail [/v2/service/{id}]
+ Parameters

    + id (required, integer, `2`) ... The id of the Service to get

### Get the details of a Property Service [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "name": "Keyholding",
            "description": "Holding the keys for a property",
            "donotmodify": true,
            "vatband": [],
            "datetouse": "",
            "customerbookings": true,
            "ownerbookings": false
        }

### Update a Service [PUT]

+ Request (application/x-www-form-urlencoded)

        name=New Name

+ Response 204

### Delete Service [DELETE]

+ Response 204 



# Group Note
The notes endpoint provides the functionality to update and delete notes related to Actors, Bookings or Properties.

## Note List [/v2/note{?page,limit,filter}]
### Return a list of notes [GET]
note?page=1&limit=25&filter=subject=~lorem

+ Parameters

    + page (optional, integer, `1`) ... The page of results to return
    + limit (optional, integer, `25`) ... The number of results to return
    + filter (optional, string, `subject=~lorem`) ... One or more key/value pairs, separated by ':', used to filter the Notes


+ Response 200

        {
            "searchId": 0,
            "total": 1,
            "page": 1,
            "count": 1,
            "limit": 25,
            "time": 0,
            "orderBy": null,
            "filter": "subject=~lorem",
            "previous": null,
            "next": null,
            "elements": [
                {
                    "id": 1,
                    "notetype": {
                        "id": 1,
                        "notetype": "Warning",
                        "description": "A warning which should be highlighted to the user",
                        "donotdelete": true
                    },
                    "subject": "Lorem ipsum",
                    "created": "2014-08-09 12:34:56",
                    "createdby": {
                        "actorid": 1,
                        "actortype": "TabsUser",
                        "actor": "/v2/tabsuser/1",
                        "name": "system system"
                    },
                    "createdfromscreen": "Booking",
                    "visibletocustomer": false,
                    "visibletoowner": false,
                    "visibletocleaner": false,
                    "visibletokeyholder": false,
                    "highlight": false,
                    "pin": true,
                    "private": true,
                    "completed": "",
                    "completedby": [],
                    "archived": "",
                    "archivedby": [],
                    "notetexts": [
                        {
                            "id": 1,
                            "createdby": {
                                "actorid": 1,
                                "actortype": "TabsUser",
                                "actor": "/v2/tabsuser/1",
                                "name": "system system"
                            },
                            "created": "2014-08-09 12:34:56",
                            "notetext": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut non orci id quam pharetra mattis sit amet id nisl.",
                            "actioned": "2020-02-01 12:21:45",
                            "actionedby": {
                                "actorid": 1,
                                "actortype": "TabsUser",
                                "actor": "/v2/tabsuser/1",
                                "name": "system system"
                            },
                            "followup": "2020-01-01 12:01:45"
                        },
                        {
                            "id": 2,
                            "createdby": {
                                "actorid": 1,
                                "actortype": "TabsUser",
                                "actor": "/v2/tabsuser/1",
                                "name": "system system"
                            },
                            "created": "2014-08-09 12:37:56",
                            "notetext": "Donec nec eros vitae dui tincidunt convallis. Ut neque diam, consequat a nisi quis, aliquet imperdiet lacus.",
                            "actioned": "",
                            "actionedby": []
                        }
                    ],
                    "noteactors": [
                        {
                            "actorid": 1,
                            "actortype": "TabsUser",
                            "actor": "/v2/tabsuser/1",
                            "name": "system system",
                            "id": 2,
                            "notifychanges": false,
                            "reminderdate": "2017-08-23"
                        },
                        {
                            "actorid": 7,
                            "actortype": "Customer",
                            "actor": "/v2/customer/7",
                            "name": "Thomas Thornley",
                            "id": 1,
                            "notifychanges": true,
                            "reminderdate": "2016-10-15"
                        }
                    ],
                    "bookings": [
                        {
                            "bookingnoteid": 1,
                            "bookingid": 1,
                            "booking": "/v2/booking/1",
                            "fromdate": "2026-10-01",
                            "todate": "2026-10-08"
                        }
                    ],
                    "properties": [
                        {
                            "propertynoteid": 2,
                            "propertyid": 1,
                            "property": "/v2/property/1",
                            "name": "Angler Cottage",
                            "tabspropref": "1105",
                            "fromdate": "2015-07-25",
                            "todate": "2015-08-02",
                            "requiresconfirmation": false,
                            "showonweb": false,
                            "showonavailability": true
                        },
                        {
                            "propertynoteid": 1,
                            "propertyid": 2,
                            "property": "/v2/property/2",
                            "name": "Reedmere",
                            "tabspropref": "1212",
                            "fromdate": "2015-06-30",
                            "todate": "2015-07-15",
                            "requiresconfirmation": true,
                            "showonweb": true,
                            "showonavailability": false
                        }
                    ],
                    "actors": [
                        {
                            "actorid": 7,
                            "actortype": "Customer",
                            "actor": "/v2/customer/7",
                            "name": "Thomas Thornley",
                            "actornoteid": 1
                        }
                    ],
                    "workorders": [
                        {
                            "workordernoteid": 2,
                            "workorderid": 3,
                            "workorder": "/v2/workorder/3"
                        }
                    ]
                }
            ]
        }

## Note Index [/v2/note]
### Create a Note [POST]
The following fields should be provided in the POST array:

* ```notetype``` Type of Note
* ```subject``` Note's subject
* ```createdbyactorid``` Id of the Actor creating the Note
* ```visibletocustomer``` Whether the Note should be visible to the Customer (optional default false)
* ```visibletoowner``` Whether the Note should be visible to the Customer (optional default false)
* ```visibletocleaner``` Whether the Note should be visible to the Customer (optional default false)
* ```visibletokeyholder``` Whether the Note should be visible to the Customer (optional default false)
* ```highlight``` Whether the Note should be flagged on a certain action (like booking a property) (optional default false)
* ```pin``` Whether the Note should be pinned to the top of lists (optional default false)
* ```private``` Whether the note is private to the person who created it (optional default false)
* ```completedbyactorid``` Id of the Actor completing the Note (optional)
* ```archivedbyactorid``` Id of the Actor archiving the Note (optional)
* ```notetext_createdbyactorid``` Actor Id of the Actor creating the Note (optional)
* ```notetext_notetext``` The note text (optional)
* ```notetext_followupdatetime``` The date and time the note should be followed up (optional)
* ```notetext_actioneddatetime``` The date and time the note was actioned (optional)
* ```notetext_actionedbytabsuser``` The tabs user who actioned the note (optional)
* ```bookingid``` Id of the Booking to link the note to (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/note/1

## Note Detail [/v2/note/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Note to get

### Get a specific Note [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "notetype": {
                "id": 1,
                "notetype": "Warning",
                "description": "A warning which should be highlighted to the user",
                "donotdelete": true
            },
            "subject": "Lorem ipsum",
            "created": "2014-08-09 12:34:56",
            "createdby": {
                "actorid": 1,
                "actortype": "TabsUser",
                "actor": "/v2/tabsuser/1",
                "name": "system system"
            },
            "createdfromscreen": "Booking",
            "visibletocustomer": false,
            "visibletoowner": false,
            "visibletocleaner": false,
            "visibletokeyholder": false,
            "highlight": false,
            "pin": true,
            "private": true,
            "completed": "",
            "completedby": [],
            "archived": "",
            "archivedby": [],
            "notetexts": [
                {
                    "id": 1,
                    "createdby": {
                        "actorid": 1,
                        "actortype": "TabsUser",
                        "actor": "/v2/tabsuser/1",
                        "name": "system system"
                    },
                    "created": "2014-08-09 12:34:56",
                    "notetext": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut non orci id quam pharetra mattis sit amet id nisl.",
                    "actioned": "2020-02-01 12:21:45",
                    "actionedby": {
                        "actorid": 1,
                        "actortype": "TabsUser",
                        "actor": "/v2/tabsuser/1",
                        "name": "system system"
                    },
                    "followup": "2020-01-01 12:01:45"
                },
                {
                    "id": 2,
                    "createdby": {
                        "actorid": 1,
                        "actortype": "TabsUser",
                        "actor": "/v2/tabsuser/1",
                        "name": "system system"
                    },
                    "created": "2014-08-09 12:37:56",
                    "notetext": "Donec nec eros vitae dui tincidunt convallis. Ut neque diam, consequat a nisi quis, aliquet imperdiet lacus.",
                    "actioned": "",
                    "actionedby": []
                }
            ],
            "noteactors": [
                {
                    "actorid": 1,
                    "actortype": "TabsUser",
                    "actor": "/v2/tabsuser/1",
                    "name": "system system",
                    "id": 2,
                    "notifychanges": false,
                    "reminderdate": "2017-08-23"
                },
                {
                    "actorid": 7,
                    "actortype": "Customer",
                    "actor": "/v2/customer/7",
                    "name": "Thomas Thornley",
                    "id": 1,
                    "notifychanges": true,
                    "reminderdate": "2016-10-15"
                }
            ],
            "bookings": [
                {
                    "bookingnoteid": 1,
                    "bookingid": 1,
                    "booking": "/v2/booking/1",
                    "fromdate": "2026-10-01",
                    "todate": "2026-10-08"
                }
            ],
            "properties": [
                {
                    "propertynoteid": 2,
                    "propertyid": 1,
                    "property": "/v2/property/1",
                    "name": "Angler Cottage",
                    "tabspropref": "1105",
                    "fromdate": "2015-07-25",
                    "todate": "2015-08-02",
                    "requiresconfirmation": false,
                    "showonweb": false,
                    "showonavailability": true
                },
                {
                    "propertynoteid": 1,
                    "propertyid": 2,
                    "property": "/v2/property/2",
                    "name": "Reedmere",
                    "tabspropref": "1212",
                    "fromdate": "2015-06-30",
                    "todate": "2015-07-15",
                    "requiresconfirmation": true,
                    "showonweb": true,
                    "showonavailability": false
                }
            ],
            "actors": [
                {
                    "actorid": 7,
                    "actortype": "Customer",
                    "actor": "/v2/customer/7",
                    "name": "Thomas Thornley",
                    "actornoteid": 1
                }
            ],
            "workorders": [
                {
                    "workordernoteid": 2,
                    "workorderid": 3,
                    "workorder": "/v2/workorder/3"
                }
            ]
        }

### Updates a Note for a given id [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. e.g.:

        subject=Cancellation

+ Response 204

### Deletes a Note [DELETE]

+ Response 204



## Note Actor index [/v2/note/{id}/actor]
### Get all Note Actors [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the Note

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "actor": "/v2/tabsuser/1",
                "notifychanges": false,
                "reminderdate": "2017-08-23"
            },
            {
                "id": 1,
                "actor": "/v2/customer/6",
                "notifychanges": true,
                "reminderdate": "2016-10-15"
            }
        ]

### Add a new Note Actor to a given Note [POST]
The following fields should be provided in the POST array:

* ```actorid``` Id of the Actor to add to the Note
* ```notifychanges``` Whether the Actor should be notified when the note changes (optional, default true)
* ```reminderdate``` The date the Actor should be reminded to action the note (optional)

+ Parameters

    + id (required, integer, `1`) ... The id of the Note to get

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/note/1/actor/1

## Note Actor Detail [/v2/note/{id}/actor/{id2}]
### Retrieve an individual Note Actor [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the Note
    + id2 (required, integer, `2`) ... The id of the NoteActor

+ Response 200 (application/json)

        {
            "id": 2,
            "actor": "/v2/tabsuser/1",
            "notifychanges": false,
            "reminderdate": "2017-08-23"
        }

### Updates the details of a Note Actor [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. e.g.:

        notifychanges=true

+ Parameters

    + id (required, integer, `1`) ... The id of the Note
    + id2 (required, integer, `1`) ... The id of the NoteActor

+ Response 204

### Deletes an Actor from a Note [DELETE]
Remove an Actor from a given Note.

+ Parameters

    + id (required, integer, `1`) ... The id of the Note
    + id2 (required, integer, `1`) ... The id of the NoteActor

+ Response 204



## Note Text index [/v2/note/{id}/text]

+ Parameters

    + id (required, integer, `1`) ... The id of the Note

### Get all Note Texts [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "createdby": {
                    "actorid": 1,
                    "actortype": "TabsUser",
                    "actor": "/v2/tabsuser/1",
                    "name": "system system"
                },
                "created": "2014-08-09 12:34:56",
                "notetext": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut non orci id quam pharetra mattis sit amet id nisl.",
                "actioned": "2020-02-01 12:21:45",
                "actionedby": {
                    "actorid": 1,
                    "actortype": "TabsUser",
                    "actor": "/v2/tabsuser/1",
                    "name": "system system"
                },
                "followup": "2020-01-01 12:01:45"
            },
            {
                "id": 2,
                "createdby": {
                    "actorid": 1,
                    "actortype": "TabsUser",
                    "actor": "/v2/tabsuser/1",
                    "name": "system system"
                },
                "created": "2014-08-09 12:37:56",
                "notetext": "Donec nec eros vitae dui tincidunt convallis. Ut neque diam, consequat a nisi quis, aliquet imperdiet lacus.",
                "actioned": "",
                "actionedby": []
            }
        ]

### Add a new Note Text to a given Tote [POST]
The following fields should be provided in the POST array:

* ```createdbyactorid``` Actor Id of the Actor creating the Note
* ```notetext``` Whether the Note should be shown to the Customer
* ```followupdatetime``` The date and time the note should be followed up
* ```actioneddatetime``` The date and time the note was actioned (optional)
* ```actionedbytabsuserid``` The tabs user who actioned the note (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/note/1/text/1

## Note Text Detail [/v2/note/{id}/text/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Note
    + id2 (required, integer, `1`) ... The id of the NoteText

### Retrieve an individual Text Note [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "createdby": {
                "actorid": 1,
                "actortype": "TabsUser",
                "actor": "/v2/tabsuser/1",
                "name": "system system"
            },
            "created": "2014-08-09 12:34:56",
            "notetext": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut non orci id quam pharetra mattis sit amet id nisl.",
            "actioned": "2020-02-01 12:21:45",
            "actionedby": {
                "actorid": 1,
                "actortype": "TabsUser",
                "actor": "/v2/tabsuser/1",
                "name": "system system"
            },
            "followup": "2020-01-01 12:01:45"
        }

### Updates a the Text Note for for a given id [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any ommited fields will be left as is. eg:

        notetext=ipsum llorem custodiat principis

+ Response 204

### Deletes a the Text Note for for a given id [DELETE]
Remove a Note Text for a given Tote.

+ Response 204



## Note Types [/v2/notetype]
### Retrieve a list of NoteTypes stored on the system. [GET]
Any note stored on the api must reference one of the types listed in this route.

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "notetype": "Warning",
                "description": "A warning which should be highlighted to the user",
                "donotdelete": true
            },
            {
                "id":2,
                "notetype": "Complaint",
                "description": "A complaint which should be highlighted to the user",
                "donotdelete": true
            },
            {
                "id":3,
                "notetype": "Normal",
                "description": "A normal standard note",
                "donotdelete": true
            },
            {
                "id":4,
                "notetype": "Local",
                "description": "A local brand note",
                "donotdelete": false
            }
        ]

### Add a new NoteType [POST]
The following fields should be provided in the POST array

* ```notetype``` The type
* ```description``` A description of the notetype.

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/notetype/2

## NoteType Detail [/v2/notetype/{id}]
### Gets the details of a NoteType [GET]
+ Parameters

    + id (required, integer, `2`) ... The id of the NoteType to get

+ Response 200 (application/json)

        {
            "id": 2,
            "notetype": "Complaint",
            "description": "A complaint which should be highlighted to the user",
            "donotdelete": true
        }

### Update a NoteType [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the NoteType

+ Request (application/x-www-form-urlencoded)

        description=new note type

+ Response 204

### Deletes a NoteType [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the NoteType

+ Response 204



## OwnerCharge Index [/v2/owner/{id}/charge{?orderBy}]
owner/16/charge?orderBy=createddatetime

+ Parameters

    + id (required, integer, `16`) ... The id of the Owner
    + orderBy (optional, string, `createddatetime`) ... The option to sort by

### Retrieve a list of owner charges. [GET]

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 4,
            "page": 1,
            "count": 4,
            "limit": 10,
            "time": 0,
            "orderBy": "createddatetime",
            "filter": "",
            "previous": null,
            "next": null,
            "elements": [
              {
                "id": 5,
                "type": "OwnerChargeWorkOrder",
                "bookeddate": "2017-04-29",
                "workdonedate": "2016-10-20",
                "ownerchargecode": {
                  "id": 1,
                  "ownerchargecode": "ADM",
                  "description": "Administration Charge",
                  "vatband": {
                    "id": 2,
                    "vatband": "Standard"
                  },
                  "recharge": false
                },
                "description": "Blah blah money money",
                "amountnet": 19.44,
                "amountvat": 3.89,
                "exchangerate": {
                  "id": 1,
                  "currency": {
                    "id": 1,
                    "code": "GBP",
                    "name": "Pound Sterling",
                    "decimalplaces": 2
                  },
                  "unitsperbaseunit": 1
                },
                "ownerstatement": null,
                "created": "2017-04-29 12:28:12",
                "createdby": "/v2/tabsuser/24",
                "lastupdated": "2017-04-29 12:28:12",
                "cancelled": null,
                "cancelledby": null,
                "owner": "/v2/owner/16",
                "invoiceitem": "/v2/supplierinvoice/1/item/1"
              },
              {
                "id": 4,
                "type": "OwnerChargeProperty",
                "bookeddate": "2017-04-29",
                "workdonedate": "2016-10-26",
                "ownerchargecode": {
                  "id": 1,
                  "ownerchargecode": "ADM",
                  "description": "Administration Charge",
                  "vatband": {
                    "id": 2,
                    "vatband": "Standard"
                  },
                  "recharge": false
                },
                "description": "Blah blah money money",
                "amountnet": 37.5,
                "amountvat": 7.5,
                "exchangerate": {
                  "id": 1,
                  "currency": {
                    "id": 1,
                    "code": "GBP",
                    "name": "Pound Sterling",
                    "decimalplaces": 2
                  },
                  "unitsperbaseunit": 1
                },
                "ownerstatement": null,
                "created": "2017-04-29 12:28:10",
                "createdby": "/v2/tabsuser/24",
                "lastupdated": "2017-04-29 12:28:10",
                "cancelled": null,
                "cancelledby": null,
                "owner": "/v2/owner/16",
                "property": "/v2/property/2",
                "supplier": "",
                "supplierpaiddate": "2016-11-23",
                "invoicenumber": "AD1234/21",
                "chequenumber": "100032",
                "booking": ""
              },
              {
                "id": 2,
                "type": "OwnerChargeBooking",
                "bookeddate": "2017-04-29",
                "workdonedate": "2016-10-30",
                "ownerchargecode": {
                  "id": 1,
                  "ownerchargecode": "ADM",
                  "description": "Administration Charge",
                  "vatband": {
                    "id": 2,
                    "vatband": "Standard"
                  },
                  "recharge": false
                },
                "description": "Cleaning",
                "amountnet": 14.75,
                "amountvat": 2.99,
                "exchangerate": {
                  "id": 1,
                  "currency": {
                    "id": 1,
                    "code": "GBP",
                    "name": "Pound Sterling",
                    "decimalplaces": 2
                  },
                  "unitsperbaseunit": 1
                },
                "ownerstatement": null,
                "created": "2017-04-29 12:28:06",
                "createdby": "/v2/tabsuser/24",
                "lastupdated": "2017-04-29 12:28:06",
                "cancelled": null,
                "cancelledby": null,
                "owner": "/v2/owner/16",
                "booking": "/v2/booking/3",
                "invoicenumber": "",
                "chequenumber": ""
              },
              {
                "id": 1,
                "type": "OwnerChargeBooking",
                "bookeddate": "2017-04-29",
                "workdonedate": "2016-10-26",
                "ownerchargecode": {
                  "id": 1,
                  "ownerchargecode": "ADM",
                  "description": "Administration Charge",
                  "vatband": {
                    "id": 2,
                    "vatband": "Standard"
                  },
                  "recharge": false
                },
                "description": "Blah blah money money",
                "amountnet": 49.23,
                "amountvat": 9.23,
                "exchangerate": {
                  "id": 1,
                  "currency": {
                    "id": 1,
                    "code": "GBP",
                    "name": "Pound Sterling",
                    "decimalplaces": 2
                  },
                  "unitsperbaseunit": 1
                },
                "ownerstatement": null,
                "created": "2017-04-29 12:28:04",
                "createdby": "/v2/tabsuser/24",
                "lastupdated": "2017-04-29 12:28:04",
                "cancelled": null,
                "cancelledby": null,
                "owner": "/v2/owner/16",
                "booking": "/v2/booking/1",
                "invoicenumber": "",
                "chequenumber": ""
              }
            ]
          }

### Add a new OwnerCharge [POST]

The following fields should be provided in the POST array

* ```type``` The type of charge (OwnerChargeWorkOrder, OwnerChargeProperty or OwnerChargeBooking)
* ```workdonedate``` The work done date
* ```ownerchargecodeid``` The OwnerChargecode id
* ```description``` The description (optional)
* ```amountnet``` The NET amount of the charge
* ```amountvat``` The VAT amount of the charge (optional)
* ```exchangerateid``` The ExchangeRateId (optional, if not provided, currencycode must be)
* ```currencycode``` The ISO Currency Code the amount is in. (optional, overrides exchangerateid if provided)
* ```createdbyactorid``` The id of the tabs user creating the charge
* ```bookeddate``` The date of the charge (optional, default = today)
* ```cancelleddatetime``` The cancelled datetime (optional)
* ```cancelledbyactorid``` The id of the tabs user cancelling the charge (optional)
* ```invoiceitemid``` The InvoiceItem id (required for type=OwnerChargeWorkOrder only)
* ```bookingid``` The Booking id (required for type=OwnerChargeBooking, optional for type=OwnerChargeProperty)
* ```propertyid``` The Property id (required for type=OwnerChargeProperty only)
* ```supplierid``` The Supplier id (optional for type=OwnerChargeProperty only)
* ```supplierpaiddate``` The date the supplier has been paid (optional, for type=OwnerChargeProperty only)
* ```invoicenumber``` The invoice number (optional, for type=OwnerChargeProperty or OwnerChargeBooking only)
* ```chequenumber``` The cheque number (optional, for type=OwnerChargeProperty or OwnerChargeBooking only)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/owner/16/charge/1

## OwnerCharge Detail [/v2/owner/{id}/charge/{id2}]

+ Parameters

    + id (required, integer, `16`) ... The id of the Owner
    + id2 (required, integer, `1`) ... The id of the OwnerCharge

### Gets the details of a OwnerCharge [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "type": "OwnerChargeBooking",
            "bookeddate": "2017-04-29",
            "workdonedate": "2016-10-26",
            "ownerchargecode": {
              "id": 1,
              "ownerchargecode": "ADM",
              "description": "Administration Charge",
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "recharge": false
            },
            "description": "Blah blah money money",
            "amountnet": 49.23,
            "amountvat": 9.23,
            "exchangerate": {
              "id": 1,
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "unitsperbaseunit": 1
            },
            "ownerstatement": null,
            "created": "2017-04-29 12:28:04",
            "createdby": "/v2/tabsuser/24",
            "lastupdated": "2017-04-29 12:28:04",
            "cancelled": null,
            "cancelledby": null,
            "owner": "/v2/owner/16",
            "booking": "/v2/booking/1",
            "invoicenumber": "",
            "chequenumber": ""
          }

### Update a OwnerCharge [PUT]

+ Request (application/x-www-form-urlencoded)

        description=Blah

+ Response 204

### Deletes a OwnerCharge [DELETE]

+ Response 204



## OwnerChargeCode Index [/v2/ownerchargecode]
### Retrieve a list of owner charge codes. [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "ownerchargecode": "ADM",
              "description": "Administration Charge",
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "recharge": false
            },
            {
              "id": 2,
              "ownerchargecode": "MSC",
              "description": "Miscellaneous",
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "recharge": false
            },
            {
              "id": 3,
              "ownerchargecode": "4405",
              "description": "Brochure Fees",
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "recharge": false
            },
            {
              "id": 4,
              "ownerchargecode": "4410",
              "description": "Contract Charges",
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "recharge": false
            },
            {
              "id": 5,
              "ownerchargecode": "4430",
              "description": "VE Membership",
              "vatband": [],
              "recharge": true
            },
            {
              "id": 6,
              "ownerchargecode": "4500",
              "description": "MS - Call Out Fees",
              "vatband": [],
              "recharge": true
            },
            {
              "id": 7,
              "ownerchargecode": "4501",
              "description": "MS - Stock Items and Parts",
              "vatband": [],
              "recharge": true
            },
            {
              "id": 8,
              "ownerchargecode": "4502",
              "description": "MS - Third Party Services",
              "vatband": [],
              "recharge": true
            },
            {
              "id": 9,
              "ownerchargecode": "4503",
              "description": "MS - Contract Fees",
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "recharge": false
            },
            {
              "id": 10,
              "ownerchargecode": "4504",
              "description": "MS - House Keeping Income",
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "recharge": false
            },
            {
              "id": 11,
              "ownerchargecode": "4505",
              "description": "MS - Internal Pat Testing",
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "recharge": false
            },
            {
              "id": 12,
              "ownerchargecode": "4506",
              "description": "MS - Miscellaneous Income",
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "recharge": false
            },
            {
              "id": 13,
              "ownerchargecode": "4507",
              "description": "MS - Linen, Toiletries & Towels - Stock",
              "vatband": [],
              "recharge": true
            },
            {
              "id": 14,
              "ownerchargecode": "4508",
              "description": "MS - Stock Items and Parts - Sold at Cost",
              "vatband": [],
              "recharge": true
            }
          ]

### Add a new OwnerChargeCode [POST]
The following fields should be provided in the POST array

* ```ownerchargecode``` The charge code
* ```description``` The description
* ```vatbandid``` The id of the applicable VAT Band
* ```recharge``` Whether the charge code relates to a Recharge (passing on of a cost), or a Management Fee (probably VATable)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/ownerchargecode/2

## OwnerChargeCode Detail [/v2/ownerchargecode/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the OwnerChargeCode to get

### Gets the details of a OwnerChargeCode [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "ownerchargecode": "MSC",
            "description": "Miscellaneous",
            "vatband": {
              "id": 2,
              "vatband": "Standard"
            },
            "recharge": false
          }

### Update a OwnerChargeCode [PUT]

+ Request (application/x-www-form-urlencoded)

        description=Miscellaneous

+ Response 204

### Deletes a OwnerChargeCode [DELETE]

+ Response 204



## Importing OwnerCharges [/v2/ownercharge/import]

### Import a list of ownercharges [POST]
The following fields should be provided in the POST array

* ```importtype``` The data type of the file to be imported (csv only at the moment)
* ```tabsuserid``` The id of the tabs user importing the data
* ```data``` string representation of the file to be imported.  New lines should be replaced by pipe characters (|)

+ Response 201

        {
            "importedrows": 3
        }




## OwnerEnquiryAction Index [/v2/owner/{id}/enquiryaction]

+ Parameters

    + id (required, integer, `16`) ... The id of the owner

### Retrieve a list of owner enquiry actions. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "ownerenquiryactiontype": {
                    "id": 1,
                    "action": "Owner Pack Sent",
                    "description": null
                },
                "duedate": "2017-01-01",
                "completeddate": "2017-01-02",
                "completedbytabsuser": {
                    "id": 24,
                    "type": "TabsUser",
                    "actorcode": "",
                    "created": "2017-05-15",
                    "updated": "",
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "inactive": false,
                    "firstname": "Ian",
                    "surname": "Stamp",
                    "title": "Mr",
                    "salutation": "Ian",
                    "companyname": "",
                    "vatnumber": "",
                    "companynumber": "",
                    "contactdetails": [
                        {
                            "id": 47,
                            "type": "C",
                            "contactmethodtype": "Email",
                            "contactmethodsubtype": "Home",
                            "value": "ian@stamp.com",
                            "comment": "",
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [],
                            "dedupekey": "ot-ian@stamp.com"
                        },
                        {
                            "id": 48,
                            "type": "P",
                            "contactmethodsubtype": "Home",
                            "address": {
                                "id": 33,
                                "line1": "Carlton House",
                                "line2": "Market Place",
                                "line3": "",
                                "town": "Reepham",
                                "county": "Norfolk",
                                "postcode": "NR10 4JJ",
                                "country": {
                                    "alpha2": "GB",
                                    "alpha3": "GBR",
                                    "name": "United Kingdom"
                                },
                                "longitude": "1.652729",
                                "latitude": "52.617954",
                                "geohash": ""
                            },
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [
                                {
                                    "id": 16,
                                    "branding": "/v2/branding/1",
                                    "rolereason": {
                                        "id": 1,
                                        "role": {
                                            "id": 1,
                                            "name": "Customer",
                                            "donotdelete": true
                                        },
                                        "reason": {
                                            "id": 1,
                                            "name": "Booking Confirmation",
                                            "donotdelete": true
                                        },
                                        "donotdelete": true,
                                        "required": true
                                    },
                                    "priority": 1,
                                    "donotuse": false
                                }
                            ],
                            "dedupekey": "po-nr104jj"
                        }
                    ],
                    "bankaccounts": [],
                    "bacsbankaccount": {},
                    "documents": [],
                    "mergedinto": "",
                    "potentialduplicates": [],
                    "mergedactors": [],
                    "accountingreference": "",
                    "tabsusername": "ian",
                    "roles": [],
                    "tabscode": "XDFG23",
                    "settings": [],
                    "defaultbrandinggroup": [],
                    "defaultbookingbrand": [],
                    "defaultbranding": []
                }
            },
            {
                "id": 2,
                "ownerenquiryactiontype": {
                    "id": 2,
                    "action": "Follow-up Call 1",
                    "description": null
                },
                "duedate": "2017-01-02",
                "completeddate": "2017-01-03",
                "completedbytabsuser": {
                    "id": 24,
                    "type": "TabsUser",
                    "actorcode": "",
                    "created": "2017-05-15",
                    "updated": "",
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "inactive": false,
                    "firstname": "Ian",
                    "surname": "Stamp",
                    "title": "Mr",
                    "salutation": "Ian",
                    "companyname": "",
                    "vatnumber": "",
                    "companynumber": "",
                    "contactdetails": [
                        {
                            "id": 47,
                            "type": "C",
                            "contactmethodtype": "Email",
                            "contactmethodsubtype": "Home",
                            "value": "ian@stamp.com",
                            "comment": "",
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [],
                            "dedupekey": "ot-ian@stamp.com"
                        },
                        {
                            "id": 48,
                            "type": "P",
                            "contactmethodsubtype": "Home",
                            "address": {
                                "id": 33,
                                "line1": "Carlton House",
                                "line2": "Market Place",
                                "line3": "",
                                "town": "Reepham",
                                "county": "Norfolk",
                                "postcode": "NR10 4JJ",
                                "country": {
                                    "alpha2": "GB",
                                    "alpha3": "GBR",
                                    "name": "United Kingdom"
                                },
                                "longitude": "1.652729",
                                "latitude": "52.617954",
                                "geohash": ""
                            },
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [
                                {
                                    "id": 16,
                                    "branding": "/v2/branding/1",
                                    "rolereason": {
                                        "id": 1,
                                        "role": {
                                            "id": 1,
                                            "name": "Customer",
                                            "donotdelete": true
                                        },
                                        "reason": {
                                            "id": 1,
                                            "name": "Booking Confirmation",
                                            "donotdelete": true
                                        },
                                        "donotdelete": true,
                                        "required": true
                                    },
                                    "priority": 1,
                                    "donotuse": false
                                }
                            ],
                            "dedupekey": "po-nr104jj"
                        }
                    ],
                    "bankaccounts": [],
                    "bacsbankaccount": {},
                    "documents": [],
                    "mergedinto": "",
                    "potentialduplicates": [],
                    "mergedactors": [],
                    "accountingreference": "",
                    "tabsusername": "ian",
                    "roles": [],
                    "tabscode": "XDFG23",
                    "settings": [],
                    "defaultbrandinggroup": [],
                    "defaultbookingbrand": [],
                    "defaultbranding": []
                }
            },
            {
                "id": 3,
                "ownerenquiryactiontype": {
                    "id": 3,
                    "action": "Follow-up Call 2",
                    "description": null
                },
                "duedate": "2017-01-03",
                "completeddate": "2017-01-04",
                "completedbytabsuser": {
                    "id": 24,
                    "type": "TabsUser",
                    "actorcode": "",
                    "created": "2017-05-15",
                    "updated": "",
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "inactive": false,
                    "firstname": "Ian",
                    "surname": "Stamp",
                    "title": "Mr",
                    "salutation": "Ian",
                    "companyname": "",
                    "vatnumber": "",
                    "companynumber": "",
                    "contactdetails": [
                        {
                            "id": 47,
                            "type": "C",
                            "contactmethodtype": "Email",
                            "contactmethodsubtype": "Home",
                            "value": "ian@stamp.com",
                            "comment": "",
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [],
                            "dedupekey": "ot-ian@stamp.com"
                        },
                        {
                            "id": 48,
                            "type": "P",
                            "contactmethodsubtype": "Home",
                            "address": {
                                "id": 33,
                                "line1": "Carlton House",
                                "line2": "Market Place",
                                "line3": "",
                                "town": "Reepham",
                                "county": "Norfolk",
                                "postcode": "NR10 4JJ",
                                "country": {
                                    "alpha2": "GB",
                                    "alpha3": "GBR",
                                    "name": "United Kingdom"
                                },
                                "longitude": "1.652729",
                                "latitude": "52.617954",
                                "geohash": ""
                            },
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [
                                {
                                    "id": 16,
                                    "branding": "/v2/branding/1",
                                    "rolereason": {
                                        "id": 1,
                                        "role": {
                                            "id": 1,
                                            "name": "Customer",
                                            "donotdelete": true
                                        },
                                        "reason": {
                                            "id": 1,
                                            "name": "Booking Confirmation",
                                            "donotdelete": true
                                        },
                                        "donotdelete": true,
                                        "required": true
                                    },
                                    "priority": 1,
                                    "donotuse": false
                                }
                            ],
                            "dedupekey": "po-nr104jj"
                        }
                    ],
                    "bankaccounts": [],
                    "bacsbankaccount": {},
                    "documents": [],
                    "mergedinto": "",
                    "potentialduplicates": [],
                    "mergedactors": [],
                    "accountingreference": "",
                    "tabsusername": "ian",
                    "roles": [],
                    "tabscode": "XDFG23",
                    "settings": [],
                    "defaultbrandinggroup": [],
                    "defaultbookingbrand": [],
                    "defaultbranding": []
                }
            }
        ]

### Add a new OwnerEnquiryAction [POST]
The following fields should be provided in the POST array

* ```ownerenquiryactiontypeid``` The id of the OwnerEnquiryActionType
* ```duedate``` The due date of the action
* ```completeddate``` The completed date of the action (optional)
* ```completedbytabsuserid``` The id of the actor

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/owner/16/enquiryaction/2

## OwnerEnquiryAction Detail [/v2/owner/{id}/enquiryaction/{id2}]

+ Parameters

    + id (required, integer, `16`) ... The id of the Owner
    + id2 (required, integer, `1`) ... The id of the OwnerEnquiryAction

### Gets the details of a OwnerEnquiryAction [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "ownerenquiryactiontype": {
                "id": 1,
                "action": "Owner Pack Sent",
                "description": null
            },
            "duedate": "2017-01-01",
            "completeddate": "2017-01-02",
            "completedbytabsuser": {
                "id": 24,
                "type": "TabsUser",
                "actorcode": "",
                "created": "2017-05-15",
                "updated": "",
                "language": {
                    "id": 1,
                    "code": "EN",
                    "name": "English"
                },
                "inactive": false,
                "firstname": "Ian",
                "surname": "Stamp",
                "title": "Mr",
                "salutation": "Ian",
                "companyname": "",
                "vatnumber": "",
                "companynumber": "",
                "contactdetails": [
                    {
                        "id": 47,
                        "type": "C",
                        "contactmethodtype": "Email",
                        "contactmethodsubtype": "Home",
                        "value": "ian@stamp.com",
                        "comment": "",
                        "invalid": false,
                        "invaliddatetime": "",
                        "invalidreason": "",
                        "contactpreferences": [],
                        "dedupekey": "ot-ian@stamp.com"
                    },
                    {
                        "id": 48,
                        "type": "P",
                        "contactmethodsubtype": "Home",
                        "address": {
                            "id": 33,
                            "line1": "Carlton House",
                            "line2": "Market Place",
                            "line3": "",
                            "town": "Reepham",
                            "county": "Norfolk",
                            "postcode": "NR10 4JJ",
                            "country": {
                                "alpha2": "GB",
                                "alpha3": "GBR",
                                "name": "United Kingdom"
                            },
                            "longitude": "1.652729",
                            "latitude": "52.617954",
                            "geohash": ""
                        },
                        "invalid": false,
                        "invaliddatetime": "",
                        "invalidreason": "",
                        "contactpreferences": [
                            {
                                "id": 16,
                                "branding": "/v2/branding/1",
                                "rolereason": {
                                    "id": 1,
                                    "role": {
                                        "id": 1,
                                        "name": "Customer",
                                        "donotdelete": true
                                    },
                                    "reason": {
                                        "id": 1,
                                        "name": "Booking Confirmation",
                                        "donotdelete": true
                                    },
                                    "donotdelete": true,
                                    "required": true
                                },
                                "priority": 1,
                                "donotuse": false
                            }
                        ],
                        "dedupekey": "po-nr104jj"
                    }
                ],
                "bankaccounts": [],
                "bacsbankaccount": {},
                "documents": [],
                "mergedinto": "",
                "potentialduplicates": [],
                "mergedactors": [],
                "accountingreference": "",
                "tabsusername": "ian",
                "roles": [],
                "tabscode": "XDFG23",
                "settings": [],
                "defaultbrandinggroup": [],
                "defaultbookingbrand": [],
                "defaultbranding": []
            }
        }

### Update an OwnerEnquiryAction [PUT]

+ Request (application/x-www-form-urlencoded)

        duedate=2017-01-20

+ Response 204

### Deletes a OwnerEnquiryAction [DELETE]

+ Response 204




## OwnerEnquiryActionType Index [/v2/ownerenquiryactiontype]
### Retrieve a list of owner enquiry action types. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "action": "Owner Pack Sent",
                "description": null
            },
            {
                "id": 2,
                "action": "Follow-up Call 1",
                "description": null
            },
            {
                "id": 3,
                "action": "Follow-up Call 2",
                "description": null
            },
            {
                "id": 4,
                "action": "Inspection",
                "description": null
            },            
            {
                "id": 5,
                "action": "Inspection Letter",
                "description": null
            }            
        ]

### Add a new OwnerEnquiryActionType [POST]
The following fields should be provided in the POST array

* ```action``` The action
* ```description``` The description (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/ownerenquiryactiontype/2

## OwnerEnquiryActionType Detail [/v2/ownerenquiryactiontype/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the OwnerEnquiryActionType to get

### Gets the details of a OwnerEnquiryActionType [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "action": "Follow-up Call 1",
            "description": null
        }

### Update a OwnerEnquiryActionType [PUT]

+ Request (application/x-www-form-urlencoded)

        description=inspection letter

+ Response 204

### Deletes a OwnerEnquiryActionType [DELETE]

+ Response 204



## OwnerPayment Index [/v2/owner/{id}/payment]

+ Parameters

    + id (required, integer, `16`) ... The id of the owner

### Retrieve a list of owner payments. [GET]

+ Response 200 (application/json)

        {
          "searchId": 0,
          "total": 2,
          "page": 1,
          "count": 2,
          "limit": 10,
          "time": 0,
          "orderBy": null,
          "filter": "",
          "previous": null,
          "next": null,
          "elements": [
            {
              "id": 2,
              "owner": "/v2/owner/16",
              "paymentdate": "2016-02-01",
              "amount": "51.05",
              "sortcode": "123456",
              "accountnumber": "123",
              "accountname": "youraccount",
              "chequenumber": "123",
              "bankreference": "blah",
              "ownerreference": "blah",
              "exchangerate": {
              "id": 1,
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "unitsperbaseunit": 1
              },
              "ownerpaymenttype": {
              "id": 1,
              "ownerpaymenttype": "BACS"
              },
              "tabsuser": "/v2/tabsuser/1",
              "ownerstatement": "/v2/ownerstatement/1"
            },
            {
              "id": 1,
              "owner": "/v2/owner/16",
              "paymentdate": "2016-01-01",
              "amount": "25.55",
              "sortcode": "123456",
              "accountnumber": "123",
              "accountname": "my account",
              "chequenumber": "123",
              "bankreference": "blah",
              "ownerreference": "blah",
              "exchangerate": {
              "id": 1,
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "unitsperbaseunit": 1
              },
              "ownerpaymenttype": {
              "id": 1,
              "ownerpaymenttype": "BACS"
              },
              "tabsuser": "/v2/tabsuser/1",
              "ownerstatement": "/v2/ownerstatement/1"
            }
          ]
        }

### Add a new OwnerPayment [POST]
NOTE: This should only be used by tabs1 import routines!
====
The following fields should be provided in the POST array

* ```paymentdate``` The payment date
* ```amount``` The payment amount
* ```sortcode``` The sortcode of the bank account (optional)
* ```accountnumber``` The bank account number (optional)
* ```accountname``` The bank account name (optional)
* ```chequenumber``` The cheque number (optional)
* ```bankreference``` The bank reference (optional, maxlength=6)
* ```ownerreference``` The owner reference (optional, maxlength=18)
* ```exchangerateid``` The id of the ExchangeRate
* ```ownerpaymenttypeid``` The id of the OwnerPaymentType
* ```tabsuserid``` The id of the TabsUser (optional)
* ```ownerstatementid``` The id of the owner statement (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/owner/16/payment/2

## OwnerPayment Detail [/v2/owner/{id}/payment/{id2}]

+ Parameters

    + id (required, integer, `16`) ... The id of the Owner
    + id2 (required, integer, `1`) ... The id of the OwnerPayment

### Gets the details of a OwnerPayment [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "owner": "/v2/owner/16",
            "paymentdate": "2016-01-01",
            "amount": "25.55",
            "sortcode": "123456",
            "accountnumber": "123",
            "accountname": "my account",
            "chequenumber": "123",
            "bankreference": "blah",
            "ownerreference": "blah",
            "exchangerate": {
              "id": 1,
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "unitsperbaseunit": 1
            },
            "ownerpaymenttype": {
              "id": 1,
              "ownerpaymenttype": "BACS"
            },
            "tabsuser": "/v2/tabsuser/1",
            "ownerstatement": "/v2/ownerstatement/1"
          }

### Update a OwnerPayment [PUT]

+ Response 501

### Deletes a OwnerPayment [DELETE]

+ Response 501



## OwnerPaymentSelection Index [/v2/ownerpaymentselection]
### Retrieve a list of Owner Payment Selections. [GET]

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 3,
            "page": 1,
            "count": 3,
            "limit": 10,
            "time": 0,
            "orderBy": null,
            "filter": "",
            "previous": null,
            "next": null,
            "elements": [
              {
                "id": 1,
                "bookingbrand": "/v2/bookingbrand/3",
                "selectbookingson": "fromdate",
                "paytodate": "2016-10-31",
                "owners": [],
                "created": "2016-09-26 12:30:43",
                "createdby": "/v2/tabsuser/24",
                "paid": "",
                "paidby": "",
                "cancelled": "",
                "cancelledby": ""
              },
              {
                "id": 2,
                "bookingbrand": "/v2/bookingbrand/1",
                "selectbookingson": "fromdate",
                "paytodate": "2016-10-24",
                "owners": [],
                "created": "2016-09-26 12:40:43",
                "createdby": "/v2/tabsuser/25",
                "paid": "2016-09-12 13:45:36",
                "paidby": "/v2/tabsuser/24",
                "cancelled": "",
                "cancelledby": ""
              },
              {
                "id": 3,
                "bookingbrand": "/v2/bookingbrand/1",
                "selectbookingson": "fromdate",
                "paytodate": "2016-10-24",
                "owners": [
                  "/v2/owner/16",
                  "/v2/owner/17"
                ],
                "created": "2016-09-26 12:50:43",
                "createdby": "/v2/tabsuser/24",
                "paid": "",
                "paidby": "",
                "cancelled": "2016-09-21 14:14:14",
                "cancelledby": "/v2/tabsuser/25"
              }
            ]
          }

### Add a new OwnerPaymentSelection [POST]
The following fields should be provided in the POST array

* ```bookingbrandid``` The Brand the selection is for
* ```selectbookingson``` Whether to select based on 'fromdate' or 'todate'
* ```paytodate``` The date limit for payments
* ```createdbytabsuser``` The tabs user who created the selection
* ```cancelledbytabsuser``` The tabs user who cancelled the selection
* ```ownerids``` Comma-separated list of owner ids to list payments for

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/ownerpaymentselection/2

## OwnerPaymentSelection Detail [/v2/ownerpaymentselection/{id}]

+ Parameters

    + id (required, integer, `3`) ... The id of the OwnerPaymentSelection to get

### Gets the details of an OwnerPaymentSelection [GET]

+ Response 200 (application/json)

        {
            "id": 3,
            "bookingbrand": "/v2/bookingbrand/1",
            "selectbookingson": "fromdate",
            "paytodate": "2016-10-24",
            "owners": [
              "/v2/owner/16",
              "/v2/owner/17"
            ],
            "created": "2016-09-26 12:50:43",
            "createdby": "/v2/tabsuser/24",
            "paid": "",
            "paidby": "",
            "cancelled": "2016-09-21 14:14:14",
            "cancelledby": "/v2/tabsuser/25"
          }

### Update an OwnerPaymentSelection [PUT]

+ Request (application/x-www-form-urlencoded)

        authorised=true           Authorise or unauthorise all payment items (optional)
        value=10                 With value > 10 (or < 10 if authorise=false) (mandatory with authorise)
        authorisedbytabsuserid=2 Id of user authorising the items (mandatory with authorise)
        paidbytabsuserid=2       Id of user paying the authorised items
        cancelledbytabsuserid=2  Id of user cancelling the selection (has no real effect, except can no longer be paid once cancelled)

+ Response 204

### Deletes an OwnerPaymentSelection [DELETE]

+ Response 501



## Owner PaymentItem Index [/v2/owner/{id}/paymentitem]

+ Parameters

    + id (required, integer, `16`) ... The id of the Owner

### Retrieve a list of Owner PaymentItems. [GET]

+ Response 200 (application/json)

        [
            {
              "id": 3,
              "type": "Booking",
              "owner": "/v2/owner/16",
              "ownername": "Stamp, Ian (Mr)",
              "booking": "/v2/booking/1",
              "bookingbrand": "/v2/bookingbrand/3",
              "fromdate": "2014-01-04",
              "todate": "2014-01-04",
              "description": "Booking: October 1st 2026, Angler Cottage",
              "totalprice": 310.75,
              "ownerincome": 189.21,
              "agencyincome": 36.58,
              "vatrate": {},
              "agencyvat": 7.32,
              "totalbasic": 233.11,
              "totalextras": {
                "ownerincome": 9.75,
                "agencyincome": 47.62,
                "agencyvat": 9.52,
                "total": 66.89
              },
              "total": {
                "ownerincome": 198.96,
                "agencyincome": 84.2,
                "agencyvat": 16.84,
                "total": 300
              },
              "paymentrequired": "",
              "authorised": "",
              "authorisedby": "",
              "ownerpayment": "",
              "dontpayowneruntil": "",
              "extras": [
                {
                  "id": 1,
                  "ownerincome": 9.75,
                  "agencyincome": 0,
                  "vatrate": {},
                  "agencyvat": 0,
                  "extra": {
                    "id": 3,
                    "extracode": "HEAT",
                    "extratype": "Booking",
                    "description": "Heating",
                    "brandings": [
                      "/v2/branding/2",
                      "/v2/branding/3",
                      "/v2/branding/4",
                      "/v2/branding/6"
                    ]
                  },
                  "bookingextra": "/v2/booking/1/extra/3"
                },
                {
                  "id": 2,
                  "ownerincome": 0,
                  "agencyincome": 22.5,
                  "vatrate": {},
                  "agencyvat": 4.5,
                  "extra": {
                    "id": 1,
                    "extracode": "BKFE",
                    "extratype": "Booking",
                    "description": "Booking Fee",
                    "brandings": [
                      "/v2/branding/1",
                      "/v2/branding/2",
                      "/v2/branding/3",
                      "/v2/branding/4",
                      "/v2/branding/6"
                    ]
                  },
                  "bookingextra": "/v2/booking/1/extra/1"
                },
                {
                  "id": 3,
                  "ownerincome": 0,
                  "agencyincome": 25.12,
                  "vatrate": {},
                  "agencyvat": 5.02,
                  "extra": {
                    "id": 2,
                    "extracode": "CANC",
                    "extratype": "Booking",
                    "description": "Cancellation Scheme",
                    "brandings": [
                      "/v2/branding/1",
                      "/v2/branding/3",
                      "/v2/branding/4",
                      "/v2/branding/6"
                    ]
                  },
                  "bookingextra": "/v2/booking/1/extra/2"
                }
              ],
              "authorisations": [],
              "created": "",
              "createdby": "",
              "reason": ""
            },
            {
              "id": 4,
              "type": "Booking",
              "owner": "/v2/owner/16",
              "ownername": "Stamp, Ian (Mr)",
              "booking": "/v2/booking/1",
              "bookingbrand": "/v2/bookingbrand/3",
              "fromdate": "2026-09-17",
              "todate": "2026-09-17",
              "description": "Booking: October 1st 2026, Angler Cottage",
              "totalprice": 310.75,
              "ownerincome": 10.75,
              "agencyincome": 0,
              "vatrate": {},
              "agencyvat": 0,
              "totalbasic": 10.75,
              "totalextras": {
                "ownerincome": 0,
                "agencyincome": 0,
                "agencyvat": 0,
                "total": 0
              },
              "total": {
                "ownerincome": 10.75,
                "agencyincome": 0,
                "agencyvat": 0,
                "total": 10.75
              },
              "paymentrequired": "Balance",
              "authorised": "",
              "authorisedby": "",
              "ownerpayment": "",
              "dontpayowneruntil": "",
              "extras": [],
              "authorisations": [],
              "created": "",
              "createdby": "",
              "reason": ""
            },
            {
              "id": 10,
              "type": "Booking",
              "owner": "/v2/owner/16",
              "ownername": "Stamp, Ian (Mr)",
              "booking": "/v2/booking/10",
              "bookingbrand": "/v2/bookingbrand/3",
              "fromdate": "2025-01-21",
              "todate": "2025-01-21",
              "description": "Booking: March 18th 2025, Angler Cottage",
              "totalprice": 280,
              "ownerincome": 120,
              "agencyincome": 0,
              "vatrate": {},
              "agencyvat": 0,
              "totalbasic": 120,
              "totalextras": {
                "ownerincome": 0,
                "agencyincome": 0,
                "agencyvat": 0,
                "total": 0
              },
              "total": {
                "ownerincome": 120,
                "agencyincome": 0,
                "agencyvat": 0,
                "total": 120
              },
              "paymentrequired": "Deposit",
              "authorised": "",
              "authorisedby": "",
              "ownerpayment": "",
              "dontpayowneruntil": "",
              "extras": [],
              "authorisations": [],
              "created": "",
              "createdby": "",
              "reason": ""
            },
            {
              "id": 11,
              "type": "Booking",
              "owner": "/v2/owner/16",
              "ownername": "Stamp, Ian (Mr)",
              "booking": "/v2/booking/10",
              "bookingbrand": "/v2/bookingbrand/3",
              "fromdate": "2025-03-04",
              "todate": "2025-03-04",
              "description": "Booking: March 18th 2025, Angler Cottage",
              "totalprice": 280,
              "ownerincome": 96.16,
              "agencyincome": 53.2,
              "vatrate": {},
              "agencyvat": 10.64,
              "totalbasic": 160,
              "totalextras": {
                "ownerincome": 0,
                "agencyincome": 0,
                "agencyvat": 0,
                "total": 0
              },
              "total": {
                "ownerincome": 96.16,
                "agencyincome": 53.2,
                "agencyvat": 10.64,
                "total": 160
              },
              "paymentrequired": "Balance",
              "authorised": "",
              "authorisedby": "",
              "ownerpayment": "",
              "dontpayowneruntil": "",
              "extras": [],
              "authorisations": [],
              "created": "",
              "createdby": "",
              "reason": ""
            },
            {
              "id": 5,
              "type": "Booking",
              "owner": "/v2/owner/16",
              "ownername": "Stamp, Ian (Mr)",
              "booking": "/v2/booking/2",
              "bookingbrand": "/v2/bookingbrand/3",
              "fromdate": "2017-04-13",
              "todate": "2017-04-13",
              "description": "Booking: July 16th 2016, Angler Cottage",
              "totalprice": 1146.5,
              "ownerincome": 554.1,
              "agencyincome": 117.81,
              "vatrate": {},
              "agencyvat": 28.33,
              "totalbasic": 700.24,
              "totalextras": {
                "ownerincome": 19.5,
                "agencyincome": 43.71,
                "agencyvat": 8.74,
                "total": 71.95
              },
              "total": {
                "ownerincome": 573.6,
                "agencyincome": 161.52,
                "agencyvat": 37.07,
                "total": 772.19
              },
              "paymentrequired": "Balance",
              "authorised": "",
              "authorisedby": "",
              "ownerpayment": "",
              "dontpayowneruntil": "",
              "extras": [
                {
                  "id": 4,
                  "ownerincome": 19.5,
                  "agencyincome": 0,
                  "vatrate": {},
                  "agencyvat": 0,
                  "extra": {
                    "id": 3,
                    "extracode": "HEAT",
                    "extratype": "Booking",
                    "description": "Heating",
                    "brandings": [
                      "/v2/branding/2",
                      "/v2/branding/3",
                      "/v2/branding/4",
                      "/v2/branding/6"
                    ]
                  },
                  "bookingextra": "/v2/booking/2/extra/6"
                },
                {
                  "id": 5,
                  "ownerincome": 0,
                  "agencyincome": 21.21,
                  "vatrate": {},
                  "agencyvat": 4.24,
                  "extra": {
                    "id": 2,
                    "extracode": "CANC",
                    "extratype": "Booking",
                    "description": "Cancellation Scheme",
                    "brandings": [
                      "/v2/branding/1",
                      "/v2/branding/3",
                      "/v2/branding/4",
                      "/v2/branding/6"
                    ]
                  },
                  "bookingextra": "/v2/booking/2/extra/5"
                },
                {
                  "id": 6,
                  "ownerincome": 0,
                  "agencyincome": 22.5,
                  "vatrate": {},
                  "agencyvat": 4.5,
                  "extra": {
                    "id": 1,
                    "extracode": "BKFE",
                    "extratype": "Booking",
                    "description": "Booking Fee",
                    "brandings": [
                      "/v2/branding/1",
                      "/v2/branding/2",
                      "/v2/branding/3",
                      "/v2/branding/4",
                      "/v2/branding/6"
                    ]
                  },
                  "bookingextra": "/v2/booking/2/extra/4"
                }
              ],
              "authorisations": [],
              "created": "",
              "createdby": "",
              "reason": ""
            },
            {
              "id": 12,
              "type": "OwnerCharge",
              "owner": "/v2/owner/16",
              "ownername": "Stamp, Ian (Mr)",
              "ownercharge": "/v2/owner/16/charge/1",
              "ownerchargetype": "OwnerChargeBooking",
              "bookingbrand": "/v2/bookingbrand/3",
              "fromdate": "2016-10-26",
              "todate": "2016-10-26",
              "description": "Fee: ADM Administration Charge Blah blah money money",
              "ownerincome": -58.46,
              "agencyincome": 49.23,
              "vatrate": {},
              "agencyvat": 9.23,
              "total": {
                "ownerincome": -58.46,
                "agencyincome": 49.23,
                "agencyvat": 9.23
              },
              "authorised": "",
              "authorisedby": "",
              "ownerpayment": "",
              "authorisations": []
            },
            {
              "id": 13,
              "type": "OwnerCharge",
              "owner": "/v2/owner/16",
              "ownername": "Stamp, Ian (Mr)",
              "ownercharge": "/v2/owner/16/charge/2",
              "ownerchargetype": "OwnerChargeBooking",
              "bookingbrand": "/v2/bookingbrand/4",
              "fromdate": "2016-10-30",
              "todate": "2016-10-30",
              "description": "Fee: ADM Administration Charge Cleaning",
              "ownerincome": -17.74,
              "agencyincome": 14.75,
              "vatrate": {},
              "agencyvat": 2.99,
              "total": {
                "ownerincome": -17.74,
                "agencyincome": 14.75,
                "agencyvat": 2.99
              },
              "authorised": "",
              "authorisedby": "",
              "ownerpayment": "",
              "authorisations": []
            },
            {
              "id": 15,
              "type": "OwnerCharge",
              "owner": "/v2/owner/16",
              "ownername": "Stamp, Ian (Mr)",
              "ownercharge": "/v2/owner/16/charge/4",
              "ownerchargetype": "OwnerChargeProperty",
              "bookingbrand": "/v2/bookingbrand/4",
              "fromdate": "2016-10-26",
              "todate": "2016-10-26",
              "description": "Fee: ADM Administration Charge Blah blah money money",
              "ownerincome": -45,
              "agencyincome": 37.5,
              "vatrate": {},
              "agencyvat": 7.5,
              "total": {
                "ownerincome": -45,
                "agencyincome": 37.5,
                "agencyvat": 7.5
              },
              "authorised": "",
              "authorisedby": "",
              "ownerpayment": "",
              "authorisations": []
            },
            {
              "id": 16,
              "type": "OwnerCharge",
              "owner": "/v2/owner/16",
              "ownername": "Stamp, Ian (Mr)",
              "ownercharge": "/v2/owner/16/charge/5",
              "ownerchargetype": "OwnerChargeWorkOrder",
              "bookingbrand": "/v2/bookingbrand/3",
              "fromdate": "2016-10-20",
              "todate": "2016-10-20",
              "description": "Fee: ADM Administration Charge Blah blah money money",
              "ownerincome": -23.33,
              "agencyincome": 19.44,
              "vatrate": {},
              "agencyvat": 3.89,
              "total": {
                "ownerincome": -23.33,
                "agencyincome": 19.44,
                "agencyvat": 3.89
              },
              "authorised": "",
              "authorisedby": "",
              "ownerpayment": "",
              "authorisations": []
            }
          ]

### Add a new OwnerPaymentItem [POST]

+ Response 501

## Owner PaymentItem Detail [/v2/owner/{id}/paymentitem/{id2}]

+ Parameters

    + id (required, integer, `16`) ... The id of the Owner
    + id2 (required, integer, `5`) ... The id of the PaymentItem

### Gets the details of a Owner PaymentItem [GET]

+ Response 200 (application/json)

        {
            "id": 5,
            "type": "Booking",
            "owner": "/v2/owner/16",
            "ownername": "Stamp, Ian (Mr)",
            "booking": "/v2/booking/2",
            "bookingbrand": "/v2/bookingbrand/3",
            "fromdate": "2017-04-13",
            "todate": "2017-04-13",
            "description": "Booking: July 16th 2016, Angler Cottage",
            "totalprice": 1146.5,
            "ownerincome": 554.1,
            "agencyincome": 117.81,
            "vatrate": {},
            "agencyvat": 28.33,
            "totalbasic": 700.24,
            "totalextras": {
              "ownerincome": 19.5,
              "agencyincome": 43.71,
              "agencyvat": 8.74,
              "total": 71.95
            },
            "total": {
              "ownerincome": 573.6,
              "agencyincome": 161.52,
              "agencyvat": 37.07,
              "total": 772.19
            },
            "paymentrequired": "Balance",
            "authorised": "",
            "authorisedby": "",
            "ownerpayment": "",
            "dontpayowneruntil": "",
            "extras": [
              {
                "id": 4,
                "ownerincome": 19.5,
                "agencyincome": 0,
                "vatrate": {},
                "agencyvat": 0,
                "extra": {
                  "id": 3,
                  "extracode": "HEAT",
                  "extratype": "Booking",
                  "description": "Heating",
                  "brandings": [
                    "/v2/branding/2",
                    "/v2/branding/3",
                    "/v2/branding/4",
                    "/v2/branding/6"
                  ]
                },
                "bookingextra": "/v2/booking/2/extra/6"
              },
              {
                "id": 5,
                "ownerincome": 0,
                "agencyincome": 21.21,
                "vatrate": {},
                "agencyvat": 4.24,
                "extra": {
                  "id": 2,
                  "extracode": "CANC",
                  "extratype": "Booking",
                  "description": "Cancellation Scheme",
                  "brandings": [
                    "/v2/branding/1",
                    "/v2/branding/3",
                    "/v2/branding/4",
                    "/v2/branding/6"
                  ]
                },
                "bookingextra": "/v2/booking/2/extra/5"
              },
              {
                "id": 6,
                "ownerincome": 0,
                "agencyincome": 22.5,
                "vatrate": {},
                "agencyvat": 4.5,
                "extra": {
                  "id": 1,
                  "extracode": "BKFE",
                  "extratype": "Booking",
                  "description": "Booking Fee",
                  "brandings": [
                    "/v2/branding/1",
                    "/v2/branding/2",
                    "/v2/branding/3",
                    "/v2/branding/4",
                    "/v2/branding/6"
                  ]
                },
                "bookingextra": "/v2/booking/2/extra/4"
              }
            ],
            "authorisations": [],
            "created": "",
            "createdby": "",
            "reason": ""
          }

### Update a Owner PaymentItem [PUT]

+ Response 501

### Deletes a Owner PaymentItem [DELETE]

+ Response 501




## OwnerPaymentType Index [/v2/ownerpaymenttype]
### Retrieve a list of owner payment types. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "ownerpaymenttype": "BACS"
            },
            {
                "id": 2,
                "ownerpaymenttype": "Cheque"
            }
        ]

### Add a new OwnerPaymentType [POST]
The following fields should be provided in the POST array

+ Response 501

## OwnerPaymentType Detail [/v2/ownerpaymenttype/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the OwnerPaymentType to get

### Gets the details of a OwnerPaymentType [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "ownerpaymenttype": "Cheque"
        }

### Update a OwnerPaymentType [PUT]

+ Response 501

### Deletes a OwnerPaymentType [DELETE]

+ Response 501



## PaymentItem Index [/v2/ownerpaymentselection/{id}/item]
Postman: ownerpaymentselection/1/item

+ Parameters

    + id (required, integer, `1`) ... The id of the ownerpaymentselection

### Retrieve a list of owner payment selection payment items. [GET]

+ Response 200 (application/json)

        [
            {
              "id": 3,
              "type": "Booking",
              "owner": "/v2/owner/16",
              "ownername": "Stamp, Ian (Mr)",
              "booking": "/v2/booking/1",
              "bookingbrand": "/v2/bookingbrand/3",
              "fromdate": "2014-01-04",
              "todate": "2014-01-04",
              "description": "Booking: October 1st 2026, Angler Cottage",
              "totalprice": 310.75,
              "ownerincome": 189.21,
              "agencyincome": 36.58,
              "vatrate": {},
              "agencyvat": 7.32,
              "totalbasic": 233.11,
              "totalextras": {
                "ownerincome": 9.75,
                "agencyincome": 47.62,
                "agencyvat": 9.52,
                "total": 66.89
              },
              "total": {
                "ownerincome": 198.96,
                "agencyincome": 84.2,
                "agencyvat": 16.84,
                "total": 300
              },
              "paymentrequired": "",
              "authorised": "",
              "authorisedby": "",
              "ownerpayment": "",
              "dontpayowneruntil": "",
              "extras": [
                {
                  "id": 1,
                  "ownerincome": 9.75,
                  "agencyincome": 0,
                  "vatrate": {},
                  "agencyvat": 0,
                  "extra": {
                    "id": 3,
                    "extracode": "HEAT",
                    "extratype": "Booking",
                    "description": "Heating",
                    "brandings": [
                      "/v2/branding/2",
                      "/v2/branding/3",
                      "/v2/branding/4",
                      "/v2/branding/6"
                    ]
                  },
                  "bookingextra": "/v2/booking/1/extra/3"
                },
                {
                  "id": 2,
                  "ownerincome": 0,
                  "agencyincome": 22.5,
                  "vatrate": {},
                  "agencyvat": 4.5,
                  "extra": {
                    "id": 1,
                    "extracode": "BKFE",
                    "extratype": "Booking",
                    "description": "Booking Fee",
                    "brandings": [
                      "/v2/branding/1",
                      "/v2/branding/2",
                      "/v2/branding/3",
                      "/v2/branding/4",
                      "/v2/branding/6"
                    ]
                  },
                  "bookingextra": "/v2/booking/1/extra/1"
                },
                {
                  "id": 3,
                  "ownerincome": 0,
                  "agencyincome": 25.12,
                  "vatrate": {},
                  "agencyvat": 5.02,
                  "extra": {
                    "id": 2,
                    "extracode": "CANC",
                    "extratype": "Booking",
                    "description": "Cancellation Scheme",
                    "brandings": [
                      "/v2/branding/1",
                      "/v2/branding/3",
                      "/v2/branding/4",
                      "/v2/branding/6"
                    ]
                  },
                  "bookingextra": "/v2/booking/1/extra/2"
                }
              ],
              "authorisations": [],
              "created": "",
              "createdby": "",
              "reason": "",
              "authorisation": []
            },
            {
              "id": 16,
              "type": "OwnerCharge",
              "owner": "/v2/owner/16",
              "ownername": "Stamp, Ian (Mr)",
              "ownercharge": "/v2/owner/16/charge/5",
              "ownerchargetype": "OwnerChargeWorkOrder",
              "bookingbrand": "/v2/bookingbrand/3",
              "fromdate": "2016-10-20",
              "todate": "2016-10-20",
              "description": "Fee: ADM Administration Charge Blah blah money money",
              "ownerincome": -23.33,
              "agencyincome": 19.44,
              "vatrate": {},
              "agencyvat": 3.89,
              "total": {
                "ownerincome": -23.33,
                "agencyincome": 19.44,
                "agencyvat": 3.89
              },
              "authorised": "",
              "authorisedby": "",
              "ownerpayment": "",
              "authorisations": [],
              "authorisation": []
            }
          ]

### Add a new PaymentItem [POST]

+ Response 501

## PaymentItem Detail [/v2/ownerpaymentselection/{id}/item/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the OwnerPaymentSelection
    + id2 (required, integer, `16`) ... The id of the PaymentItem

### Gets the details of a PaymentItem [GET]

+ Response 200 (application/json)

        {
            "id": 16,
            "type": "OwnerCharge",
            "owner": "/v2/owner/16",
            "ownername": "Stamp, Ian (Mr)",
            "ownercharge": "/v2/owner/16/charge/5",
            "ownerchargetype": "OwnerChargeWorkOrder",
            "bookingbrand": "/v2/bookingbrand/3",
            "fromdate": "2016-10-20",
            "todate": "2016-10-20",
            "description": "Fee: ADM Administration Charge Blah blah money money",
            "ownerincome": -23.33,
            "agencyincome": 19.44,
            "vatrate": {},
            "agencyvat": 3.89,
            "total": {
              "ownerincome": -23.33,
              "agencyincome": 19.44,
              "agencyvat": 3.89
            },
            "authorised": "",
            "authorisedby": "",
            "ownerpayment": "",
            "authorisations": [],
            "authorisation": []
          }

### Update a PaymentItem [PUT]

+ Request (application/x-www-form-urlencoded)

        authorised=true
        authorisedbytabsuserid=24 (required even if unauthorising, i.e. when authorised=false)
        dontpayowneruntildate=2099-01-01 (or 2000-01-01 to release)

+ Response 204

### Deletes a PaymentItem [DELETE]

+ Response 501




# Group Postcode

## Postcode Index [/v2/postcode/{postcode}]

+ Parameters

    + postcode (required, string, `SW1A 1AA`) ... The postcode to lookup

### Look up a postcode [GET]

+ Response 200 (application/json)

        [
            {
                "id": null,
                "line1": "Buckingham Palace",
                "line2": "",
                "line3": "",
                "town": "London",
                "county": "Greater London",
                "postcode": "SW1A 1AA",
                "country": {
                    "alpha2": "GB",
                    "alpha3": "GBR",
                    "name": "United Kingdom"
                },
                "longitude": -0.142881,
                "latitude": 51.500571,
                "geohash": "gcpuuxruwdk0"
            }
        ]

## Postcode Lookup with house [/v2/postcode/{postcode}/{house}]

+ Parameters

    + postcode (required, string, `NR104JJ`) ... The postcode to lookup
    + house (string, `Bank`) ... The house number or name to filter the results on

### Look up a postcode [GET]

+ Response 200 (application/json)

        [
            {
                "id": null,
                "line1": "Bank House",
                "line2": "Market Place",
                "line3": "",
                "town": "Reepham",
                "county": "Norfolk",
                "postcode": "NR104JJ",
                "country": {
                    "alpha2": "GB",
                    "alpha3": "GBR",
                    "name": "United Kingdom"
                },
                "longitude": 1.109534,
                "latitude": 52.76197,
                "geohash": "u12u1jpby00d"
            }
        ]



# Group Pricing

## PriceType [/v2/copypricing]
A Price Type is defined by a number of periods (days, weeks etc) and whether they are additional to a basic period defined by the PricingPeriod
### Retrieve a list of Price Types. [GET]

+ Response 501

### Copy Pricing between properties and/or brandings and/or dates [POST]

The following fields should be provided in the POST array

* ```type``` The type of copy: Property, Branding or PropertyBranding
* ```fromid``` The id of the Property, Branding or PropertyBranding to copy prices from
* ```toid```  The id of the Property, Branding or PropertyBranding to copy prices to (optional, default=fromid)
* ```fromdate```The start date of the period to select prices to copy (will select any prices which overlap the period) (optional unless fromid=toid, default=today)
* ```todate``` The end date of the period (optional unless fromid=toid, default 2100-01-01)
* ```datemodifier``` The period to use to modify the dates, e.g. '1 year' (optional, unless fromid=toid, default='')
* ```sameweekday``` Whether to adjust the dates to keep the weekday the same after modification (optional, default=true)
* ```copyminimums``` Whether to copy Minimum Prices (optional, default=false)
* ```copyoverrides``` Whether to copy Override Prices (optional, default=false)
* ```copypartysizeprices``` Whether to copy Party Size Prices (optional, default=false)
* ```copytopartysizeprices``` Whether to copy Prices to Party Size Prices. Cannot be true if copypartysizeprices=true (optional, default=false)
* ```partysizepricingid``` Id of the PartySizePricing to use (optional, only valid when copytopartysizeprices=true, and no partysizepricing_ fields are specified)
The following six fields are only referenced if copytopartysizeprices=true and partysizepricingid is not specified.
* ```partysizepricing_description``` Description of the new Party-Size Pricing, e.g. "10% off for 4-6 people"
* ```partysizepricing_partysizefrom``` The minimum party size the price applies to
* ```partysizepricing_partysizeto``` The maximum party size the price applies to
* ```partysizepricing_partysizepricetype``` The type of Party Size Price: Fixed, Amount or Percentage (optional, default=Fixed)
* ```partysizeprice_useasbase``` Whether the Party Size Price should be used to caluclate prices for other price types (optional, default=true)
* ```partysizeprice_decimalplaces``` The number of decimal places to calculate percentages to (optional, default=2, only used when partysizepricing_partysizepricetype=Percentage)
Note: where copytopartysizeprices=true, the three fields below would usuaually be <= zero, as party-size prices are LOWER than prices
* ```incrementamount1``` The amount to increment prices before applying a % (optional, default=0)
* ```incrementpercentage``` The % to increment prices (optional, default=0)
* ```incrementamount2``` The amount to increment prices after applying a % (optional, default=0)
* ```roundtonearest``` The rounding to apply 0=none, 1=nearest £, 5=nearest £5, 10= nearest £10 (optional, default=1)

+ Response 201




## PriceType [/v2/pricetype]
A Price Type is defined by a number of periods (days, weeks etc) and whether they are additional to a basic period defined by the PricingPeriod
### Retrieve a list of Price Types. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "pricetype": "1D",
                "pricingperiod": "Week",
                "description": "1 day break",
                "periods": 1,
                "additional": false
            },
            {
                "id": 2,
                "pricetype": "2D",
                "pricingperiod": "Week",
                "description": "2 day break",
                "periods": 2,
                "additional": false
            },
            {
                "id": 3,
                "pricetype": "3D",
                "pricingperiod": "Week",
                "description": "3 day break",
                "periods": 3,
                "additional": false
            },
            {
                "id": 4,
                "pricetype": "4D",
                "pricingperiod": "Week",
                "description": "4 day break",
                "periods": 4,
                "additional": false
            },
            {
                "id": 5,
                "pricetype": "5D",
                "pricingperiod": "Week",
                "description": "5 day break",
                "periods": 5,
                "additional": false
            },
            {
                "id": 6,
                "pricetype": "6D",
                "pricingperiod": "Week",
                "description": "6 day break",
                "periods": 6,
                "additional": false
            },
            {
                "id": 7,
                "pricetype": "7D",
                "pricingperiod": "Week",
                "description": "Week",
                "periods": 7,
                "additional": false
            },
            {
                "id": 8,
                "pricetype": "1P",
                "pricingperiod": "Week",
                "description": "1 additional day",
                "periods": 1,
                "additional": true
            },
            {
                "id": 9,
                "pricetype": "2P",
                "pricingperiod": "Week",
                "description": "2 additional days",
                "periods": 2,
                "additional": true
            },
            {
                "id": 10,
                "pricetype": "3P",
                "pricingperiod": "Week",
                "description": "3 additional days",
                "periods": 3,
                "additional": true
            },
            {
                "id": 11,
                "pricetype": "4P",
                "pricingperiod": "Week",
                "description": "4 additional days",
                "periods": 4,
                "additional": true
            },
            {
                "id": 12,
                "pricetype": "5P",
                "pricingperiod": "Week",
                "description": "5 additional days",
                "periods": 5,
                "additional": true
            },
            {
                "id": 13,
                "pricetype": "6P",
                "pricingperiod": "Week",
                "description": "6 additional days",
                "periods": 6,
                "additional": true
            },
            {
                "id": 14,
                "pricetype": "SB",
                "pricingperiod": "Week",
                "description": "Short break",
                "periods": 3,
                "additional": false
            },
            {
                "id": 15,
                "pricetype": "TT",
                "pricingperiod": "Week",
                "description": "Short break",
                "periods": 3,
                "additional": false
            }
        ]

### Add a new PriceType [POST]

The following fields should be provided in the POST array

* ```pricetype``` The Price Type code, e.g. "3D"
* ```description``` A description of the period covered, e.g. "Three day break"
* ```pricingperiod``` The PricingPeriod the PriceType applies to
* ```periods``` The number of periods the price covers
* ```additional``` False where 'periods' is less than or equal to the number of periods in the PricingPeriod, and cover the whole holiday (i.e. it's a 'short' break

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/pricetype/2


## PriceType [/v2/pricetype/{id}]
### Get a specific PriceType [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the PriceType to get


+ Response 200 (application/json)

        {
            "id": 1,
            "pricetype": "1D",
            "pricingperiod": "Week",
            "description": "1 Day Break",
            "periods": 1,
            "additional": false
        }

### Updates a Prie Type for a given id [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. pricetype=4D

+ Parameters

    + id (required, integer, `1`) ... The id of the PriceType

+ Response 204

### Deletes a PriceType [DELETE]

+ Parameters

    + id (required, integer, `1`) ... The id of the PriceType

+ Response 204




## PriceType Branding Index [/v2/pricetype/{id}/branding]
pricetype/7/branding

+ Parameters

    + id (required, integer, `7`) ... The id of the PriceType

### Get all Brandings for a PriceType [GET]

+ Response 200 (application/json)

        [
                {
                  "id": 1,
                  "branding": {
                    "id": 1,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 1,
                      "code": "MAD",
                      "name": "Marsdens Devon",
                      "agency": "/v2/agency/3",
                      "defaultbookingbrand": "/v2/bookingbrand/1",
                      "website": "www.mad.co.uk",
                      "email": "info@mad.co.uk"
                    },
                    "bookingbrand": {
                      "id": 1,
                      "code": "MAD",
                      "name": "Mardens Devon",
                      "agency": "/v2/agency/3"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2025-01-01",
                  "todate": "2026-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 2,
                  "branding": {
                    "id": 2,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 2,
                      "code": "MAC",
                      "name": "Marsdens Cornwall",
                      "agency": "/v2/agency/3",
                      "defaultbookingbrand": "/v2/bookingbrand/2",
                      "website": null,
                      "email": null
                    },
                    "bookingbrand": {
                      "id": 2,
                      "code": "MAC",
                      "name": "Mardens Cornwall",
                      "agency": "/v2/agency/3"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2025-01-01",
                  "todate": "2026-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 3,
                  "branding": {
                    "id": 3,
                    "brandinggroup": {
                      "id": 2,
                      "code": "NOAA",
                      "name": "Norfolk",
                      "agency": "/v2/agency/4",
                      "workorderssettings": [
                        "/v2/brandinggroup/2/workorderssettings/1"
                      ]
                    },
                    "marketingbrand": {
                      "id": 3,
                      "code": "NOMM",
                      "name": "Norfolk Country Cottages",
                      "agency": "/v2/agency/4",
                      "defaultbookingbrand": "/v2/bookingbrand/3",
                      "website": "www.norfolk.co.uk",
                      "email": "info@norfolk.co.uk"
                    },
                    "bookingbrand": {
                      "id": 3,
                      "code": "NOBB",
                      "name": "Norfolk Country Cottages",
                      "agency": "/v2/agency/4"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31",
                    "petextrabranding": {
                      "id": 11,
                      "extra": {
                        "id": 4,
                        "extracode": "PET",
                        "extratype": "Booking",
                        "description": "Pet charge",
                        "brandings": [
                          "/v2/branding/3"
                        ]
                      }
                    }
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2025-01-01",
                  "todate": "2026-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 4,
                  "branding": {
                    "id": 4,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 4,
                      "code": "MAMM",
                      "name": "Marsdens",
                      "agency": "/v2/agency/5",
                      "defaultbookingbrand": "/v2/bookingbrand/4",
                      "website": "www.mabb.co.uk",
                      "email": "info@mabb.co.uk"
                    },
                    "bookingbrand": {
                      "id": 4,
                      "code": "MABB",
                      "name": "Marsdens Devon Cottages",
                      "agency": "/v2/agency/5"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2025-01-01",
                  "todate": "2026-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 9,
                  "branding": {
                    "id": 6,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 5,
                      "code": "CCMM",
                      "name": "Completely Cottages",
                      "agency": "/v2/agency/6",
                      "defaultbookingbrand": "/v2/bookingbrand/5",
                      "website": "www.comm.co.uk",
                      "email": "info@comm.co.uk"
                    },
                    "bookingbrand": {
                      "id": 5,
                      "code": "CCBB",
                      "name": "Completely Cottages",
                      "agency": "/v2/agency/6"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2025-01-01",
                  "todate": "2026-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 75,
                  "branding": {
                    "id": 1,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 1,
                      "code": "MAD",
                      "name": "Marsdens Devon",
                      "agency": "/v2/agency/3",
                      "defaultbookingbrand": "/v2/bookingbrand/1",
                      "website": "www.mad.co.uk",
                      "email": "info@mad.co.uk"
                    },
                    "bookingbrand": {
                      "id": 1,
                      "code": "MAD",
                      "name": "Mardens Devon",
                      "agency": "/v2/agency/3"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2027-01-01",
                  "todate": "2027-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 76,
                  "branding": {
                    "id": 2,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 2,
                      "code": "MAC",
                      "name": "Marsdens Cornwall",
                      "agency": "/v2/agency/3",
                      "defaultbookingbrand": "/v2/bookingbrand/2",
                      "website": null,
                      "email": null
                    },
                    "bookingbrand": {
                      "id": 2,
                      "code": "MAC",
                      "name": "Mardens Cornwall",
                      "agency": "/v2/agency/3"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2027-01-01",
                  "todate": "2027-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 77,
                  "branding": {
                    "id": 3,
                    "brandinggroup": {
                      "id": 2,
                      "code": "NOAA",
                      "name": "Norfolk",
                      "agency": "/v2/agency/4",
                      "workorderssettings": [
                        "/v2/brandinggroup/2/workorderssettings/1"
                      ]
                    },
                    "marketingbrand": {
                      "id": 3,
                      "code": "NOMM",
                      "name": "Norfolk Country Cottages",
                      "agency": "/v2/agency/4",
                      "defaultbookingbrand": "/v2/bookingbrand/3",
                      "website": "www.norfolk.co.uk",
                      "email": "info@norfolk.co.uk"
                    },
                    "bookingbrand": {
                      "id": 3,
                      "code": "NOBB",
                      "name": "Norfolk Country Cottages",
                      "agency": "/v2/agency/4"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31",
                    "petextrabranding": {
                      "id": 11,
                      "extra": {
                        "id": 4,
                        "extracode": "PET",
                        "extratype": "Booking",
                        "description": "Pet charge",
                        "brandings": [
                          "/v2/branding/3"
                        ]
                      }
                    }
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2027-01-01",
                  "todate": "2027-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 78,
                  "branding": {
                    "id": 4,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 4,
                      "code": "MAMM",
                      "name": "Marsdens",
                      "agency": "/v2/agency/5",
                      "defaultbookingbrand": "/v2/bookingbrand/4",
                      "website": "www.mabb.co.uk",
                      "email": "info@mabb.co.uk"
                    },
                    "bookingbrand": {
                      "id": 4,
                      "code": "MABB",
                      "name": "Marsdens Devon Cottages",
                      "agency": "/v2/agency/5"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2027-01-01",
                  "todate": "2027-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 83,
                  "branding": {
                    "id": 6,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 5,
                      "code": "CCMM",
                      "name": "Completely Cottages",
                      "agency": "/v2/agency/6",
                      "defaultbookingbrand": "/v2/bookingbrand/5",
                      "website": "www.comm.co.uk",
                      "email": "info@comm.co.uk"
                    },
                    "bookingbrand": {
                      "id": 5,
                      "code": "CCBB",
                      "name": "Completely Cottages",
                      "agency": "/v2/agency/6"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2027-01-01",
                  "todate": "2027-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 149,
                  "branding": {
                    "id": 1,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 1,
                      "code": "MAD",
                      "name": "Marsdens Devon",
                      "agency": "/v2/agency/3",
                      "defaultbookingbrand": "/v2/bookingbrand/1",
                      "website": "www.mad.co.uk",
                      "email": "info@mad.co.uk"
                    },
                    "bookingbrand": {
                      "id": 1,
                      "code": "MAD",
                      "name": "Mardens Devon",
                      "agency": "/v2/agency/3"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2013-01-01",
                  "todate": "2013-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 150,
                  "branding": {
                    "id": 2,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 2,
                      "code": "MAC",
                      "name": "Marsdens Cornwall",
                      "agency": "/v2/agency/3",
                      "defaultbookingbrand": "/v2/bookingbrand/2",
                      "website": null,
                      "email": null
                    },
                    "bookingbrand": {
                      "id": 2,
                      "code": "MAC",
                      "name": "Mardens Cornwall",
                      "agency": "/v2/agency/3"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2013-01-01",
                  "todate": "2013-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 151,
                  "branding": {
                    "id": 3,
                    "brandinggroup": {
                      "id": 2,
                      "code": "NOAA",
                      "name": "Norfolk",
                      "agency": "/v2/agency/4",
                      "workorderssettings": [
                        "/v2/brandinggroup/2/workorderssettings/1"
                      ]
                    },
                    "marketingbrand": {
                      "id": 3,
                      "code": "NOMM",
                      "name": "Norfolk Country Cottages",
                      "agency": "/v2/agency/4",
                      "defaultbookingbrand": "/v2/bookingbrand/3",
                      "website": "www.norfolk.co.uk",
                      "email": "info@norfolk.co.uk"
                    },
                    "bookingbrand": {
                      "id": 3,
                      "code": "NOBB",
                      "name": "Norfolk Country Cottages",
                      "agency": "/v2/agency/4"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31",
                    "petextrabranding": {
                      "id": 11,
                      "extra": {
                        "id": 4,
                        "extracode": "PET",
                        "extratype": "Booking",
                        "description": "Pet charge",
                        "brandings": [
                          "/v2/branding/3"
                        ]
                      }
                    }
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2013-01-01",
                  "todate": "2013-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 152,
                  "branding": {
                    "id": 4,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 4,
                      "code": "MAMM",
                      "name": "Marsdens",
                      "agency": "/v2/agency/5",
                      "defaultbookingbrand": "/v2/bookingbrand/4",
                      "website": "www.mabb.co.uk",
                      "email": "info@mabb.co.uk"
                    },
                    "bookingbrand": {
                      "id": 4,
                      "code": "MABB",
                      "name": "Marsdens Devon Cottages",
                      "agency": "/v2/agency/5"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2013-01-01",
                  "todate": "2013-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 157,
                  "branding": {
                    "id": 6,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 5,
                      "code": "CCMM",
                      "name": "Completely Cottages",
                      "agency": "/v2/agency/6",
                      "defaultbookingbrand": "/v2/bookingbrand/5",
                      "website": "www.comm.co.uk",
                      "email": "info@comm.co.uk"
                    },
                    "bookingbrand": {
                      "id": 5,
                      "code": "CCBB",
                      "name": "Completely Cottages",
                      "agency": "/v2/agency/6"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2013-01-01",
                  "todate": "2013-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 223,
                  "branding": {
                    "id": 1,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 1,
                      "code": "MAD",
                      "name": "Marsdens Devon",
                      "agency": "/v2/agency/3",
                      "defaultbookingbrand": "/v2/bookingbrand/1",
                      "website": "www.mad.co.uk",
                      "email": "info@mad.co.uk"
                    },
                    "bookingbrand": {
                      "id": 1,
                      "code": "MAD",
                      "name": "Mardens Devon",
                      "agency": "/v2/agency/3"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2016-01-01",
                  "todate": "2016-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 224,
                  "branding": {
                    "id": 2,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 2,
                      "code": "MAC",
                      "name": "Marsdens Cornwall",
                      "agency": "/v2/agency/3",
                      "defaultbookingbrand": "/v2/bookingbrand/2",
                      "website": null,
                      "email": null
                    },
                    "bookingbrand": {
                      "id": 2,
                      "code": "MAC",
                      "name": "Mardens Cornwall",
                      "agency": "/v2/agency/3"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2016-01-01",
                  "todate": "2016-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 225,
                  "branding": {
                    "id": 3,
                    "brandinggroup": {
                      "id": 2,
                      "code": "NOAA",
                      "name": "Norfolk",
                      "agency": "/v2/agency/4",
                      "workorderssettings": [
                        "/v2/brandinggroup/2/workorderssettings/1"
                      ]
                    },
                    "marketingbrand": {
                      "id": 3,
                      "code": "NOMM",
                      "name": "Norfolk Country Cottages",
                      "agency": "/v2/agency/4",
                      "defaultbookingbrand": "/v2/bookingbrand/3",
                      "website": "www.norfolk.co.uk",
                      "email": "info@norfolk.co.uk"
                    },
                    "bookingbrand": {
                      "id": 3,
                      "code": "NOBB",
                      "name": "Norfolk Country Cottages",
                      "agency": "/v2/agency/4"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31",
                    "petextrabranding": {
                      "id": 11,
                      "extra": {
                        "id": 4,
                        "extracode": "PET",
                        "extratype": "Booking",
                        "description": "Pet charge",
                        "brandings": [
                          "/v2/branding/3"
                        ]
                      }
                    }
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2016-01-01",
                  "todate": "2016-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 226,
                  "branding": {
                    "id": 4,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 4,
                      "code": "MAMM",
                      "name": "Marsdens",
                      "agency": "/v2/agency/5",
                      "defaultbookingbrand": "/v2/bookingbrand/4",
                      "website": "www.mabb.co.uk",
                      "email": "info@mabb.co.uk"
                    },
                    "bookingbrand": {
                      "id": 4,
                      "code": "MABB",
                      "name": "Marsdens Devon Cottages",
                      "agency": "/v2/agency/5"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2016-01-01",
                  "todate": "2016-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 231,
                  "branding": {
                    "id": 6,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 5,
                      "code": "CCMM",
                      "name": "Completely Cottages",
                      "agency": "/v2/agency/6",
                      "defaultbookingbrand": "/v2/bookingbrand/5",
                      "website": "www.comm.co.uk",
                      "email": "info@comm.co.uk"
                    },
                    "bookingbrand": {
                      "id": 5,
                      "code": "CCBB",
                      "name": "Completely Cottages",
                      "agency": "/v2/agency/6"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2016-01-01",
                  "todate": "2016-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 297,
                  "branding": {
                    "id": 1,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 1,
                      "code": "MAD",
                      "name": "Marsdens Devon",
                      "agency": "/v2/agency/3",
                      "defaultbookingbrand": "/v2/bookingbrand/1",
                      "website": "www.mad.co.uk",
                      "email": "info@mad.co.uk"
                    },
                    "bookingbrand": {
                      "id": 1,
                      "code": "MAD",
                      "name": "Mardens Devon",
                      "agency": "/v2/agency/3"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2024-01-01",
                  "todate": "2024-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 298,
                  "branding": {
                    "id": 2,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 2,
                      "code": "MAC",
                      "name": "Marsdens Cornwall",
                      "agency": "/v2/agency/3",
                      "defaultbookingbrand": "/v2/bookingbrand/2",
                      "website": null,
                      "email": null
                    },
                    "bookingbrand": {
                      "id": 2,
                      "code": "MAC",
                      "name": "Mardens Cornwall",
                      "agency": "/v2/agency/3"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2024-01-01",
                  "todate": "2024-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 299,
                  "branding": {
                    "id": 3,
                    "brandinggroup": {
                      "id": 2,
                      "code": "NOAA",
                      "name": "Norfolk",
                      "agency": "/v2/agency/4",
                      "workorderssettings": [
                        "/v2/brandinggroup/2/workorderssettings/1"
                      ]
                    },
                    "marketingbrand": {
                      "id": 3,
                      "code": "NOMM",
                      "name": "Norfolk Country Cottages",
                      "agency": "/v2/agency/4",
                      "defaultbookingbrand": "/v2/bookingbrand/3",
                      "website": "www.norfolk.co.uk",
                      "email": "info@norfolk.co.uk"
                    },
                    "bookingbrand": {
                      "id": 3,
                      "code": "NOBB",
                      "name": "Norfolk Country Cottages",
                      "agency": "/v2/agency/4"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31",
                    "petextrabranding": {
                      "id": 11,
                      "extra": {
                        "id": 4,
                        "extracode": "PET",
                        "extratype": "Booking",
                        "description": "Pet charge",
                        "brandings": [
                          "/v2/branding/3"
                        ]
                      }
                    }
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2024-01-01",
                  "todate": "2024-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 300,
                  "branding": {
                    "id": 4,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 4,
                      "code": "MAMM",
                      "name": "Marsdens",
                      "agency": "/v2/agency/5",
                      "defaultbookingbrand": "/v2/bookingbrand/4",
                      "website": "www.mabb.co.uk",
                      "email": "info@mabb.co.uk"
                    },
                    "bookingbrand": {
                      "id": 4,
                      "code": "MABB",
                      "name": "Marsdens Devon Cottages",
                      "agency": "/v2/agency/5"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2024-01-01",
                  "todate": "2024-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 305,
                  "branding": {
                    "id": 6,
                    "brandinggroup": {
                      "id": 1,
                      "code": "SWAA",
                      "name": "South West",
                      "agency": "/v2/agency/5",
                      "workorderssettings": []
                    },
                    "marketingbrand": {
                      "id": 5,
                      "code": "CCMM",
                      "name": "Completely Cottages",
                      "agency": "/v2/agency/6",
                      "defaultbookingbrand": "/v2/bookingbrand/5",
                      "website": "www.comm.co.uk",
                      "email": "info@comm.co.uk"
                    },
                    "bookingbrand": {
                      "id": 5,
                      "code": "CCBB",
                      "name": "Completely Cottages",
                      "agency": "/v2/agency/6"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2024-01-01",
                  "todate": "2024-12-31",
                  "type": "Fixed",
                  "decimalplaces": 2,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                },
                {
                  "id": 371,
                  "branding": {
                    "id": 3,
                    "brandinggroup": {
                      "id": 2,
                      "code": "NOAA",
                      "name": "Norfolk",
                      "agency": "/v2/agency/4",
                      "workorderssettings": [
                        "/v2/brandinggroup/2/workorderssettings/1"
                      ]
                    },
                    "marketingbrand": {
                      "id": 3,
                      "code": "NOMM",
                      "name": "Norfolk Country Cottages",
                      "agency": "/v2/agency/4",
                      "defaultbookingbrand": "/v2/bookingbrand/3",
                      "website": "www.norfolk.co.uk",
                      "email": "info@norfolk.co.uk"
                    },
                    "bookingbrand": {
                      "id": 3,
                      "code": "NOBB",
                      "name": "Norfolk Country Cottages",
                      "agency": "/v2/agency/4"
                    },
                    "lettingincomevatband": {
                      "id": 2,
                      "vatband": "Standard"
                    },
                    "bacsbankaccount": "",
                    "bacsoutputtype": null,
                    "bacssettings": null,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31",
                    "petextrabranding": {
                      "id": 11,
                      "extra": {
                        "id": 4,
                        "extracode": "PET",
                        "extratype": "Booking",
                        "description": "Pet charge",
                        "brandings": [
                          "/v2/branding/3"
                        ]
                      }
                    }
                  },
                  "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                  },
                  "fromdate": "2017-01-01",
                  "todate": "2018-01-15",
                  "type": "Fixed",
                  "decimalplaces": 0,
                  "startdays": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ]
                }
              ]

### Add a new Branding to a PriceType [POST]

The following fields should be provided in the POST array

* ```brandingid``` The id of the Branding
* ```saleschannelid``` The id of the Sales Channel
* ```fromdate``` The date the Branding applies from
* ```todate``` The date the Branding applies to
* ```type``` The type: Fixed (if the Price Type's prices will be defined amounts) or Percentage (if the prices will be calculated as a percentage of a 'Fixed' type)
* ```percentage``` For type=Percentage only, the percentage to apply to the Fixed price
* ```pricetypebrandingfixedid``` or type=Percentage only, the id of the PriceTypeBrandingFixed the percentage applies to

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/pricetype/1/branding/2

## PriceType Branding Detail [/v2/pricetype/{id}/branding/{eid}]
+ Parameters

    + id (required, integer, `7`) ... The id of the PriceType
    + eid (required, integer, `1`) ... The id of the PriceTypeBranding to get

### Gets the details of a PriceType Branding [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "branding": {
              "id": 1,
              "brandinggroup": {
                "id": 1,
                "code": "SWAA",
                "name": "South West",
                "agency": "/v2/agency/5",
                "workorderssettings": []
              },
              "marketingbrand": {
                "id": 1,
                "code": "MAD",
                "name": "Marsdens Devon",
                "agency": "/v2/agency/3",
                "defaultbookingbrand": "/v2/bookingbrand/1",
                "website": "www.mad.co.uk",
                "email": "info@mad.co.uk"
              },
              "bookingbrand": {
                "id": 1,
                "code": "MAD",
                "name": "Mardens Devon",
                "agency": "/v2/agency/3"
              },
              "lettingincomevatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "bacsbankaccount": "",
              "bacsoutputtype": null,
              "bacssettings": null,
              "allowbookingonwebuntil": "2099-12-31",
              "showpricingonwebuntil": "2099-12-31"
            },
            "saleschannel": {
              "id": 2,
              "saleschannel": "Brand Website",
              "description": "Sales made via a brand website, e.g. Suffolk Secrets"
            },
            "fromdate": "2025-01-01",
            "todate": "2026-12-31",
            "type": "Fixed",
            "decimalplaces": 2,
            "startdays": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10
            ]
          }

### Update a PriceType's Branding [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. percentage=85

+ Response 404

### Deletes a PriceType's Branding [DELETE]

+ Response 204




## Price Type Start Day Index [/v2/pricetype/{id}/branding/{id2}/startday]
+ Parameters

    + id (required, integer, `7`) ... The id of the PriceType
    + id2 (required, integer, `1`) ... The id of the PriceTypeBranding

### Get all Start Days for a PriceType Branding [GET]
+ Response 200 (application/json)

        [
            {
                "id": 1,
                "dayssincepriceanchor": 1
            },
            {
                "id": 2,
                "dayssincepriceanchor": 2
            },
            {
                "id": 3,
                "dayssincepriceanchor": 3
            },
            {
                "id": 4,
                "dayssincepriceanchor": 4
            },
            {
                "id": 5,
                "dayssincepriceanchor": 5
            },
            {
                "id": 6,
                "dayssincepriceanchor": 6
            },
            {
                "id": 7,
                "dayssincepriceanchor": 7
            },
            {
                "id": 8,
                "dayssincepriceanchor": 8
            },
            {
                "id": 9,
                "dayssincepriceanchor": 9
            },
            {
                "id": 10,
                "dayssincepriceanchor": 10
            }
        ]

### Add a new Start Day to a PriceType Branding [POST]

The following fields should be provided in the POST array

* ```dayssincepriceanchor``` Number of days since the last Price Anchor (defined in the Change Day Rules)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/pricetype/1/branding/1/startday

## Price Type Start Day Detail [/v2/pricetype/{id}/branding/{id2}/startday/{id3}]

+ Parameters

    + id (required, integer, `7`) ... The id of the PriceType
    + id2 (required, integer, `1`) ... The id of the PriceTypeBranding
    + id3 (required, integer, `5`) ... The id of the PriceTypeStartDay to get

### Gets the details of a Price Type Start Day [GET]
+ Response 200 (application/json)

        {
            "id": 5,
            "dayssincepriceanchor": 5
        }

### Update a Price Type Start Day [PUT]
Not implemented

+ Response 501

### Deletes a Price Type Start Day [DELETE]

+ Response 204



## PricingMethod [/v2/pricingmethod]
Holidays are priced using one of (potentially) many alternative Pricing Methods, e.g. weekly, daily etc.
### Retrieve a list of Pricing Methods. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "pricingmethod": "Default",
                "description": "Tabs New Pricing"
            }
        ]

### Add a new PricingMethod [POST]

The following fields should be provided in the POST array

* ```pricingmethod``` The short name of the Pricing Method being added
* ```description``` A description of the Pricing Method

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/pricingmethod/2


## PricingMethod [/v2/pricingmethod/{id}]
### Get a specific PricingMethod [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the PricingMethod to get


+ Response 200 (application/json)

        {
            "id": 1,
            "pricingmethod": "Default",
            "description": "Tabs New Pricing"
        }

### Updates a Pricing Method for a given id [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

* ```pricingmethod``` The short name of the Pricing Method being added
* ```description``` A description of the Pricing Method

+ Parameters

    + id (required, integer, `1`) ... The id of the PricingMethod

+ Response 204

### Deletes a PricingMethod [DELETE]

+ Parameters

    + id (required, integer, `1`) ... The id of the PricingMethod

+ Response 204



## PricingMethod Branding Index [/v2/pricingmethod/{id}/branding]
### Get all Brandings for a PricingMethod [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the PricingMethod

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "branding": {
                    "id": 1,
                    "brandinggroup": {
                        "id": 1,
                        "code": "SWAA",
                        "name": "South West",
                        "agency": "/v2/agency/3"
                    },
                    "marketingbrand": {
                        "id": 1,
                        "code": "MAD",
                        "name": "Marsdens Devon",
                        "agency": "/v2/agency/1",
                        "defaultbookingbrand": "/v2/bookingbrand/1",
                        "website": null,
                        "email": null
                    },
                    "bookingbrand": {
                        "id": 1,
                        "code": "MAD",
                        "name": "Mardens Devon",
                        "agency": "/v2/agency/1"
                    }
                },
                "fromdate": "2015-01-01",
                "todate": "2016-12-31"
            },
            {
                "id": 2,
                "branding": {
                    "id": 3,
                    "brandinggroup": {
                        "id": 2,
                        "code": "NOAA",
                        "name": "Norfolk",
                        "agency": "/v2/agency/2"
                    },
                    "marketingbrand": {
                        "id": 3,
                        "code": "NOMM",
                        "name": "Norfolk Country Cottages",
                        "agency": "/v2/agency/2",
                        "defaultbookingbrand": "/v2/bookingbrand/3",
                        "website": null,
                        "email": null
                    },
                    "bookingbrand": {
                        "id": 3,
                        "code": "NOBB",
                        "name": "Norfolk Country Cottages",
                        "agency": "/v2/agency/2"
                    }
                },
                "fromdate": "2017-01-01",
                "todate": "2100-01-01"
            }
        ]

### Add a new Branding to a PricingMethod [POST]

The following fields should be provided in the POST array

* ```brandingid``` The Id of the Branding
* ```fromdate``` The date the Branding applies from
* ```todate``` The date the Branding applies to

+ Parameters

    + id (required, integer, `1`) ... The id of the PricingMethod

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/pricingmethod/1/branding/2

## PricingMethod Branding Detail [/v2/pricingmethod/{id}/branding/{eid}]
### Gets the details of a PricingMethod Branding [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the PricingMethod
    + eid (required, integer, `2`) ... The id of the PricingMethodBranding to get

+ Response 200 (application/json)

        {
            "id": 2,
            "branding": {
                "id": 3,
                "brandinggroup": {
                    "id": 2,
                    "code": "NOAA",
                    "name": "Norfolk",
                    "agency": "/v2/agency/2"
                },
                "marketingbrand": {
                    "id": 3,
                    "code": "NOMM",
                    "name": "Norfolk Country Cottages",
                    "agency": "/v2/agency/2",
                    "defaultbookingbrand": "/v2/bookingbrand/3",
                    "website": null,
                    "email": null
                },
                "bookingbrand": {
                    "id": 3,
                    "code": "NOBB",
                    "name": "Norfolk Country Cottages",
                    "agency": "/v2/agency/2"
                }
            },
            "fromdate": "2017-01-01",
            "todate": "2100-01-01"
        }

### Update a PricingMethod's Branding [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the PricingMethod
    + eid (required, integer, `1`) ... The id of the PricingMethodBranding to update

+ Response 404

### Deletes a PricingMethod's Branding [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the PricingMethod
    + eid (required, integer, `1`) ... The id of the PricingMethodBranding to delete

+ Response 204




## PricingPeriod [/v2/pricingperiod]
A Pricing Period is the basic unit used for pricing a holiday, usually Week, but can be Day, FourWeeks or Month
### Retrieve a list of Pricing Methods. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "pricingperiod": "Day",
                "days": 1,
                "weeks": 0,
                "months": 0,
                "subperiod": "Day"
            },
            {
                "id": 2,
                "pricingperiod": "Week",
                "days": 0,
                "weeks": 1,
                "months": 0,
                "subperiod": "Day"
            },
            {
                "id": 3,
                "pricingperiod": "Four Weeks",
                "days": 0,
                "weeks": 4,
                "months": 0,
                "subperiod": "Week"
            },
            {
                "id": 4,
                "pricingperiod": "Month",
                "days": 0,
                "weeks": 0,
                "months": 1,
                "subperiod": "Day"
            }
        ]

### Add a new PricingPeriod [POST]

The following fields should be provided in the POST array

* ```pricingperiod``` The Pricing Period, e.g. "Week"

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/pricingperiod/2


## PricingPeriod [/v2/pricingperiod/{id}]
### Get a specific PricingPeriod [GET]
+ Parameters

    + id (required, integer, `2`) ... The id of the PricingPeriod to get


+ Response 200 (application/json)

        {
            "id": 2,
            "pricingperiod": "Week",
            "days": 0,
            "weeks": 1,
            "months": 0,
            "subperiod": "Day"
        }

### Updates a Pricing Method for a given id [PUT]
Not implemented
+ Parameters

    + id (required, integer, `1`) ... The id of the PricingPeriod

+ Response 501

### Deletes a PricingPeriod [DELETE]

+ Parameters

    + id (required, integer, `1`) ... The id of the PricingPeriod

+ Response 204




## SalesChannel [/v2/saleschannel]
A Sales Channel is a route to market, e.g. direct sale, web, affiliate, reseller
### Retrieve a list of Sales Channels. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "saleschannel": "Brand Website",
                "description": "Sales made via a brand website, e.g. Suffolk Secrets"
            },
            {
                "id": 2,
                "saleschannel": "Group Website",
                "description": "Sales made via a group website, e.g. Original Cottages"
            },
            {
                "id": 3,
                "saleschannel": "Direct",
                "description": "Phone or postal sales"
            }
        ]

### Add a new SalesChannel [POST]

The following fields should be provided in the POST array

* ```saleschannel``` The short name of the Sales Channel being added
* ```description``` A description of the Sales Channel

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/saleschannel/2


## SalesChannel [/v2/saleschannel/{id}]
### Get a specific SalesChannel [GET]
+ Parameters

    + id (required, integer, `2`) ... The id of the SalesChannel to get


+ Response 200 (application/json)

        {
            "id": 2,
            "saleschannel": "Group Website",
            "description": "Sales made via a group website, e.g. Original Cottages"
        }

### Updates a Sales Channel for a given id [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

* ```saleschannel``` The short name of the Sales Channel being added
* ```description``` A description of the Sales Channel

+ Parameters

    + id (required, integer, `1`) ... The id of the SalesChannel

+ Response 204

### Deletes a SalesChannel [DELETE]

+ Parameters

    + id (required, integer, `1`) ... The id of the SalesChannel

+ Response 204




# Group Property
A property is a cottage or other accommodation which is available for rent

## Property List [/v2/property{?page,limit,filter}]
property?page=1&limit=10&filter=town=horning

### Return a list of properties [GET]

+ Parameters

    + page (optional, integer, `1`) ... The page of results to return
    + limit (optional, integer, `10`) ... The number of results to return
    + filter (optional, string, `town=horning`) ... One or more key/value pairs, separated by ':', used to filter the Properties

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 1,
            "page": 1,
            "count": 1,
            "limit": 10,
            "time": 0,
            "orderBy": null,
            "filter": "town=horning",
            "previous": null,
            "next": null,
            "elements": [
                {
                    "id": 2,
                    "type": "property",
                    "tabspropref": "1212",
                    "name": "Reedmere",
                    "namequalifier": "Horning",
                    "status": {
                        "id": 1,
                        "name": "Live",
                        "allowbooking": true,
                        "allowoverride": false,
                        "priority": 10,
                        "allowbalance": true
                    },
                    "address": {
                        "id": 59,
                        "line1": "New Street",
                        "line2": "",
                        "line3": "",
                        "town": "Horning",
                        "county": "Norfolk",
                        "postcode": "NR12 8AA",
                        "country": {
                            "alpha2": "GB",
                            "alpha3": "GBR",
                            "name": "United Kingdom"
                        },
                        "longitude": "1.466114",
                        "latitude": "52.705827",
                        "geohash": "u135c6g9dymb"
                    },
                    "sleeps": 4,
                    "bedrooms": 2,
                    "accomodationdescription": "1 twin 1 double bunk",
                    "maximumpets": 3,
                    "telephonenumber": "01234 808080",
                    "checkinearliesttime": "10:40",
                    "checkinlatesttime": "16:45",
                    "checkintext": "",
                    "checkouttime": "11:20",
                    "checkouttext": "",
                    "office": {
                        "office": "/v2/office/49",
                        "name": "Brighton"
                    },
                    "brandings": [
                        {
                            "id": 2,
                            "branding": "/v2/branding/4",
                            "primarybranding": true,
                            "brandinggroup": "/v2/brandinggroup/1",
                            "bookingbrand": "/v2/property/2/bookingbrand/2",
                            "primarybookingbrand": true,
                            "marketingbrand": "/v2/property/2/marketingbrand/2",
                            "status": {
                                "id": 1,
                                "name": "Live",
                                "allowbooking": true,
                                "allowoverride": false,
                                "priority": 10,
                                "allowbalance": true
                            },
                            "statusreason": "",
                            "promote": false,
                            "allowbookingonwebuntil": "2099-12-31",
                            "showpricingonwebuntil": "2099-12-31"
                        },
                        {
                            "id": 3,
                            "branding": "/v2/branding/6",
                            "primarybranding": false,
                            "brandinggroup": "/v2/brandinggroup/1",
                            "bookingbrand": "/v2/property/2/bookingbrand/3",
                            "primarybookingbrand": false,
                            "marketingbrand": "/v2/property/2/marketingbrand/3",
                            "status": {
                                "id": 1,
                                "name": "Live",
                                "allowbooking": true,
                                "allowoverride": false,
                                "priority": 10,
                                "allowbalance": true
                            },
                            "statusreason": "",
                            "promote": false,
                            "allowbookingonwebuntil": "2099-12-31",
                            "showpricingonwebuntil": "2099-12-31"
                        },
                        {
                            "id": 4,
                            "branding": "/v2/branding/7",
                            "primarybranding": false,
                            "brandinggroup": "/v2/brandinggroup/1",
                            "bookingbrand": "/v2/property/2/bookingbrand/4",
                            "primarybookingbrand": false,
                            "marketingbrand": "/v2/property/2/marketingbrand/4",
                            "status": {
                                "id": 1,
                                "name": "Live",
                                "allowbooking": true,
                                "allowoverride": false,
                                "priority": 10,
                                "allowbalance": true
                            },
                            "statusreason": "",
                            "promote": false,
                            "allowbookingonwebuntil": "2099-12-31",
                            "showpricingonwebuntil": "2099-12-31"
                        }
                    ],
                    "rating": 0,
                    "ratinginspectiontype": {
                        "id": 2,
                        "inspectiontype": "VisitWales",
                        "schedule": "6 months",
                        "gradingunit": "Star",
                        "defaultgrading": ""
                    },
                    "primarypropertybranding": {
                        "id": 2,
                        "branding": "/v2/branding/4",
                        "primarybranding": true,
                        "brandinggroup": "/v2/brandinggroup/1",
                        "bookingbrand": "/v2/property/2/bookingbrand/2",
                        "primarybookingbrand": true,
                        "marketingbrand": "/v2/property/2/marketingbrand/2",
                        "status": {
                            "id": 1,
                            "name": "Live",
                            "allowbooking": true,
                            "allowoverride": false,
                            "priority": 10,
                            "allowbalance": true
                        },
                        "statusreason": "",
                        "promote": false,
                        "allowbookingonwebuntil": "2099-12-31",
                        "showpricingonwebuntil": "2099-12-31"
                    },
                    "houskeeping": {
                        "nextchangedate": null,
                        "bookings": [],
                        "suppliers": [
                            {
                                "activity": "Cleaning",
                                "actor": "/v2/supplier/14",
                                "fromdate": "2013-10-01",
                                "todate": "2100-01-01",
                                "services": [
                                    {
                                        "name": "Cleaning",
                                        "fromdate": "2015-04-23",
                                        "todate": "2017-07-01"
                                    }
                                ]
                            },
                            {
                                "activity": "Keyholder",
                                "actor": "/v2/supplier/14",
                                "fromdate": "2013-10-01",
                                "todate": "2100-01-01",
                                "services": []
                            }
                        ]
                    },
                    "documents": [
                        {
                            "id": 8,
                            "created": "2017-05-15 15:29:48",
                            "image": {
                                "id": 5,
                                "name": "abc.jpg",
                                "filename": "abc.jpg",
                                "timeadded": "2014-01-01 12:00:00",
                                "weight": 0,
                                "private": false,
                                "description": "Here is another placeholder image",
                                "mimetype": {
                                    "id": 2,
                                    "name": "image/jpeg",
                                    "shortname": "jpg"
                                },
                                "file": "/v2/file/5",
                                "height": 360,
                                "width": 480,
                                "alt": "The empire state building"
                            }
                        },
                        {
                            "id": 9,
                            "created": "2017-05-15 15:29:48",
                            "image": {
                                "id": 4,
                                "name": "placeholder.jpg",
                                "filename": "placeholder.jpg",
                                "timeadded": "2014-01-01 12:00:00",
                                "weight": 0,
                                "private": false,
                                "description": "Here is a placeholder image",
                                "mimetype": {
                                    "id": 2,
                                    "name": "image/jpeg",
                                    "shortname": "jpg"
                                },
                                "file": "/v2/file/4",
                                "height": 300,
                                "width": 200,
                                "alt": "An image"
                            }
                        }
                    ],
                    "updated": "2017-05-15 15:29:48"
                }
            ]
        }

## Property Index [/v2/property]
### Displays a list fields than can be used to filter properties [OPTIONS]

+ Response 200

        {
            "name": "Property name",
            "tabspropref": "Tabs Property Reference",
            "sleeps": "Maximum occupancy",
            "bedrooms": "Number of Bedrooms",
            "town": "Town",
            "county": "County",
            "postcode": "Postcode",
            "country": "Country (Alpha2)"
        }

### Add a new Property [POST]
The following fields should be provided in the POST array

* ```name``` The title of the property
* ```sleeps``` The maximum number of people the property can accommodate
* ```bedrooms``` The number of bedrooms the property has
* ```accomodationdescription``` A description of the number of rooms and the arrangement of beds
* ```tabspropref``` Tabs property ref (optional)
* ```namequalifier``` A qualifier to distinguish between properties with the same name (optional)
* ```checkintext``` Time guests should arrive (optional)
* ```checkouttext``` Time guests should leave by (optional)

The ```address``` array provided must contain at least ```line1```, ```town``` and ```countryname``` or ```countryalpha2code```

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1

## Property Details [/v2/property/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the property to get

### Gets the details of a property [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "type": "property",
            "tabspropref": "1105",
            "name": "Angler Cottage",
            "namequalifier": "Irstead",
            "status": {
                "id": 1,
                "name": "Live",
                "allowbooking": true,
                "allowoverride": false,
                "priority": 10,
                "allowbalance": true
            },
            "address": {
                "id": 58,
                "line1": "Angler Cottage",
                "line2": "Hall Road",
                "line3": "",
                "town": "Irstead",
                "county": "Norfolk",
                "postcode": "NR12 8XP",
                "country": {
                    "alpha2": "GB",
                    "alpha3": "GBR",
                    "name": "United Kingdom"
                },
                "longitude": "1.481100",
                "latitude": "52.734800",
                "geohash": "u13h18nd2"
            },
            "sleeps": 4,
            "bedrooms": 2,
            "accomodationdescription": "1 double 1 twin",
            "maximumpets": 2,
            "telephonenumber": "",
            "checkinearliesttime": "10:20",
            "checkinlatesttime": "13:45",
            "checkintext": "If after 5 please leave key under mat",
            "checkouttime": "14:20",
            "checkouttext": "Charge extra if 1 minute late!!!",
            "office": {
                "office": "/v2/office/50",
                "name": "Holt"
            },
            "brandings": [
                {
                    "id": 1,
                    "branding": "/v2/branding/3",
                    "primarybranding": true,
                    "brandinggroup": "/v2/brandinggroup/2",
                    "bookingbrand": "/v2/property/1/bookingbrand/1",
                    "primarybookingbrand": true,
                    "marketingbrand": "/v2/property/1/marketingbrand/1",
                    "status": {
                        "id": 1,
                        "name": "Live",
                        "allowbooking": true,
                        "allowoverride": false,
                        "priority": 10,
                        "allowbalance": true
                    },
                    "statusreason": "",
                    "promote": false,
                    "allowbookingonwebuntil": "2099-12-31",
                    "showpricingonwebuntil": "2099-12-31"
                }
            ],
            "rating": 3.5,
            "ratinginspectiontype": {
                "id": 1,
                "inspectiontype": "VisitEngland",
                "schedule": "1 year",
                "gradingunit": "Star",
                "defaultgrading": ""
            },
            "primarypropertybranding": {
                "id": 1,
                "branding": "/v2/branding/3",
                "primarybranding": true,
                "brandinggroup": "/v2/brandinggroup/2",
                "bookingbrand": "/v2/property/1/bookingbrand/1",
                "primarybookingbrand": true,
                "marketingbrand": "/v2/property/1/marketingbrand/1",
                "status": {
                    "id": 1,
                    "name": "Live",
                    "allowbooking": true,
                    "allowoverride": false,
                    "priority": 10,
                    "allowbalance": true
                },
                "statusreason": "",
                "promote": false,
                "allowbookingonwebuntil": "2099-12-31",
                "showpricingonwebuntil": "2099-12-31"
            },
            "houskeeping": {
                "nextchangedate": "2026-10-01",
                "bookings": [
                    {
                        "fromdate": "2026-10-01",
                        "todate": "2026-10-08",
                        "route": "/v2/booking/1"
                    }
                ],
                "suppliers": [
                    {
                        "activity": "Cleaning",
                        "actor": "/v2/supplier/12",
                        "fromdate": "2013-10-01",
                        "todate": "2100-01-01",
                        "services": [
                            {
                                "name": "Towels",
                                "fromdate": "2015-04-23",
                                "todate": "2027-07-01"
                            }
                        ]
                    },
                    {
                        "activity": "Keyholder",
                        "actor": "/v2/supplier/14",
                        "fromdate": "2013-10-01",
                        "todate": "2100-01-01",
                        "services": []
                    }
                ]
            },
            "documents": [
                {
                    "id": 7,
                    "created": "2017-05-15 15:29:48",
                    "image": {
                        "id": 5,
                        "name": "abc.jpg",
                        "filename": "abc.jpg",
                        "timeadded": "2014-01-01 12:00:00",
                        "weight": 0,
                        "private": false,
                        "description": "Here is another placeholder image",
                        "mimetype": {
                            "id": 2,
                            "name": "image/jpeg",
                            "shortname": "jpg"
                        },
                        "file": "/v2/file/5",
                        "height": 360,
                        "width": 480,
                        "alt": "The empire state building"
                    }
                },
                {
                    "id": 6,
                    "created": "2017-05-15 15:29:48",
                    "image": {
                        "id": 6,
                        "name": "xyz.jpg",
                        "filename": "xyz.jpg",
                        "timeadded": "2014-01-01 12:00:00",
                        "weight": 0,
                        "private": false,
                        "description": "Bathroom",
                        "mimetype": {
                            "id": 2,
                            "name": "image/jpeg",
                            "shortname": "jpg"
                        },
                        "file": "/v2/file/6",
                        "height": 300,
                        "width": 200,
                        "alt": "The Bathroom"
                    }
                }
            ],
            "updated": "2017-05-15 15:29:48"
        }

### Update the details of a property [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output.
eg. ```name```, ```address```, ```sleeps```, ```bedrooms``` etc.
Any omitted fields will be left as is.
If an ```address``` field is provided, it must contain at least ```line1```, ```town``` and ```countryname``` or ```countryalpha2code```

+ Request (application/x-www-form-urlencoded)

        sleeps=4

+ Response 204

### Delete a property [DELETE]
Not implemented

+ Response 501


## Property address update [/v2/property/{id}/address/{id2}]

+ Parameters
    + id  (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the Property address

### Update a property address [PUT]

+ Request (application/x-www-form-urlencoded)

        line1=Address line 1

+ Response 204




## Property Brochure Index [/v2/property/{id}/marketingbrand/{id2}/brochure]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyMarketingBrand

### Get all Brochures for a Property Marketing Brand [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "brochure": {
                    "id": 1,
                    "marketingbrand": "/v2/marketingbrand/3",
                    "name": "NO Brochure 2014",
                    "year": 2014,
                    "orderfromdate": "2013-09-01",
                    "ordertodate": "2014-12-31",
                    "availablefromdate": "2013-09-01",
                    "weight": "1.00",
                    "cost": "3.00"
                },
                "page": 24,
                "sequence": 0,
                "prominence": 0
            }
        ]

### Add a new Property Brochure [POST]
The following fields should be provided in the POST array

* ```brochureid``` The id of the Brochure the Property is to be added to
* ```page``` The page number the property appears on (optional)
* ```sequence``` Where the property appears in relation to other properties (optional)
* ```prominence``` The level of prominence of the entry (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/marketingbrand/1/brochure/1

## Property Brochure Detail [/v2/property/{id}/marketingbrand/{id2}/brochure/{id3}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyMarketingBrand 
    + id3 (required, integer, `1`) ... The id of the PropertyMarketingBrandBrochure 

### Get the details of a Property Brochure [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "brochure": {
                "id": 1,
                "marketingbrand": "/v2/marketingbrand/3",
                "name": "NO Brochure 2014",
                "year": 2014,
                "orderfromdate": "2013-09-01",
                "ordertodate": "2014-12-31",
                "availablefromdate": "2013-09-01",
                "weight": "1.00",
                "cost": "3.00"
            },
            "page": 24,
            "sequence": 0,
            "prominence": 0
        }

### Update a Property Brochure [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output.

+ Request (application/x-www-form-urlencoded)

        sequence=54

+ Response 204

### Delete a Property Brochure [DELETE]

+ Response 204



## DepositAmount Index [/v2/depositamount]

### Get all DepositAmounts [GET]

Stores parameters used to calculate the deposit amount on a booking

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "type": "Property",
              "name": "150 plus incl + BKFE",
              "description": "£150 plus included extras and Booking Fee",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "pricingperiod": {
                "id": 2,
                "pricingperiod": "Week",
                "days": 0,
                "weeks": 1,
                "months": 0,
                "subperiod": "Day"
              },
              "depositamounttype": {
                "id": 1,
                "depositamounttype": "Fixed"
              },
              "amount": "150.000000",
              "plusincludedextras": true,
              "plusadditionalextras": false,
              "decimalplaces": 2,
              "property": "/v2/property/1",
              "fromdate": "2016-01-01",
              "todate": "2020-12-31",
              "minimumamount": 0
            },
            {
              "id": 2,
              "type": "Property",
              "name": "19% + incl - BKFE",
              "description": "19% plus included extras, less Booking fee",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "pricingperiod": {
                "id": 2,
                "pricingperiod": "Week",
                "days": 0,
                "weeks": 1,
                "months": 0,
                "subperiod": "Day"
              },
              "depositamounttype": {
                "id": 2,
                "depositamounttype": "Percentage"
              },
              "amount": "0.190000",
              "plusincludedextras": true,
              "plusadditionalextras": false,
              "decimalplaces": 2,
              "property": "/v2/property/1",
              "fromdate": "2025-01-01",
              "todate": "2025-12-31",
              "minimumamount": 50
            },
            {
              "id": 3,
              "type": "Booking",
              "name": "175 plus add",
              "description": "17.5% plus Additional Extras",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "pricingperiod": {
                "id": 2,
                "pricingperiod": "Week",
                "days": 0,
                "weeks": 1,
                "months": 0,
                "subperiod": "Day"
              },
              "depositamounttype": {
                "id": 2,
                "depositamounttype": "Percentage"
              },
              "amount": "0.175000",
              "plusincludedextras": false,
              "plusadditionalextras": true,
              "decimalplaces": 2
            },
            {
              "id": 4,
              "type": "Branding",
              "name": "150 plus extras",
              "description": "£150 plus all extras",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "pricingperiod": {
                "id": 2,
                "pricingperiod": "Week",
                "days": 0,
                "weeks": 1,
                "months": 0,
                "subperiod": "Day"
              },
              "depositamounttype": {
                "id": 1,
                "depositamounttype": "Fixed"
              },
              "amount": "150.000000",
              "plusincludedextras": true,
              "plusadditionalextras": true,
              "decimalplaces": 2,
              "branding": "/v2/branding/1",
              "fromdate": "2016-01-01",
              "todate": "2020-12-31",
              "minimumamount": 150
            },
            {
              "id": 5,
              "type": "Branding",
              "name": "100 plus extras",
              "description": "£100 plus all extras",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "pricingperiod": {
                "id": 2,
                "pricingperiod": "Week",
                "days": 0,
                "weeks": 1,
                "months": 0,
                "subperiod": "Day"
              },
              "depositamounttype": {
                "id": 1,
                "depositamounttype": "Fixed"
              },
              "amount": "100.000000",
              "plusincludedextras": true,
              "plusadditionalextras": true,
              "decimalplaces": 2,
              "branding": "/v2/branding/3",
              "fromdate": "2016-01-01",
              "todate": "2020-12-31",
              "minimumamount": 100
            },
            {
              "id": 6,
              "type": "Branding",
              "name": "100 plus extras",
              "description": "£100 plus all extras",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "pricingperiod": {
                "id": 2,
                "pricingperiod": "Week",
                "days": 0,
                "weeks": 1,
                "months": 0,
                "subperiod": "Day"
              },
              "depositamounttype": {
                "id": 1,
                "depositamounttype": "Fixed"
              },
              "amount": "100.000000",
              "plusincludedextras": true,
              "plusadditionalextras": true,
              "decimalplaces": 0,
              "branding": "/v2/branding/6",
              "fromdate": "2025-03-01",
              "todate": "2025-04-30",
              "minimumamount": 100
            }
          ]

### Add a new DepositAmount [POST]

The following fields should be provided in the POST array

* ```type``` "Property", "Booking" or "Branding"
* ```name``` The name of the DepositAmount settings
* ```description``` A description of the DepositAmount settings
* ```currencyid``` The id of the Currency the deposit amount applies to
* ```propertyid``` The id of the property (for type=Property)
* ```brandingid``` The id of the property (for type=Branding)
* ```fromdate``` The date the Deposit Amount is valid from (type != Booking)
* ```todate``` The date the Deposit Amount is valid to (type != Booking)
* ```pricingperiod``` The pricing period the deposit amount is valid for, e.g. "Week"
* ```depositamounttype``` The type, e.g. "Fixed", "PerPeriod", "Percentage"
* ```amount``` The amount, or percentage
* ```plusincludedextras```: Whether to add the value of all included extras to the amount
* ```plusadditionalextras```: Whether to add the value of all additional extras to the amount
* ```minimumamount``` The minimum deposit amount (optional, default=0, type != Booking)
* ```decimalplaces``` The number of decimal places to round to (optional, default=0)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/depositamount/2

## DepositAmount Detail [/v2/depositamount/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the DepositAmount to get

### Gets the details of a DepositAmount [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "type": "Property",
            "name": "150 plus incl + BKFE",
            "description": "£150 plus included extras and Booking Fee",
            "currency": {
              "id": 1,
              "code": "GBP",
              "name": "Pound Sterling",
              "decimalplaces": 2
            },
            "pricingperiod": {
              "id": 2,
              "pricingperiod": "Week",
              "days": 0,
              "weeks": 1,
              "months": 0,
              "subperiod": "Day"
            },
            "depositamounttype": {
              "id": 1,
              "depositamounttype": "Fixed"
            },
            "amount": "150.000000",
            "plusincludedextras": true,
            "plusadditionalextras": false,
            "decimalplaces": 2,
            "property": "/v2/property/1",
            "fromdate": "2016-01-01",
            "todate": "2020-12-31",
            "minimumamount": 0
          }

### Update a DepositAmount [PUT]

+ Request (application/x-www-form-urlencoded)

        amount=0.3

+ Response 204

### Delete a DepositAmount [DELETE]

+ Response 204



## DepositAmount Extra Index [/v2/depositamount/{id}/extra]

+ Parameters

    + id (required, integer, `1`) ... The id of the DepositAmount

### Get all Extras for a DepositAmount [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "extra": {
                    "id": 1,
                    "extracode": "BKFE",
                    "extratype": "Booking",
                    "description": "Booking Fee",
                    "brandings": [
                        "/v2/branding/1",
                        "/v2/branding/2",
                        "/v2/branding/3"
                    ]
                },
                "subtract": false
            }
        ]

### Add a new Extra to a DepositAmount [POST]

The following fields should be provided in the POST array

* ```extraid``` The Id of the Extra
* ```subtract``` Whether to subtract the value of the extra (optional, default=false). Only relevant if DepositAmount has one of the 'plus...extras' options set)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/depositamount/1/extra/2

## DepositAmount Extra Detail [/v2/depositamount/{id}/extra/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the DepositAmount
    + id2 (required, integer, `1`) ... The id of the DepositAmountExtra 

### Gets the details of a DepositAmount Extra [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "extra": {
                "id": 1,
                "extracode": "BKFE",
                "extratype": "Booking",
                "description": "Booking Fee",
                "brandings": [
                    "/v2/branding/1",
                    "/v2/branding/2",
                    "/v2/branding/3"
                ]
            },
            "subtract": false
        }

### Update a DepositAmount's Extra [PUT]

+ Request (application/x-www-form-urlencoded)

        subtract=true

+ Response 204

### Deletes a DepositAmount's Extra [DELETE]

+ Response 204



## DepositAmountType Index [/v2/depositamounttype]
### Get all DepositAmountTypes [GET]
Stores parameters used to calculate the deposit amount on a booking

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "depositamounttype": "Fixed"
            },
            {
                "id": 2,
                "depositamounttype": "Percentage"
            },
            {
                "id": 3,
                "depositamounttype": "Per Period"
            }
        ]

### Add a new DepositAmountType [POST]

The following fields should be provided in the POST array

* ```depositamounttype``` The type, e.g. "Fixed", "PerPeriod", "Percentage"

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/depositamounttype/1

## DepositAmountType Detail [/v2/depositamounttype/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the DepositAmountType to get

### Gets the details of a DepositAmountType [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "depositamounttype": "Percentage"
        }

### Update a DepositAmountType [PUT]

+ Request (application/x-www-form-urlencoded)

        depositamounttype=Percentage

+ Response 204

### Delete a DepositAmountType [DELETE]

+ Response 204




## Property Description Type Index [/v2/descriptiontype]
### Retrieve a list of Property Description Types. [GET]
Property description types used to define the type of Property Description (Long, Short, Website, Feed, etc.).

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "code": "long",
                "name": "Long",
                "description": "long",
                "encoding": {
                    "id": 2,
                    "encoding": "HTML"
                },
                "minimumlength": 0,
                "maximumlength": 999
            },
            {
                "id": 2,
                "code": "avail",
                "name": "Availability",
                "description": "avail",
                "encoding": {
                    "id": 1,
                    "encoding": "Plain"
                },
                "minimumlength": 0,
                "maximumlength": 999
            },
            {
                "id": 3,
                "code": "short",
                "name": "Short",
                "description": "short",
                "encoding": {
                    "id": 1,
                    "encoding": "Plain"
                },
                "minimumlength": 0,
                "maximumlength": 200
            },
            {
                "id": 4,
                "code": "direct",
                "name": "Direct",
                "description": "direct",
                "encoding": {
                    "id": 1,
                    "encoding": "Plain"
                },
                "minimumlength": 0,
                "maximumlength": 500
            }
        ]

### Add a new Description Type [POST]
The following fields should be provided in the POST array

* ```code``` String name of shortcode type
* ```name``` Name of description type
* ```description``` Description of description type (!)
* ```encoding``` String name of the encoding to be used
* ```minimumlength``` Minimum length allowed
* ```maximumlength``` Maximum length allowed
* ```donotmodify``` Prevents code or name being modified (cannot be updated)
* ```sortorder``` Used to control the order descriptions are shown in. Equal values will be displayed in no particular order.

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/descriptiontype/2

## Description type Detail [/v2/descriptiontype/{id}]
+ Parameters

    + id (required, integer, `1`) ... The id of the Description Type to get

### Get the details of a Property Description Type [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "code": "long",
            "name": "Long",
            "description": "long",
            "encoding": {
                "id": 2,
                "encoding": "HTML"
            },
            "minimumlength": 0,
            "maximumlength": 999
        }

### Update a Description Type [PUT]

+ Request (application/x-www-form-urlencoded)

        name=New Name

+ Response 204

+ Response 200 (application/json)

        {
            "code": 2,
            "message": "HTML in existing descriptions may be rendered as text!",
            "detail": {}
        }

+ Response 400 (application/json)

        {
            "code": 3,
            "message": "Existing descriptions exceed new maximum length",
            "detail": {
                "descriptions":  {},
                "force": "/v2/descriptiontype/43?force=true"
            }
        }

### Delete Description Type [DELETE]

+ Response 204

+ Response 400 (application/json)

        {
            "code": 4,
            "message": "Descriptions already exist with this Description Type",
            "detail": {
                "descriptions":  {},
                "force": "/v2/descriptiontype/43?force=true"
            }
        }



## Grouping Index [/v2/grouping]
### Get all Groupings [GET]
A Grouping is a concept which can be used to group properties. Area and Location are common groupings.

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Area",
                "parentgrouping": ""
            },
            {
                "id": 2,
                "name": "Location",
                "parentgrouping": ""
            },
            {
                "id": 3,
                "name": "parent",
                "parentgrouping": ""
            },
            {
                "id": 4,
                "name": "child",
                "parentgrouping": "/v2/grouping/3"
            }
        ]

### Add a new Grouping [POST]

The following fields should be provided in the POST array

* ```name``` The name of the Grouping being added
* ```parentgroupingid``` The id of the parent grouping (optional).

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/grouping/2

## Grouping Detail [/v2/grouping/{id}]
### Gets the details of a Grouping [GET]
+ Parameters

    + id (required, integer, `4`) ... The id of the Grouping to get

+ Response 200 (application/json)

        {
            "id": 4,
            "name": "child",
            "parentgrouping": "/v2/grouping/3"
        }

### Update a Grouping [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the Grouping

+ Request (application/x-www-form-urlencoded)

        parentgroupingid=3

+ Response 204

### Deletes a Grouping [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the Grouping

+ Response 204




## Grouping Value Index [/v2/grouping/{id}/value]
### Get all Values for an Grouping [GET]
+ Parameters

    + id (required, integer, `2`) ... The id of the Grouping

+ Response 200 (application/json)

        [
            {
                "id": 3,
                "marketingbrand": "/v2/marketingbrand/3",
                "name": "Irstead",
                "qualifier": "Norfolk",
                "parentgroupingvalue": "/v2/grouping/1/value/1",
                "description": "A small hamlet in the middle of the Broads, close to Wroxham and the East Coast",
                "latitude": "52.234500",
                "longitude": "1.234500",
                "radiuskm": 2,
                "nearkm": 5,
                "promote": false,
                "code": "IRST",
                "geohash": "u12chj4bj"
            },
            {
                "id": 4,
                "marketingbrand": "/v2/marketingbrand/3",
                "name": "Horning",
                "qualifier": "",
                "parentgroupingvalue": "",
                "description": "Situated on the banks of the River Bure, Horning is a lovely village at the heart of the Norfolk Broads",
                "latitude": "52.567400",
                "longitude": "1.036900",
                "radiuskm": 2,
                "nearkm": 5,
                "promote": false,
                "code": "HORNI",
                "geohash": "u12ep9e53"
            },
            {
                "id": 5,
                "marketingbrand": "/v2/marketingbrand/3",
                "name": "Wroxham",
                "qualifier": "",
                "parentgroupingvalue": "",
                "description": "The home of Roys.",
                "latitude": "52.211100",
                "longitude": "1.222200",
                "radiuskm": 2,
                "nearkm": 5,
                "promote": false,
                "code": "WROX",
                "geohash": "u12c5b9zx"
            },
            {
                "id": 6,
                "marketingbrand": "/v2/marketingbrand/4",
                "name": "Braunton",
                "qualifier": "",
                "parentgroupingvalue": "",
                "description": "Brauton is a pleasant resot on the north coast of Scotland",
                "latitude": "52.211100",
                "longitude": "1.222200",
                "radiuskm": 2,
                "nearkm": 5,
                "promote": false,
                "code": "BRAU",
                "geohash": "u12c5b9zx"
            },
            {
                "id": 7,
                "marketingbrand": "/v2/marketingbrand/4",
                "name": "Croyde",
                "qualifier": "",
                "parentgroupingvalue": "",
                "description": "Croyde is a popular resot on the west coast of the Czech Republic",
                "latitude": "52.211100",
                "longitude": "1.222200",
                "radiuskm": 2,
                "nearkm": 5,
                "promote": false,
                "code": "CROY",
                "geohash": "u12c5b9zx"
            },
            {
                "id": 9,
                "marketingbrand": "/v2/marketingbrand/5",
                "name": "Horning",
                "qualifier": "",
                "parentgroupingvalue": "",
                "description": "Situated on the banks of the River Bure, Horning is a lovely village at the heart of the Norfolk Broads",
                "latitude": "52.567400",
                "longitude": "1.036900",
                "radiuskm": 2,
                "nearkm": 5,
                "promote": false,
                "code": "HORNI",
                "geohash": "u12ep9e53"
            }
        ]

### Add a new Value to an Grouping [POST]

The following fields should be provided in the POST array

* ```marketingbrandid``` The Id of the Marketing Brand the value relates to
* ```name``` The value, e.g. an area or location
* ```parentgroupingvalueid``` The id of the parent grouping value (optional)
* ```description``` A description of the area, location etc
* ```latitude``` The latitude of the area or location (optional)
* ```longitude``` The longitude of the area or location (optional)
* ```radiuskm``` The radius of the location in km (optional)
* ```nearkm``` The maximum distance from the edge of the location (defined by the radius) which is considered 'near' (optional)
* ```promote``` Whether to promote the location (optional)
* ```code``` The code (primarily for legacy, e.g. areacode, loccode)

+ Parameters

    + id (required, integer, `1`) ... The id of the Grouping

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/grouping/1/value/2

## Grouping Value Detail [/v2/grouping/{id}/value/{eid}]
### Gets the details of an Grouping Value [GET]
+ Parameters

    + id (required, integer, `2`) ... The id of the Grouping
    + eid (required, integer, `3`) ... The id of the GroupingValue to get

+ Response 200 (application/json)

        {
            "id": 3,
            "marketingbrand": "/v2/marketingbrand/3",
            "name": "Irstead",
            "qualifier": "Norfolk",
            "parentgroupingvalue": "/v2/grouping/1/value/1",
            "description": "A small hamlet in the middle of the Broads, close to Wroxham and the East Coast",
            "latitude": "52.234500",
            "longitude": "1.234500",
            "radiuskm": 2,
            "nearkm": 5,
            "promote": false,
            "code": "IRST",
            "geohash": "u12chj4bj"
        }

### Update an Grouping's Value [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the Grouping
    + eid (required, integer, `1`) ... The id of the GroupingValue to update

+ Request (application/x-www-form-urlencoded)

        radiuskm=3

+ Response 204

### Deletes an Grouping's Value [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the Grouping
    + eid (required, integer, `1`) ... The id of the GroupingValue to delete

+ Response 204




## Inspector Index [/v2/inspector]
### Get all list of all Inspectors [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "name": "VisitBritain",
              "schedule": "1 year"
            },
            {
              "id": 2,
              "name": "VisitWales",
              "schedule": "6 months"
            },
            {
              "id": 3,
              "name": "VisitScotland",
              "schedule": "2 years"
            }
          ]

### Add a new Inspector [POST]

The following fields should be provided in the POST array

* ```name``` The name of the Inspector
* ```schedule``` The Inspector schedule, e.g. '2 weeks', '1 year'

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/inspector

## Inspector Detail [/v2/inspector/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Inspector to get

### Gets the details of an Inspector [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "VisitBritain",
            "schedule": "1 year"
          }

### Update an Inspector [PUT]

+ Request (application/x-www-form-urlencoded)

        name="Hello"
        schedule="1 week"

+ Response 204

### Delete an Inspector [DELETE]

+ Response 204



## Inspection Index [/v2/property/{id}/inspection]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property to get

### Get all Inspections [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "inspectiondate": "2013-10-12",
              "reinspectiondate": null,
              "grading": "4",
              "gradingunit": "Star",
              "inspectorname": "Joe Bloggs",
              "notes": "",
              "inspectiontype": {
                "id": 1,
                "inspectiontype": "VisitEngland",
                "schedule": "1 year",
                "gradingunit": "Star",
                "defaultgrading": ""
              },
              "property": "/v2/property/1"
            },
            {
              "id": 2,
              "inspectiondate": "2015-05-01",
              "reinspectiondate": "2016-05-01",
              "grading": "4",
              "gradingunit": "Star",
              "inspectorname": "Mr Smith",
              "notes": "Dirty bathroom",
              "inspectiontype": {
                "id": 1,
                "inspectiontype": "VisitEngland",
                "schedule": "1 year",
                "gradingunit": "Star",
                "defaultgrading": ""
              },
              "property": "/v2/property/1"
            },
            {
              "id": 3,
              "inspectiondate": "2015-05-01",
              "reinspectiondate": null,
              "grading": "5",
              "gradingunit": "Star",
              "inspectorname": "Mr Smith",
              "notes": "Beautiful garden",
              "inspectiontype": {
                "id": 2,
                "inspectiontype": "VisitWales",
                "schedule": "6 months",
                "gradingunit": "Star",
                "defaultgrading": ""
              },
              "property": "/v2/property/1"
            }
          ]

### Add a new Inspection [POST]

The following fields should be provided in the POST array

* ```inspectiondate``` The date of the inspection
* ```reinspectiondate``` The date of the next inspection (optional)
* ```grading``` The grading achieved on this inspection
* ```gradingunit``` The unit used for the grading
* ```inspectorname``` The name of the Inspector
* ```notes``` Notes about the inspection
* ```inspectiontypeid``` The id of the inspectiontype
* ```propertyid``` The id of the property inspected

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/inspection/1

## Inspection Detail [/v2/property/{id}/inspection/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property to get
    + id2 (required, integer, `1`) ... The id of the Inspection to get

### Gets the details of a Inspection [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "inspectiondate": "2013-10-12",
            "reinspectiondate": null,
            "grading": "4",
            "gradingunit": "Star",
            "inspectorname": "Joe Bloggs",
            "notes": "",
            "inspectiontype": {
              "id": 1,
              "inspectiontype": "VisitEngland",
              "schedule": "1 year",
              "gradingunit": "Star",
              "defaultgrading": ""
            },
            "property": "/v2/property/1"
          }

### Update a Inspection [PUT]

+ Request (application/x-www-form-urlencoded)

        inspectiondate="2015-05-01"
        grading1.23
        gradingunit="Hello"
        inspectorname="Hello"
        notes="Hello"
        inspectorid=1

+ Response 204

### Delete a Inspection [DELETE]

+ Response 204



## InspectionType Index [/v2/inspectiontype]
### Get all list of all InspectionTypes [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "inspectiontype": "VisitEngland",
              "schedule": "1 year",
              "gradingunit": "Star",
              "defaultgrading": ""
            },
            {
              "id": 2,
              "inspectiontype": "VisitWales",
              "schedule": "6 months",
              "gradingunit": "Star",
              "defaultgrading": ""
            },
            {
              "id": 3,
              "inspectiontype": "VisitScotland",
              "schedule": "2 years",
              "gradingunit": "Star",
              "defaultgrading": ""
            }
          ]

### Add a new InspectionType [POST]

The following fields should be provided in the POST array

* ```inspectiontype``` The InspectionType
* ```schedule``` The InspectionType schedule, e.g. '2 weeks', '1 year' (optional)
* ```gradingunit``` The unit used for grading e.g. 'Stars' (optional)
* ```defaultgrading``` The default grading e.g. '2 Stars' (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/inspectiontype

## InspectionType Detail [/v2/inspectiontype/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the InspectionType to get

### Gets the details of an InspectionType [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "inspectiontype": "VisitEngland",
            "schedule": "1 year",
            "gradingunit": "Star",
            "defaultgrading": ""
          }

### Update an InspectionType [PUT]

+ Request (application/x-www-form-urlencoded)

        inspectiontype="Hello"
        schedule="1 week"

+ Response 204

### Delete an InspectionType [DELETE]

+ Response 204




## InstructionType Index [/v2/instructiontype]
### Get all InstructionTypes [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "instructiontype": "Travel Directions",
                "description": "Directions to the property"
            },
            {
                "id": 2,
                "instructiontype": "Deposit Payment",
                "description": "How to pay the Deposit"
            },
            {
                "id": 3,
                "instructiontype": "Balance Payment",
                "description": "How to pay the Balance"
            }
        ]

### Add a new InstructionType [POST]

The following fields should be provided in the POST array

* ```instructiontype``` The name of the InstructionType
* ```description``` The description of InstructionType

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/instructiontype

## InstructionType Detail [/v2/instructiontype/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the InstructionType to get

### Gets the details of a InstructionType [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "instructiontype": "Travel Directions",
            "description": "Directions to the property"
        }

### Update a InstructionType [PUT]

+ Request (application/x-www-form-urlencoded)

        instructiontype="Hello"
        description="Hello"

+ Response 204

### Delete a InstructionType [DELETE]

+ Response 204



## OwnerPaymentTerms Index [/v2/ownerpaymentterms]
### Get all OwnerPaymentTerms [GET]
Stores parameters controlling what an owner is paid and when

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "name": "Paid based on holiday dates",
              "description": "Owner is paid based on the holiday dates",
              "ondeposit": false,
              "oninterim": false,
              "onbalance": false,
              "amountperperiod": "0.0000",
              "percentageofpayment": 0,
              "percentageofbasic": 0,
              "ownerpaid": "",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "extras": []
            },
            {
              "id": 2,
              "name": "As Received - COM",
              "description": "Owner is paid a proportion of their money roughly equivalent to the proportion the deposit is of the total",
              "ondeposit": true,
              "oninterim": true,
              "onbalance": true,
              "amountperperiod": "0.0000",
              "percentageofpayment": 0,
              "percentageofbasic": 0,
              "ownerpaid": "As Received",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "extras": []
            },
            {
              "id": 3,
              "name": "Commission First",
              "description": "Owner is paid anything left after all the commission has been taken",
              "ondeposit": true,
              "oninterim": true,
              "onbalance": true,
              "amountperperiod": "0.0000",
              "percentageofpayment": 0,
              "percentageofbasic": 0,
              "ownerpaid": "Last",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "extras": []
            },
            {
              "id": 4,
              "name": "Owner First",
              "description": "Owner is paid as much as possible as soon as possible",
              "ondeposit": true,
              "oninterim": true,
              "onbalance": true,
              "amountperperiod": "0.0000",
              "percentageofpayment": 0,
              "percentageofbasic": 0,
              "ownerpaid": "First",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "extras": []
            },
            {
              "id": 5,
              "name": "On Balance",
              "description": "Owner is paid when the Balance is paid",
              "ondeposit": false,
              "oninterim": false,
              "onbalance": true,
              "amountperperiod": "0.0000",
              "percentageofpayment": 0,
              "percentageofbasic": 0,
              "ownerpaid": "",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "extras": []
            },
            {
              "id": 6,
              "name": "Good Life",
              "description": "As COM but take BKFE and CCC off first",
              "ondeposit": true,
              "oninterim": false,
              "onbalance": false,
              "amountperperiod": "0.0000",
              "percentageofpayment": 0,
              "percentageofbasic": 0,
              "ownerpaid": "",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "extras": [
                {
                  "id": 1,
                  "extra": {
                    "id": 1,
                    "extracode": "BKFE",
                    "extratype": "Booking",
                    "description": "Booking Fee",
                    "brandings": [
                      "/v2/branding/1",
                      "/v2/branding/2",
                      "/v2/branding/3",
                      "/v2/branding/4",
                      "/v2/branding/6"
                    ]
                  },
                  "takefromdeposit": false,
                  "addtodepositpaid": false,
                  "subtractfromdepositpaid": false,
                  "payondeposit": true,
                  "dontpayondeposit": false
                },
                {
                  "id": 2,
                  "extra": {
                    "id": 10,
                    "extracode": "CCC",
                    "extratype": "Booking",
                    "description": "Credit Card Charge",
                    "brandings": [
                      "/v2/branding/3",
                      "/v2/branding/1"
                    ]
                  },
                  "takefromdeposit": false,
                  "addtodepositpaid": false,
                  "subtractfromdepositpaid": false,
                  "payondeposit": true,
                  "dontpayondeposit": false
                },
                {
                  "id": 3,
                  "extra": {
                    "id": 3,
                    "extracode": "HEAT",
                    "extratype": "Booking",
                    "description": "Heating",
                    "brandings": [
                      "/v2/branding/2",
                      "/v2/branding/3",
                      "/v2/branding/4",
                      "/v2/branding/6"
                    ]
                  },
                  "takefromdeposit": false,
                  "addtodepositpaid": true,
                  "subtractfromdepositpaid": false,
                  "payondeposit": true,
                  "dontpayondeposit": false
                }
              ]
            },
            {
              "id": 7,
              "name": "20% on deposit",
              "description": "20% on deposit",
              "ondeposit": true,
              "oninterim": false,
              "onbalance": false,
              "amountperperiod": "0.0000",
              "percentageofpayment": 0,
              "percentageofbasic": 20,
              "ownerpaid": "",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "extras": []
            },
            {
              "id": 8,
              "name": "£200 p/w",
              "description": "Owner gets £200 per week on deposit",
              "ondeposit": true,
              "oninterim": false,
              "onbalance": false,
              "amountperperiod": "200.0000",
              "percentageofpayment": 0,
              "percentageofbasic": 0,
              "ownerpaid": "",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "extras": []
            },
            {
              "id": 9,
              "name": "Percent of deposit",
              "description": "The owner gets a percentage of the Deposit payment",
              "ondeposit": true,
              "oninterim": false,
              "onbalance": false,
              "amountperperiod": "0.0000",
              "percentageofpayment": 80,
              "percentageofbasic": 0,
              "ownerpaid": "",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "extras": []
            },
            {
              "id": 10,
              "name": "Percent of Basic",
              "description": "Owner gets a percent of Basic Price on deposit",
              "ondeposit": true,
              "oninterim": false,
              "onbalance": false,
              "amountperperiod": "0.0000",
              "percentageofpayment": 0,
              "percentageofbasic": 35,
              "ownerpaid": "",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "extras": []
            }
          ]

### Add a new OwnerPaymentTerms [POST]

The following fields should be provided in the POST array

* ```name``` "Property", "Booking" or "Branding"
* ```description``` The id of the Currency the deposit amount applies to
* ```ondeposit``` whether the owner is paid when the customer pays the deposit
* ```oninterim``` whether the owner is paid when the customer pays an interim payment
* ```onbalance``` whether the owner is paid when the customer pays the balance
* ```amountperperiod``` The amount to be paid to the owner per holiday period on deposit
* ```percentageofpayment``` The percentage of the payment to be paid to the owner on deposit
* ```percentageofbasic``` The percentage of the basic to be paid to the owner on deposit
* ```ownerpaid``` Whether the owner is paid Frist, Last or As Received (or n/a = "")

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/ownerpaymentterms/2

## OwnerPaymentTerms Detail [/v2/ownerpaymentterms/{id}]

+ Parameters

    + id (required, integer, `9`) ... The id of the OwnerPaymentTerms

### Gets the details of a OwnerPaymentTerms [GET]

+ Response 200 (application/json)

        {
            "id": 9,
            "name": "Percent of deposit",
            "description": "The owner gets a percentage of the Deposit payment",
            "ondeposit": true,
            "oninterim": false,
            "onbalance": false,
            "amountperperiod": "0.0000",
            "percentageofpayment": 80,
            "percentageofbasic": 0,
            "ownerpaid": "",
            "currency": {
              "id": 1,
              "code": "GBP",
              "name": "Pound Sterling",
              "decimalplaces": 2
            },
            "extras": []
          }

### Update a OwnerPaymentTerms [PUT]

+ Request (application/x-www-form-urlencoded)

        onbalance=false

+ Response 204

### Delete a OwnerPaymentTerms [DELETE]

+ Response 204



## OwnerPaymentTerms Extra Index [/v2/ownerpaymentterms/{id}/extra]
ownerpaymentterms/9/extra

+ Parameters

    + id (required, integer, `6`) ... The id of the OwnerPaymentTerms

### Get all Extras for an OwnerPaymentTerms [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "extra": {
                "id": 1,
                "extracode": "BKFE",
                "extratype": "Booking",
                "description": "Booking Fee",
                "brandings": [
                  "/v2/branding/1",
                  "/v2/branding/2",
                  "/v2/branding/3",
                  "/v2/branding/4",
                  "/v2/branding/6"
                ]
              },
              "takefromdeposit": false,
              "addtodepositpaid": false,
              "subtractfromdepositpaid": false,
              "payondeposit": true,
              "dontpayondeposit": false
            },
            {
              "id": 2,
              "extra": {
                "id": 10,
                "extracode": "CCC",
                "extratype": "Booking",
                "description": "Credit Card Charge",
                "brandings": [
                  "/v2/branding/3",
                  "/v2/branding/1"
                ]
              },
              "takefromdeposit": false,
              "addtodepositpaid": false,
              "subtractfromdepositpaid": false,
              "payondeposit": true,
              "dontpayondeposit": false
            },
            {
              "id": 3,
              "extra": {
                "id": 3,
                "extracode": "HEAT",
                "extratype": "Booking",
                "description": "Heating",
                "brandings": [
                  "/v2/branding/2",
                  "/v2/branding/3",
                  "/v2/branding/4",
                  "/v2/branding/6"
                ]
              },
              "takefromdeposit": false,
              "addtodepositpaid": true,
              "subtractfromdepositpaid": false,
              "payondeposit": true,
              "dontpayondeposit": false
            }
          ]

### Add a new Extra to an OwnerPaymentTerms [POST]

The following fields should be provided in the POST array

* ```extraid``` The Id of the Extra
* ```takefromdeposit``` Indicates that the price of the extra should be taken from the deposit amount
                        before it is used to calculate the owner payment

+ Response 201

    + Headers

            Location: http://plato.apiary.io/v2/ownerpaymentterms/1/extra/2

## OwnerPaymentTerms Extra Detail [/v2/ownerpaymentterms/{id}/extra/{id2}]

+ Parameters

    + id (required, integer, `6`) ... The id of the OwnerPaymentTerms
    + id2 (required, integer, `2`) ... The id of the OwnerPaymentTermsExtra

### Gets the details of an OwnerPaymentTerms Extra [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "extra": {
              "id": 10,
              "extracode": "CCC",
              "extratype": "Booking",
              "description": "Credit Card Charge",
              "brandings": [
                "/v2/branding/3",
                "/v2/branding/1"
              ]
            },
            "takefromdeposit": false,
            "addtodepositpaid": false,
            "subtractfromdepositpaid": false,
            "payondeposit": true,
            "dontpayondeposit": false
          }

### Update an OwnerPaymentTerms Extra [PUT]

+ Request (application/x-www-form-urlencoded)

        takefromdeposit=false

+ Response 204

### Deletes a OwnerPaymentTerms Extra [DELETE]

+ Response 204




## Property Party Size Price Index [/v2/property/{id}/branding/{id2}/price/{id3}/partysizeprice]
property/1/branding/1/price/13/partysizeprice

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBranding
    + id3 (required, integer, `13`) ... The id of the Price

### Get all Party Size Prices for a Price [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "partysizepricing": {
                "id": 1,
                "description": "Parties of 1 to 2",
                "partysizefrom": 1,
                "partysizeto": 2,
                "type": "Fixed"
              },
              "price": 425,
              "discount": 75,
              "percentage": 15,
              "type": "Fixed",
              "pricetypes": [
                {
                  "id": 1,
                  "pricetype": "1D",
                  "pricingperiod": "Week",
                  "description": "1 day break",
                  "periods": 1,
                  "additional": false
                },
                {
                  "id": 2,
                  "pricetype": "2D",
                  "pricingperiod": "Week",
                  "description": "2 day break",
                  "periods": 2,
                  "additional": false
                },
                {
                  "id": 3,
                  "pricetype": "3D",
                  "pricingperiod": "Week",
                  "description": "3 day break",
                  "periods": 3,
                  "additional": false
                },
                {
                  "id": 4,
                  "pricetype": "4D",
                  "pricingperiod": "Week",
                  "description": "4 day break",
                  "periods": 4,
                  "additional": false
                },
                {
                  "id": 5,
                  "pricetype": "5D",
                  "pricingperiod": "Week",
                  "description": "5 day break",
                  "periods": 5,
                  "additional": false
                },
                {
                  "id": 6,
                  "pricetype": "6D",
                  "pricingperiod": "Week",
                  "description": "6 day break",
                  "periods": 6,
                  "additional": false
                },
                {
                  "id": 8,
                  "pricetype": "1P",
                  "pricingperiod": "Week",
                  "description": "1 additional day",
                  "periods": 1,
                  "additional": true
                },
                {
                  "id": 9,
                  "pricetype": "2P",
                  "pricingperiod": "Week",
                  "description": "2 additional days",
                  "periods": 2,
                  "additional": true
                },
                {
                  "id": 10,
                  "pricetype": "3P",
                  "pricingperiod": "Week",
                  "description": "3 additional days",
                  "periods": 3,
                  "additional": true
                },
                {
                  "id": 11,
                  "pricetype": "4P",
                  "pricingperiod": "Week",
                  "description": "4 additional days",
                  "periods": 4,
                  "additional": true
                },
                {
                  "id": 12,
                  "pricetype": "5P",
                  "pricingperiod": "Week",
                  "description": "5 additional days",
                  "periods": 5,
                  "additional": true
                },
                {
                  "id": 13,
                  "pricetype": "6P",
                  "pricingperiod": "Week",
                  "description": "6 additional days",
                  "periods": 6,
                  "additional": true
                }
              ],
              "useasbase": true
            },
            {
              "id": 2,
              "partysizepricing": {
                "id": 2,
                "description": "Parties of 16 to 20",
                "partysizefrom": 16,
                "partysizeto": 20,
                "type": "Fixed"
              },
              "price": 440,
              "discount": 60,
              "percentage": 12,
              "type": "Percentage",
              "pricetypes": [
                {
                  "id": 1,
                  "pricetype": "1D",
                  "pricingperiod": "Week",
                  "description": "1 day break",
                  "periods": 1,
                  "additional": false
                },
                {
                  "id": 2,
                  "pricetype": "2D",
                  "pricingperiod": "Week",
                  "description": "2 day break",
                  "periods": 2,
                  "additional": false
                },
                {
                  "id": 3,
                  "pricetype": "3D",
                  "pricingperiod": "Week",
                  "description": "3 day break",
                  "periods": 3,
                  "additional": false
                },
                {
                  "id": 4,
                  "pricetype": "4D",
                  "pricingperiod": "Week",
                  "description": "4 day break",
                  "periods": 4,
                  "additional": false
                },
                {
                  "id": 5,
                  "pricetype": "5D",
                  "pricingperiod": "Week",
                  "description": "5 day break",
                  "periods": 5,
                  "additional": false
                },
                {
                  "id": 6,
                  "pricetype": "6D",
                  "pricingperiod": "Week",
                  "description": "6 day break",
                  "periods": 6,
                  "additional": false
                },
                {
                  "id": 8,
                  "pricetype": "1P",
                  "pricingperiod": "Week",
                  "description": "1 additional day",
                  "periods": 1,
                  "additional": true
                },
                {
                  "id": 9,
                  "pricetype": "2P",
                  "pricingperiod": "Week",
                  "description": "2 additional days",
                  "periods": 2,
                  "additional": true
                },
                {
                  "id": 10,
                  "pricetype": "3P",
                  "pricingperiod": "Week",
                  "description": "3 additional days",
                  "periods": 3,
                  "additional": true
                },
                {
                  "id": 11,
                  "pricetype": "4P",
                  "pricingperiod": "Week",
                  "description": "4 additional days",
                  "periods": 4,
                  "additional": true
                },
                {
                  "id": 12,
                  "pricetype": "5P",
                  "pricingperiod": "Week",
                  "description": "5 additional days",
                  "periods": 5,
                  "additional": true
                },
                {
                  "id": 13,
                  "pricetype": "6P",
                  "pricingperiod": "Week",
                  "description": "6 additional days",
                  "periods": 6,
                  "additional": true
                }
              ],
              "useasbase": true
            },
            {
              "id": 3,
              "partysizepricing": {
                "id": 3,
                "description": "Parties of 21 to 25",
                "partysizefrom": 21,
                "partysizeto": 25,
                "type": "Fixed"
              },
              "price": 465,
              "discount": 35,
              "percentage": 7,
              "type": "Amount",
              "pricetypes": [
                {
                  "id": 1,
                  "pricetype": "1D",
                  "pricingperiod": "Week",
                  "description": "1 day break",
                  "periods": 1,
                  "additional": false
                },
                {
                  "id": 2,
                  "pricetype": "2D",
                  "pricingperiod": "Week",
                  "description": "2 day break",
                  "periods": 2,
                  "additional": false
                },
                {
                  "id": 3,
                  "pricetype": "3D",
                  "pricingperiod": "Week",
                  "description": "3 day break",
                  "periods": 3,
                  "additional": false
                },
                {
                  "id": 4,
                  "pricetype": "4D",
                  "pricingperiod": "Week",
                  "description": "4 day break",
                  "periods": 4,
                  "additional": false
                },
                {
                  "id": 5,
                  "pricetype": "5D",
                  "pricingperiod": "Week",
                  "description": "5 day break",
                  "periods": 5,
                  "additional": false
                },
                {
                  "id": 6,
                  "pricetype": "6D",
                  "pricingperiod": "Week",
                  "description": "6 day break",
                  "periods": 6,
                  "additional": false
                },
                {
                  "id": 8,
                  "pricetype": "1P",
                  "pricingperiod": "Week",
                  "description": "1 additional day",
                  "periods": 1,
                  "additional": true
                },
                {
                  "id": 9,
                  "pricetype": "2P",
                  "pricingperiod": "Week",
                  "description": "2 additional days",
                  "periods": 2,
                  "additional": true
                },
                {
                  "id": 10,
                  "pricetype": "3P",
                  "pricingperiod": "Week",
                  "description": "3 additional days",
                  "periods": 3,
                  "additional": true
                },
                {
                  "id": 11,
                  "pricetype": "4P",
                  "pricingperiod": "Week",
                  "description": "4 additional days",
                  "periods": 4,
                  "additional": true
                },
                {
                  "id": 12,
                  "pricetype": "5P",
                  "pricingperiod": "Week",
                  "description": "5 additional days",
                  "periods": 5,
                  "additional": true
                },
                {
                  "id": 13,
                  "pricetype": "6P",
                  "pricingperiod": "Week",
                  "description": "6 additional days",
                  "periods": 6,
                  "additional": true
                }
              ],
              "useasbase": true
            }
          ]

### Add a new Party Size Price to a Price [POST]

The following fields should be provided in the POST array

* ```partysizepricingid``` The id of the party size pricing the price applies to
* ```price``` The price
* ```partysizepricetype``` The type of Party Size Price: Fixed, Amount or Percentage (optional, defaults to the PartySizePricing value, or Fixed)
* ```useasbase``` Whether the Party Size Price should be used to caluclate prices for other price types, e.g. 1-6 days. (optional, default=true)
If 'useasbase'=true, and PartySizePriceTypeBrandings exist, then the PartySizePrice only applies to those PriceTypeBrandings.
If 'useasbase'=false, then PartySizePriceTypeBrandings should not exist.

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/branding/1/price/1/partysizeprice/1

## Property Party Size Price Detail [/v2/property/{id}/branding/{id2}/price/{id3}/partysizeprice/{id4}]
+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBranding
    + id3 (required, integer, `13`) ... The id of the Price
    + id4 (required, integer, `2`) ... The id of the PartySizePrice

### Gets the details of a Party Size Price [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "partysizepricing": {
              "id": 2,
              "description": "Parties of 16 to 20",
              "partysizefrom": 16,
              "partysizeto": 20,
              "type": "Fixed"
            },
            "price": 440,
            "discount": 60,
            "percentage": 12,
            "type": "Percentage",
            "pricetypes": [
              {
                "id": 1,
                "pricetype": "1D",
                "pricingperiod": "Week",
                "description": "1 day break",
                "periods": 1,
                "additional": false
              },
              {
                "id": 2,
                "pricetype": "2D",
                "pricingperiod": "Week",
                "description": "2 day break",
                "periods": 2,
                "additional": false
              },
              {
                "id": 3,
                "pricetype": "3D",
                "pricingperiod": "Week",
                "description": "3 day break",
                "periods": 3,
                "additional": false
              },
              {
                "id": 4,
                "pricetype": "4D",
                "pricingperiod": "Week",
                "description": "4 day break",
                "periods": 4,
                "additional": false
              },
              {
                "id": 5,
                "pricetype": "5D",
                "pricingperiod": "Week",
                "description": "5 day break",
                "periods": 5,
                "additional": false
              },
              {
                "id": 6,
                "pricetype": "6D",
                "pricingperiod": "Week",
                "description": "6 day break",
                "periods": 6,
                "additional": false
              },
              {
                "id": 8,
                "pricetype": "1P",
                "pricingperiod": "Week",
                "description": "1 additional day",
                "periods": 1,
                "additional": true
              },
              {
                "id": 9,
                "pricetype": "2P",
                "pricingperiod": "Week",
                "description": "2 additional days",
                "periods": 2,
                "additional": true
              },
              {
                "id": 10,
                "pricetype": "3P",
                "pricingperiod": "Week",
                "description": "3 additional days",
                "periods": 3,
                "additional": true
              },
              {
                "id": 11,
                "pricetype": "4P",
                "pricingperiod": "Week",
                "description": "4 additional days",
                "periods": 4,
                "additional": true
              },
              {
                "id": 12,
                "pricetype": "5P",
                "pricingperiod": "Week",
                "description": "5 additional days",
                "periods": 5,
                "additional": true
              },
              {
                "id": 13,
                "pricetype": "6P",
                "pricingperiod": "Week",
                "description": "6 additional days",
                "periods": 6,
                "additional": true
              }
            ],
            "useasbase": true
          }

### Update a Party Size Price [PUT]

+ Request (application/x-www-form-urlencoded)

        price=430

+ Response 204

### Delete a Party Size Price [DELETE]

+ Response 204




## PartySizePriceType Index [/v2/partysizepricetype]
### Get all PartySizePriceType [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "partysizepricetype": "Fixed"
            },
            {
              "id": 2,
              "partysizepricetype": "Amount"
            },
            {
              "id": 3,
              "partysizepricetype": "Percentage"
            }
          ]

### Add a new PartySizePriceType [POST]

+ Response 501

## PartySizePriceType Detail [/v2/partysizepricetype/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the PartySizePriceType to get

### Gets the details of a PartySizePriceType [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "partysizepricetype": "Fixed"
        }

### Update a PartySizePriceType [PUT]

+ Response 501

### Deletes a PartySizePriceType [DELETE]

+ Response 501




## Property Branding Price PartySizePrice PriceTypeBranding Index [/v2/property/{id}/branding/{id2}/price/{id3}/partysizeprice/{id4}/pricetypebranding]
property/1/branding/1/price/16/partysizeprice/5/pricetypebranding

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBranding
    + id3 (required, integer, `16`) ... The id of the Price
    + id4 (required, integer, `6`) ... The id of the PartySizePrice

### Get all PartySizePriceTypeBrandings for a PartySizePrice [GET]

+ Response 200 (application/json)

        [
            {
              "id": 61,
              "pricetypebrandingpercentage": "/v2/pricetype/1/branding/31"
            },
            {
              "id": 62,
              "pricetypebrandingpercentage": "/v2/pricetype/2/branding/32"
            },
            {
              "id": 63,
              "pricetypebrandingpercentage": "/v2/pricetype/3/branding/33"
            },
            {
              "id": 64,
              "pricetypebrandingpercentage": "/v2/pricetype/4/branding/34"
            },
            {
              "id": 65,
              "pricetypebrandingpercentage": "/v2/pricetype/5/branding/35"
            },
            {
              "id": 66,
              "pricetypebrandingpercentage": "/v2/pricetype/6/branding/36"
            },
            {
              "id": 67,
              "pricetypebrandingpercentage": "/v2/pricetype/8/branding/37"
            },
            {
              "id": 68,
              "pricetypebrandingpercentage": "/v2/pricetype/9/branding/38"
            },
            {
              "id": 69,
              "pricetypebrandingpercentage": "/v2/pricetype/10/branding/39"
            },
            {
              "id": 70,
              "pricetypebrandingpercentage": "/v2/pricetype/11/branding/40"
            },
            {
              "id": 71,
              "pricetypebrandingpercentage": "/v2/pricetype/12/branding/41"
            },
            {
              "id": 72,
              "pricetypebrandingpercentage": "/v2/pricetype/13/branding/42"
            }
          ]

### Add a new PartySizePriceTypeBranding to a PartySizePrice [POST]

The following fields should be provided in the POST array

* ```pricetypebrandingpercentageid``` The PriceTypeBrandingPercentage id

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/branding/1/price/1/partysizeprice/1/pricetypebranding/1

## Property Branding Price PartySizePrice PriceTypeBranding Detail [/v2/property/{id}/branding/{id2}/price/{id3}/partysizeprice/{id4}/pricetypebranding/{id5}]
+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBranding
    + id3 (required, integer, `16`) ... The id of the Price
    + id4 (required, integer, `6`) ... The id of the PartySizePrice
    + id5 (required, integer, `61`) ... The id of the PartySizePriceTypeBranding

### Gets the details of a PartySizePriceTypeBranding [GET]

+ Response 200 (application/json)

        {
            "id": 61,
            "pricetypebrandingpercentage": "/v2/pricetype/1/branding/31"
          }

### Update a PartySizePriceTypeBranding [PUT]

+ Response 501

### Delete a PartySizePriceTypeBranding [DELETE]

+ Response 204




## Property Party Size Pricing Index [/v2/property/{id}/branding/{id2}/partysizepricing]
property/1/branding/1/partysizepricing

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBranding

### Get all Party Size Prices for a Price [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "description": "Parties of 1 to 2",
              "partysizefrom": 1,
              "partysizeto": 2,
              "type": "Fixed"
            },
            {
              "id": 2,
              "description": "Parties of 3 to 4",
              "partysizefrom": 3,
              "partysizeto": 4,
              "type": "Fixed"
            }
          ]

### Add a new Party Size Price to a Price [POST]

The following fields should be provided in the POST array

* ```description``` Description of the Pricing, e.g. "10% off for 4-6 people"
* ```partysizefrom``` The minimum party size the price applies to
* ```partysizeto``` The maximum party size the price applies to
* ```partysizepricetype``` The type of Party Size Price: Fixed, Amount or Percentage (optional, defaults=Fixed)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/branding/1/partysizepricing/1

## Property Party Size Pricing Detail [/v2/property/{id}/branding/{id2}/partysizepricing/{id3}]
+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBranding
    + id3 (required, integer, `2`) ... The id of the PartySizePricing

### Gets the details of a Party Size Pricing [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "description": "Parties of 3 to 4",
            "partysizefrom": 3,
            "partysizeto": 4,
            "type": "Fixed"
          }

### Update a Party Size Pricing [PUT]

+ Request (application/x-www-form-urlencoded)

        partysizeto=8

+ Response 204

### Delete a Party Size Pricing [DELETE]

+ Response 204




## Property Branding Price Index [/v2/property/{id}/branding/{id2}/price{?fromdate,todate}]

### Get all Prices for a Property Branding [GET]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBranding
    + fromdate (optional, string, `2016-05-01`) ... The first date in the period 
    + todate (optional, string, `2016-06-30`) ... The last date in the period 

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "type": "Fixed",
                "fromdate": "2016-01-01",
                "todate": "2016-12-15",
                "band": "A",
                "description": "Off peak",
                "price": 700,
                "partysizeprices": [],
                "currency": {
                    "id": 1,
                    "code": "GBP",
                    "name": "Pound Sterling",
                    "decimalplaces": 2
                },
                "pricetypebranding": {
                    "id": 150,
                    "route": "/v2/pricetype/7/branding/150",
                    "pricetype": {
                        "id": 7,
                        "pricetype": "7D",
                        "pricingperiod": "Week",
                        "description": "Week",
                        "periods": 7,
                        "additional": false
                    },
                    "saleschannel": {
                        "id": 2,
                        "saleschannel": "Brand Website",
                        "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                    },
                    "fromdate": "2016-01-01",
                    "todate": "2016-12-31",
                    "type": "Fixed",
                    "decimalplaces": 2,
                    "percentages": [
                        {
                            "id": 177,
                            "route": "/v2/pricetype/1/branding/177",
                            "pricetype": {
                                "id": 1,
                                "pricetype": "1D",
                                "pricingperiod": "Week",
                                "description": "1 day break",
                                "periods": 1,
                                "additional": false
                            },
                            "saleschannel": {
                                "id": 2,
                                "saleschannel": "Brand Website",
                                "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                            },
                            "fromdate": "2016-01-01",
                            "todate": "2016-12-31",
                            "type": "Percentage",
                            "decimalplaces": 2,
                            "percentage": 65,
                            "price": 455,
                            "partysizeprices": [],
                            "overrides": [],
                            "minimums": [],
                            "startdays": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10
                            ]
                        },
                        {
                            "id": 178,
                            "route": "/v2/pricetype/2/branding/178",
                            "pricetype": {
                                "id": 2,
                                "pricetype": "2D",
                                "pricingperiod": "Week",
                                "description": "2 day break",
                                "periods": 2,
                                "additional": false
                            },
                            "saleschannel": {
                                "id": 2,
                                "saleschannel": "Brand Website",
                                "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                            },
                            "fromdate": "2016-01-01",
                            "todate": "2016-12-31",
                            "type": "Percentage",
                            "decimalplaces": 2,
                            "percentage": 70,
                            "price": 490,
                            "partysizeprices": [],
                            "overrides": [],
                            "minimums": [],
                            "startdays": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10
                            ]
                        },
                        {
                            "id": 179,
                            "route": "/v2/pricetype/3/branding/179",
                            "pricetype": {
                                "id": 3,
                                "pricetype": "3D",
                                "pricingperiod": "Week",
                                "description": "3 day break",
                                "periods": 3,
                                "additional": false
                            },
                            "saleschannel": {
                                "id": 2,
                                "saleschannel": "Brand Website",
                                "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                            },
                            "fromdate": "2016-01-01",
                            "todate": "2016-12-31",
                            "type": "Percentage",
                            "decimalplaces": 0,
                            "percentage": 47.474,
                            "price": 332,
                            "partysizeprices": [],
                            "overrides": [],
                            "minimums": [],
                            "startdays": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10
                            ]
                        },
                        {
                            "id": 180,
                            "route": "/v2/pricetype/4/branding/180",
                            "pricetype": {
                                "id": 4,
                                "pricetype": "4D",
                                "pricingperiod": "Week",
                                "description": "4 day break",
                                "periods": 4,
                                "additional": false
                            },
                            "saleschannel": {
                                "id": 2,
                                "saleschannel": "Brand Website",
                                "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                            },
                            "fromdate": "2016-01-01",
                            "todate": "2016-12-31",
                            "type": "Percentage",
                            "decimalplaces": 2,
                            "percentage": 85,
                            "price": 595,
                            "partysizeprices": [],
                            "overrides": [],
                            "minimums": [],
                            "startdays": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10
                            ]
                        },
                        {
                            "id": 181,
                            "route": "/v2/pricetype/5/branding/181",
                            "pricetype": {
                                "id": 5,
                                "pricetype": "5D",
                                "pricingperiod": "Week",
                                "description": "5 day break",
                                "periods": 5,
                                "additional": false
                            },
                            "saleschannel": {
                                "id": 2,
                                "saleschannel": "Brand Website",
                                "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                            },
                            "fromdate": "2016-01-01",
                            "todate": "2016-12-31",
                            "type": "Percentage",
                            "decimalplaces": 2,
                            "percentage": 90,
                            "price": 630,
                            "partysizeprices": [],
                            "overrides": [],
                            "minimums": [],
                            "startdays": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10
                            ]
                        },
                        {
                            "id": 182,
                            "route": "/v2/pricetype/6/branding/182",
                            "pricetype": {
                                "id": 6,
                                "pricetype": "6D",
                                "pricingperiod": "Week",
                                "description": "6 day break",
                                "periods": 6,
                                "additional": false
                            },
                            "saleschannel": {
                                "id": 2,
                                "saleschannel": "Brand Website",
                                "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                            },
                            "fromdate": "2016-01-01",
                            "todate": "2016-12-31",
                            "type": "Percentage",
                            "decimalplaces": 2,
                            "percentage": 100,
                            "price": 700,
                            "partysizeprices": [],
                            "overrides": [],
                            "minimums": [],
                            "startdays": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10
                            ]
                        },
                        {
                            "id": 183,
                            "route": "/v2/pricetype/8/branding/183",
                            "pricetype": {
                                "id": 8,
                                "pricetype": "1P",
                                "pricingperiod": "Week",
                                "description": "1 additional day",
                                "periods": 1,
                                "additional": true
                            },
                            "saleschannel": {
                                "id": 2,
                                "saleschannel": "Brand Website",
                                "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                            },
                            "fromdate": "2016-01-01",
                            "todate": "2016-12-31",
                            "type": "Percentage",
                            "decimalplaces": 2,
                            "percentage": 14.2857,
                            "price": 100,
                            "partysizeprices": [],
                            "overrides": [],
                            "minimums": [],
                            "startdays": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10
                            ]
                        },
                        {
                            "id": 184,
                            "route": "/v2/pricetype/9/branding/184",
                            "pricetype": {
                                "id": 9,
                                "pricetype": "2P",
                                "pricingperiod": "Week",
                                "description": "2 additional days",
                                "periods": 2,
                                "additional": true
                            },
                            "saleschannel": {
                                "id": 2,
                                "saleschannel": "Brand Website",
                                "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                            },
                            "fromdate": "2016-01-01",
                            "todate": "2016-12-31",
                            "type": "Percentage",
                            "decimalplaces": 2,
                            "percentage": 28.5714,
                            "price": 200,
                            "partysizeprices": [],
                            "overrides": [],
                            "minimums": [],
                            "startdays": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10
                            ]
                        },
                        {
                            "id": 185,
                            "route": "/v2/pricetype/10/branding/185",
                            "pricetype": {
                                "id": 10,
                                "pricetype": "3P",
                                "pricingperiod": "Week",
                                "description": "3 additional days",
                                "periods": 3,
                                "additional": true
                            },
                            "saleschannel": {
                                "id": 2,
                                "saleschannel": "Brand Website",
                                "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                            },
                            "fromdate": "2016-01-01",
                            "todate": "2016-12-31",
                            "type": "Percentage",
                            "decimalplaces": 2,
                            "percentage": 42.8571,
                            "price": 300,
                            "partysizeprices": [],
                            "overrides": [],
                            "minimums": [],
                            "startdays": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10
                            ]
                        },
                        {
                            "id": 186,
                            "route": "/v2/pricetype/11/branding/186",
                            "pricetype": {
                                "id": 11,
                                "pricetype": "4P",
                                "pricingperiod": "Week",
                                "description": "4 additional days",
                                "periods": 4,
                                "additional": true
                            },
                            "saleschannel": {
                                "id": 2,
                                "saleschannel": "Brand Website",
                                "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                            },
                            "fromdate": "2016-01-01",
                            "todate": "2016-12-31",
                            "type": "Percentage",
                            "decimalplaces": 2,
                            "percentage": 57.1429,
                            "price": 400,
                            "partysizeprices": [],
                            "overrides": [],
                            "minimums": [],
                            "startdays": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10
                            ]
                        },
                        {
                            "id": 187,
                            "route": "/v2/pricetype/12/branding/187",
                            "pricetype": {
                                "id": 12,
                                "pricetype": "5P",
                                "pricingperiod": "Week",
                                "description": "5 additional days",
                                "periods": 5,
                                "additional": true
                            },
                            "saleschannel": {
                                "id": 2,
                                "saleschannel": "Brand Website",
                                "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                            },
                            "fromdate": "2016-01-01",
                            "todate": "2016-12-31",
                            "type": "Percentage",
                            "decimalplaces": 2,
                            "percentage": 71.4286,
                            "price": 500,
                            "partysizeprices": [],
                            "overrides": [],
                            "minimums": [],
                            "startdays": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10
                            ]
                        },
                        {
                            "id": 188,
                            "route": "/v2/pricetype/13/branding/188",
                            "pricetype": {
                                "id": 13,
                                "pricetype": "6P",
                                "pricingperiod": "Week",
                                "description": "6 additional days",
                                "periods": 6,
                                "additional": true
                            },
                            "saleschannel": {
                                "id": 2,
                                "saleschannel": "Brand Website",
                                "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                            },
                            "fromdate": "2016-01-01",
                            "todate": "2016-12-31",
                            "type": "Percentage",
                            "decimalplaces": 2,
                            "percentage": 85.7143,
                            "price": 600,
                            "partysizeprices": [],
                            "overrides": [],
                            "minimums": [],
                            "startdays": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10
                            ]
                        }
                    ],
                    "startdays": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                }
            }
        ]

### Add a new Price to a Property Branding [POST]

The following fields should be provided in the POST array

* ```type``` Fixed, Override or Minimum
* ```fromdate``` The date the price is applicable from
* ```todate``` The date the price is applicable to
* ```price``` The price
* ```currencycode``` The currency the price is in
* ```pricetypebrandingid``` The PriceType Branding the Price relates to
* ```band``` The price band A, B, C etc (mainly for legacy purposes) (optional, default  = '')
* ```description``` A text description of the period, e.g. 'Christmas', 'Peak' (optional, default  = '')

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBranding 

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/branding/1/price

## Property Branding Price Detail [/v2/property/{id}/branding/{id2}/price/{id3}]
+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBranding 
    + id3 (required, integer, `14`) ... The id of the Price to get

### Gets the details of a Property Branding Price [GET]

+ Response 200 (application/json)

        {
            "id": 14,
            "type": "Fixed",
            "fromdate": "2026-02-15",
            "todate": "2026-03-15",
            "band": "",
            "description": "",
            "price": 300,
            "partysizeprices": [
                {
                    "id": 2,
                    "partysizepricing": {
                        "id": 1,
                        "description": "Parties of 1 to 2",
                        "partysizefrom": 1,
                        "partysizeto": 2
                    },
                    "price": 225
                },
                {
                    "id": 3,
                    "partysizepricing": {
                        "id": 2,
                        "description": "Parties of 3 to 4",
                        "partysizefrom": 3,
                        "partysizeto": 4
                    },
                    "price": 244
                }
            ],
            "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
            },
            "pricetypebranding": {
                "id": 3,
                "route": "/v2/pricetype/7/branding/3",
                "pricetype": {
                    "id": 7,
                    "pricetype": "7D",
                    "pricingperiod": "Week",
                    "description": "Week",
                    "periods": 7,
                    "additional": false
                },
                "saleschannel": {
                    "id": 2,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                },
                "fromdate": "2025-01-01",
                "todate": "2026-12-31",
                "type": "Fixed",
                "decimalplaces": 2,
                "percentages": [
                    {
                        "id": 30,
                        "route": "/v2/pricetype/1/branding/30",
                        "pricetype": {
                            "id": 1,
                            "pricetype": "1D",
                            "pricingperiod": "Week",
                            "description": "1 day break",
                            "periods": 1,
                            "additional": false
                        },
                        "saleschannel": {
                            "id": 2,
                            "saleschannel": "Brand Website",
                            "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                        },
                        "fromdate": "2025-01-01",
                        "todate": "2026-12-31",
                        "type": "Percentage",
                        "decimalplaces": 2,
                        "percentage": 65,
                        "price": 195,
                        "partysizeprices": [
                            {
                                "id": 2,
                                "partysizepricing": {
                                    "id": 1,
                                    "description": "Parties of 1 to 2",
                                    "partysizefrom": 1,
                                    "partysizeto": 2
                                },
                                "price": 146.25
                            },
                            {
                                "id": 3,
                                "partysizepricing": {
                                    "id": 2,
                                    "description": "Parties of 3 to 4",
                                    "partysizefrom": 3,
                                    "partysizeto": 4
                                },
                                "price": 158.6
                            }
                        ],
                        "overrides": [],
                        "minimums": [
                            {
                                "id": 33,
                                "type": "Minimum",
                                "fromdate": "2025-05-24",
                                "todate": "2025-06-07",
                                "band": "",
                                "description": "",
                                "price": 300,
                                "partysizeprices": [],
                                "currency": {
                                    "id": 1,
                                    "code": "GBP",
                                    "name": "Pound Sterling",
                                    "decimalplaces": 2
                                }
                            }
                        ],
                        "startdays": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10
                        ]
                    },
                    {
                        "id": 31,
                        "route": "/v2/pricetype/2/branding/31",
                        "pricetype": {
                            "id": 2,
                            "pricetype": "2D",
                            "pricingperiod": "Week",
                            "description": "2 day break",
                            "periods": 2,
                            "additional": false
                        },
                        "saleschannel": {
                            "id": 2,
                            "saleschannel": "Brand Website",
                            "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                        },
                        "fromdate": "2025-01-01",
                        "todate": "2026-12-31",
                        "type": "Percentage",
                        "decimalplaces": 2,
                        "percentage": 70,
                        "price": 210,
                        "partysizeprices": [
                            {
                                "id": 2,
                                "partysizepricing": {
                                    "id": 1,
                                    "description": "Parties of 1 to 2",
                                    "partysizefrom": 1,
                                    "partysizeto": 2
                                },
                                "price": 157.5
                            },
                            {
                                "id": 3,
                                "partysizepricing": {
                                    "id": 2,
                                    "description": "Parties of 3 to 4",
                                    "partysizefrom": 3,
                                    "partysizeto": 4
                                },
                                "price": 170.8
                            }
                        ],
                        "overrides": [],
                        "minimums": [
                            {
                                "id": 34,
                                "type": "Minimum",
                                "fromdate": "2025-05-24",
                                "todate": "2025-06-07",
                                "band": "",
                                "description": "",
                                "price": 300,
                                "partysizeprices": [],
                                "currency": {
                                    "id": 1,
                                    "code": "GBP",
                                    "name": "Pound Sterling",
                                    "decimalplaces": 2
                                }
                            }
                        ],
                        "startdays": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10
                        ]
                    },
                    {
                        "id": 32,
                        "route": "/v2/pricetype/3/branding/32",
                        "pricetype": {
                            "id": 3,
                            "pricetype": "3D",
                            "pricingperiod": "Week",
                            "description": "3 day break",
                            "periods": 3,
                            "additional": false
                        },
                        "saleschannel": {
                            "id": 2,
                            "saleschannel": "Brand Website",
                            "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                        },
                        "fromdate": "2025-01-01",
                        "todate": "2026-12-31",
                        "type": "Percentage",
                        "decimalplaces": 0,
                        "percentage": 47.474,
                        "price": 142,
                        "partysizeprices": [
                            {
                                "id": 2,
                                "partysizepricing": {
                                    "id": 1,
                                    "description": "Parties of 1 to 2",
                                    "partysizefrom": 1,
                                    "partysizeto": 2
                                },
                                "price": 107
                            },
                            {
                                "id": 3,
                                "partysizepricing": {
                                    "id": 2,
                                    "description": "Parties of 3 to 4",
                                    "partysizefrom": 3,
                                    "partysizeto": 4
                                },
                                "price": 116
                            }
                        ],
                        "overrides": [],
                        "minimums": [],
                        "startdays": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10
                        ]
                    },
                    {
                        "id": 33,
                        "route": "/v2/pricetype/4/branding/33",
                        "pricetype": {
                            "id": 4,
                            "pricetype": "4D",
                            "pricingperiod": "Week",
                            "description": "4 day break",
                            "periods": 4,
                            "additional": false
                        },
                        "saleschannel": {
                            "id": 2,
                            "saleschannel": "Brand Website",
                            "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                        },
                        "fromdate": "2025-01-01",
                        "todate": "2026-12-31",
                        "type": "Percentage",
                        "decimalplaces": 2,
                        "percentage": 85,
                        "price": 255,
                        "partysizeprices": [
                            {
                                "id": 2,
                                "partysizepricing": {
                                    "id": 1,
                                    "description": "Parties of 1 to 2",
                                    "partysizefrom": 1,
                                    "partysizeto": 2
                                },
                                "price": 191.25
                            },
                            {
                                "id": 3,
                                "partysizepricing": {
                                    "id": 2,
                                    "description": "Parties of 3 to 4",
                                    "partysizefrom": 3,
                                    "partysizeto": 4
                                },
                                "price": 207.4
                            }
                        ],
                        "overrides": [
                            {
                                "id": 32,
                                "type": "Override",
                                "fromdate": "2025-05-24",
                                "todate": "2025-06-07",
                                "band": "",
                                "description": "",
                                "price": 399,
                                "partysizeprices": [],
                                "currency": {
                                    "id": 1,
                                    "code": "GBP",
                                    "name": "Pound Sterling",
                                    "decimalplaces": 2
                                }
                            }
                        ],
                        "minimums": [],
                        "startdays": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10
                        ]
                    },
                    {
                        "id": 34,
                        "route": "/v2/pricetype/5/branding/34",
                        "pricetype": {
                            "id": 5,
                            "pricetype": "5D",
                            "pricingperiod": "Week",
                            "description": "5 day break",
                            "periods": 5,
                            "additional": false
                        },
                        "saleschannel": {
                            "id": 2,
                            "saleschannel": "Brand Website",
                            "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                        },
                        "fromdate": "2025-01-01",
                        "todate": "2026-12-31",
                        "type": "Percentage",
                        "decimalplaces": 2,
                        "percentage": 90,
                        "price": 270,
                        "partysizeprices": [
                            {
                                "id": 2,
                                "partysizepricing": {
                                    "id": 1,
                                    "description": "Parties of 1 to 2",
                                    "partysizefrom": 1,
                                    "partysizeto": 2
                                },
                                "price": 202.5
                            },
                            {
                                "id": 3,
                                "partysizepricing": {
                                    "id": 2,
                                    "description": "Parties of 3 to 4",
                                    "partysizefrom": 3,
                                    "partysizeto": 4
                                },
                                "price": 219.6
                            }
                        ],
                        "overrides": [],
                        "minimums": [],
                        "startdays": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10
                        ]
                    },
                    {
                        "id": 35,
                        "route": "/v2/pricetype/6/branding/35",
                        "pricetype": {
                            "id": 6,
                            "pricetype": "6D",
                            "pricingperiod": "Week",
                            "description": "6 day break",
                            "periods": 6,
                            "additional": false
                        },
                        "saleschannel": {
                            "id": 2,
                            "saleschannel": "Brand Website",
                            "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                        },
                        "fromdate": "2025-01-01",
                        "todate": "2026-12-31",
                        "type": "Percentage",
                        "decimalplaces": 2,
                        "percentage": 100,
                        "price": 300,
                        "partysizeprices": [
                            {
                                "id": 2,
                                "partysizepricing": {
                                    "id": 1,
                                    "description": "Parties of 1 to 2",
                                    "partysizefrom": 1,
                                    "partysizeto": 2
                                },
                                "price": 225
                            },
                            {
                                "id": 3,
                                "partysizepricing": {
                                    "id": 2,
                                    "description": "Parties of 3 to 4",
                                    "partysizefrom": 3,
                                    "partysizeto": 4
                                },
                                "price": 244
                            }
                        ],
                        "overrides": [],
                        "minimums": [],
                        "startdays": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10
                        ]
                    },
                    {
                        "id": 36,
                        "route": "/v2/pricetype/8/branding/36",
                        "pricetype": {
                            "id": 8,
                            "pricetype": "1P",
                            "pricingperiod": "Week",
                            "description": "1 additional day",
                            "periods": 1,
                            "additional": true
                        },
                        "saleschannel": {
                            "id": 2,
                            "saleschannel": "Brand Website",
                            "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                        },
                        "fromdate": "2025-01-01",
                        "todate": "2026-12-31",
                        "type": "Percentage",
                        "decimalplaces": 2,
                        "percentage": 14.2857,
                        "price": 42.86,
                        "partysizeprices": [
                            {
                                "id": 2,
                                "partysizepricing": {
                                    "id": 1,
                                    "description": "Parties of 1 to 2",
                                    "partysizefrom": 1,
                                    "partysizeto": 2
                                },
                                "price": 32.14
                            },
                            {
                                "id": 3,
                                "partysizepricing": {
                                    "id": 2,
                                    "description": "Parties of 3 to 4",
                                    "partysizefrom": 3,
                                    "partysizeto": 4
                                },
                                "price": 34.86
                            }
                        ],
                        "overrides": [],
                        "minimums": [],
                        "startdays": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10
                        ]
                    },
                    {
                        "id": 37,
                        "route": "/v2/pricetype/9/branding/37",
                        "pricetype": {
                            "id": 9,
                            "pricetype": "2P",
                            "pricingperiod": "Week",
                            "description": "2 additional days",
                            "periods": 2,
                            "additional": true
                        },
                        "saleschannel": {
                            "id": 2,
                            "saleschannel": "Brand Website",
                            "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                        },
                        "fromdate": "2025-01-01",
                        "todate": "2026-12-31",
                        "type": "Percentage",
                        "decimalplaces": 2,
                        "percentage": 28.5714,
                        "price": 85.71,
                        "partysizeprices": [
                            {
                                "id": 2,
                                "partysizepricing": {
                                    "id": 1,
                                    "description": "Parties of 1 to 2",
                                    "partysizefrom": 1,
                                    "partysizeto": 2
                                },
                                "price": 64.29
                            },
                            {
                                "id": 3,
                                "partysizepricing": {
                                    "id": 2,
                                    "description": "Parties of 3 to 4",
                                    "partysizefrom": 3,
                                    "partysizeto": 4
                                },
                                "price": 69.71
                            }
                        ],
                        "overrides": [],
                        "minimums": [],
                        "startdays": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10
                        ]
                    },
                    {
                        "id": 38,
                        "route": "/v2/pricetype/10/branding/38",
                        "pricetype": {
                            "id": 10,
                            "pricetype": "3P",
                            "pricingperiod": "Week",
                            "description": "3 additional days",
                            "periods": 3,
                            "additional": true
                        },
                        "saleschannel": {
                            "id": 2,
                            "saleschannel": "Brand Website",
                            "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                        },
                        "fromdate": "2025-01-01",
                        "todate": "2026-12-31",
                        "type": "Percentage",
                        "decimalplaces": 2,
                        "percentage": 42.8571,
                        "price": 128.57,
                        "partysizeprices": [
                            {
                                "id": 2,
                                "partysizepricing": {
                                    "id": 1,
                                    "description": "Parties of 1 to 2",
                                    "partysizefrom": 1,
                                    "partysizeto": 2
                                },
                                "price": 96.43
                            },
                            {
                                "id": 3,
                                "partysizepricing": {
                                    "id": 2,
                                    "description": "Parties of 3 to 4",
                                    "partysizefrom": 3,
                                    "partysizeto": 4
                                },
                                "price": 104.57
                            }
                        ],
                        "overrides": [],
                        "minimums": [],
                        "startdays": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10
                        ]
                    },
                    {
                        "id": 39,
                        "route": "/v2/pricetype/11/branding/39",
                        "pricetype": {
                            "id": 11,
                            "pricetype": "4P",
                            "pricingperiod": "Week",
                            "description": "4 additional days",
                            "periods": 4,
                            "additional": true
                        },
                        "saleschannel": {
                            "id": 2,
                            "saleschannel": "Brand Website",
                            "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                        },
                        "fromdate": "2025-01-01",
                        "todate": "2026-12-31",
                        "type": "Percentage",
                        "decimalplaces": 2,
                        "percentage": 57.1429,
                        "price": 171.43,
                        "partysizeprices": [
                            {
                                "id": 2,
                                "partysizepricing": {
                                    "id": 1,
                                    "description": "Parties of 1 to 2",
                                    "partysizefrom": 1,
                                    "partysizeto": 2
                                },
                                "price": 128.57
                            },
                            {
                                "id": 3,
                                "partysizepricing": {
                                    "id": 2,
                                    "description": "Parties of 3 to 4",
                                    "partysizefrom": 3,
                                    "partysizeto": 4
                                },
                                "price": 139.43
                            }
                        ],
                        "overrides": [],
                        "minimums": [],
                        "startdays": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10
                        ]
                    },
                    {
                        "id": 40,
                        "route": "/v2/pricetype/12/branding/40",
                        "pricetype": {
                            "id": 12,
                            "pricetype": "5P",
                            "pricingperiod": "Week",
                            "description": "5 additional days",
                            "periods": 5,
                            "additional": true
                        },
                        "saleschannel": {
                            "id": 2,
                            "saleschannel": "Brand Website",
                            "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                        },
                        "fromdate": "2025-01-01",
                        "todate": "2026-12-31",
                        "type": "Percentage",
                        "decimalplaces": 2,
                        "percentage": 71.4286,
                        "price": 214.29,
                        "partysizeprices": [
                            {
                                "id": 2,
                                "partysizepricing": {
                                    "id": 1,
                                    "description": "Parties of 1 to 2",
                                    "partysizefrom": 1,
                                    "partysizeto": 2
                                },
                                "price": 160.71
                            },
                            {
                                "id": 3,
                                "partysizepricing": {
                                    "id": 2,
                                    "description": "Parties of 3 to 4",
                                    "partysizefrom": 3,
                                    "partysizeto": 4
                                },
                                "price": 174.29
                            }
                        ],
                        "overrides": [],
                        "minimums": [],
                        "startdays": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10
                        ]
                    },
                    {
                        "id": 41,
                        "route": "/v2/pricetype/13/branding/41",
                        "pricetype": {
                            "id": 13,
                            "pricetype": "6P",
                            "pricingperiod": "Week",
                            "description": "6 additional days",
                            "periods": 6,
                            "additional": true
                        },
                        "saleschannel": {
                            "id": 2,
                            "saleschannel": "Brand Website",
                            "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                        },
                        "fromdate": "2025-01-01",
                        "todate": "2026-12-31",
                        "type": "Percentage",
                        "decimalplaces": 2,
                        "percentage": 85.7143,
                        "price": 257.14,
                        "partysizeprices": [
                            {
                                "id": 2,
                                "partysizepricing": {
                                    "id": 1,
                                    "description": "Parties of 1 to 2",
                                    "partysizefrom": 1,
                                    "partysizeto": 2
                                },
                                "price": 192.86
                            },
                            {
                                "id": 3,
                                "partysizepricing": {
                                    "id": 2,
                                    "description": "Parties of 3 to 4",
                                    "partysizefrom": 3,
                                    "partysizeto": 4
                                },
                                "price": 209.14
                            }
                        ],
                        "overrides": [],
                        "minimums": [],
                        "startdays": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10
                        ]
                    }
                ],
                "startdays": [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ]
            }
        }

### Update a Property Branding Price [PUT]

+ Request (application/x-www-form-urlencoded)

        price=430

+ Response 204

### Deletes a Property Branding Price [DELETE]

+ Response 204



## Property Attribute Index [/v2/property/{id}/attribute]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property

### Get all Attributes for a Property [GET]

+ Response 200 (application/json)

        [
          {
            "id": 4,
            "attribute": {
              "id": 1,
              "code": "ATTR001",
              "group": {
                "id": 3,
                "name": "Misc"
              },
              "name": "Pets",
              "description": "Whether pets are allowed",
              "type": "Boolean",
              "usedinavailabilitysearch": true,
              "donotmodify": false,
              "important": true,
              "extras": []
            },
            "value": false
          },
          {
            "id": 1,
            "attribute": {
              "id": 9,
              "code": "ATTR004",
              "group": {
                "id": 4,
                "name": "Location"
              },
              "name": "Distance to Pub",
              "description": "Blah blah",
              "type": "Number",
              "usedinavailabilitysearch": true,
              "donotmodify": false,
              "important": false,
              "unit": {
                "id": 2,
                "name": "m",
                "description": "Metre",
                "decimalplaces": 1
              },
              "operator": "<=",
              "minimumvalue": 0,
              "maximumvalue": 2000
            },
            "value": 1
          },
          {
            "id": 2,
            "attribute": {
              "id": 10,
              "code": "ATTR005",
              "group": {
                "id": 3,
                "name": "Misc"
              },
              "name": "Test Max Value",
              "description": "Foo",
              "type": "Number",
              "usedinavailabilitysearch": true,
              "donotmodify": false,
              "important": false,
              "unit": {
                "id": 2,
                "name": "m",
                "description": "Metre",
                "decimalplaces": 1
              },
              "operator": "<=",
              "minimumvalue": 0,
              "maximumvalue": 99999999.999999
            },
            "value": 0
          },
          {
            "id": 5,
            "attribute": {
              "id": 6,
              "code": "ATTR003",
              "group": {
                "id": 3,
                "name": "Misc"
              },
              "name": "Green Tourism Award",
              "description": "Silver",
              "type": "String",
              "usedinavailabilitysearch": false,
              "donotmodify": false,
              "important": false,
              "options": [
                {
                  "id": 1,
                  "option": "Gold",
                  "optionorder": 1
                },
                {
                  "id": 2,
                  "option": "Silver",
                  "optionorder": 2
                },
                {
                  "id": 3,
                  "option": "Bronze",
                  "optionorder": 3
                }
              ]
            },
            "value": "Gold"
          },
          {
            "id": 3,
            "attribute": {
              "id": 4,
              "code": "ATTR002",
              "group": {
                "id": 3,
                "name": "Misc"
              },
              "name": "Close to Pub",
              "description": "Blah blah",
              "type": "Hybrid",
              "usedinavailabilitysearch": true,
              "donotmodify": false,
              "important": false,
              "unit": {
                "id": 1,
                "name": "km",
                "description": "Kilometre",
                "decimalplaces": 1
              },
              "operator": "<=",
              "minimumvalue": 0,
              "maximumvalue": 10,
              "limitvalue": 2
            },
            "value": {
              "boolean": true,
              "number": 1
            }
          }
        ]

### Add a new Attribute to a Property [POST]

The following fields should be provided in the POST array

* ```attributeid``` The Id of the Attribute
* ```value``` The Value of the Attribute, in the appropriate type (for Hybrid types, a number). Optional for String attributes where an OptionId is supplied.
* ```optionid``` Valid for String attributes which have options only. The id of the AttributeOption to be used as the PropertyAttribute value.
* ```unit``` The Unit the Attribute value is in. (Number and Hybrid types only).

+ Response 201

    + Headers

            Location: http://plato.apiary.io/v2/property/1/attribute/2

## Property Attribute Detail [/v2/property/{id}/attribute/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property to get
    + id2 (required, integer, `2`) ... The id of the PropertyAttribute to get

### Gets the details of a Property Attribute [GET]

+ Response 200 (application/json)

        {
          "id": 2,
          "attribute": {
            "id": 10,
            "code": "ATTR005",
            "group": {
              "id": 3,
              "name": "Misc"
            },
            "name": "Test Max Value",
            "description": "Foo",
            "type": "Number",
            "usedinavailabilitysearch": true,
            "donotmodify": false,
            "important": false,
            "unit": {
              "id": 2,
              "name": "m",
              "description": "Metre",
              "decimalplaces": "1"
            },
            "operator": "<=",
            "minimumvalue": 0,
            "maximumvalue": 99999999.999999
          },
          "value": 0
        }

### Update a Property's Attribute [PUT]

+ Request (application/x-www-form-urlencoded)

        value=3

+ Response 204

### Deletes a Property's Attribute [DELETE]

+ Response 204




## Property Availability Index [/v2/property/{id}/availability]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property

### Get Availability for a Property [GET]

+ Response 501

### Create Availability for a property [POST]

+ Response 201

    + Headers

            Location: http://plato.apiary.io/v2/property/1




## Property Booking Index [/v2/property/{id}/booking{?fromdate,todate}]
property/1/booking?fromdate=2016-07-01&todate=2016-10-09

+ Parameters

    + id (required, integer, `1`) ... The id of the property
    + fromdate (optional, string, `2016-07-01`) ... The first date in the period (default 1900-01-01)
    + todate (optional, string, `2016-10-09`) ... The last date in the period (default 2099-01-01)

### Get all Bookings for a Property which overlap the specified period[GET]

+ Response 200 (application/json)

        [
            {
              "id": 13,
              "bookref": "",
              "guesttype": "None",
              "property": {
                "id": 1,
                "name": "Angler Cottage",
                "details": "/v2/property/1"
              },
              "fromdate": "2016-07-03",
              "todate": "2016-07-10",
              "bookeddatetime": "2016-01-21 12:07:35",
              "cancelled": false,
              "cancelledbooking": {},
              "agencybookingtype": {
                "id": 4,
                "name": "Maintenance",
                "description": "The property cannot be let due to maintenance work being carried out"
              },
              "updated": ""
            },
            {
              "id": 2,
              "bookref": "747474",
              "guesttype": "Customer",
              "property": {
                "id": 1,
                "name": "Angler Cottage",
                "details": "/v2/property/1"
              },
              "branding": "/v2/branding/3",
              "fromdate": "2016-07-16",
              "todate": "2016-07-27",
              "bookeddatetime": "2016-04-21 14:12:04",
              "status": "Provisional",
              "cancelled": false,
              "securitydeposit": {
                "id": 2,
                "amount": 200,
                "paid": 0,
                "refunded": 0,
                "balance": 0,
                "outstanding": 200,
                "dueindate": "2016-07-02",
                "paiddate": "",
                "withheld": 10,
                "refundable": 0,
                "held": false,
                "dueoutdate": "2016-08-03",
                "refundeddate": "",
                "ownerchargecode": {
                  "id": 1,
                  "ownerchargecode": "ADM",
                  "description": "Administration Charge",
                  "vatband": {
                    "id": 2,
                    "vatband": "Standard"
                  },
                  "recharge": false
                },
                "ownerchargeamount": 28.57,
                "ownercharge": "",
                "holds": [
                  {
                    "id": 2,
                    "helddate": "2016-06-21",
                    "helduntildate": "2016-06-21",
                    "reason": "Damage to carpet",
                    "tabsuser": "/v2/tabsuser/24"
                  }
                ]
              },
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "potentialbooking": {
                "id": 2,
                "created": "2016-04-21 14:12:04",
                "type": "Enquiry",
                "expiry": "2016-04-21 14:12:04",
                "expired": true
              },
              "customers": [
                {
                  "id": 2,
                  "details": "/v2/customer/10",
                  "name": "Dobson"
                }
              ],
              "provisionalbooking": {
                "id": 2,
                "tabsuser": "/v2/tabsuser/24",
                "depositamount": "/v2/depositamount/1",
                "deposit": 200,
                "depositoverridden": false,
                "depositduedate": "2016-05-21",
                "balanceduedate": "2016-07-02",
                "commissionpercentage": "19%",
                "commissionpercentagesetby": "tabs",
                "ownerpaymentterms": "/v2/ownerpaymentterms/1"
              },
              "paymentsummary": {
                "details": "/v2/booking/2/payment",
                "booking": {
                  "paid": 0,
                  "refunded": 0,
                  "balance": 0,
                  "outstanding": 1146.5
                },
                "securitydeposit": {
                  "paid": 0,
                  "refunded": 0,
                  "balance": 0,
                  "outstanding": 200
                },
                "total": {
                  "paid": 0,
                  "refunded": 0,
                  "balance": 0,
                  "outstanding": 1346.5
                },
                "deposit": {
                  "amount": 200,
                  "due": "2016-05-21",
                  "paid": "",
                  "outstanding": 200
                },
                "balance": {
                  "amount": 946.5,
                  "due": "2016-07-02",
                  "paid": "",
                  "outstanding": 946.5
                },
                "balancedue": 1346.5
              },
              "cancelledbooking": {},
              "ownerpaymentsummary": {
                "ownerincome": 275.46,
                "ownerincometotal": 849.06,
                "agencyincome": 86.35,
                "agencyincometotal": 247.87,
                "agencyvat": 12.5,
                "agencyvattotal": 49.57
              },
              "updated": "2017-05-03 09:46:48"
            }
          ]

### Add a new booking to a Property [POST]
Implemented as /booking/{id}

+ Response 501


## Property Booking Details [/v2/property/{id}/booking/{id2}]
Implemented as /booking/{id}
+ Parameters

    + id (required, integer, `1`) ... The id of the property
    + id2 (required, integer, `1`) ... The id of the property booking

### Get a booking of a Property [GET]

+ Response 501

### Updates a booking of a Property [PUT]

+ Response 501

### Deletes a booking of a Property [DELETE]

+ Response 501




## Property Booking Brand Index [/v2/property/{id}/bookingbrand]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property

### Get all Booking Brands for a Property [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "bookingbrand": {
                "id": 3,
                "code": "NOBB",
                "name": "Norfolk Country Cottages",
                "agency": "/v2/agency/4"
              },
              "primarybookingbrand": true
            }
          ]

### Add a new Property Booking Brand [POST]
Not implemented - added via /property/{id}/branding

+ Response 501

## Property Booking Brand Detail [/v2/property/{id}/bookingbrand/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBookingBrand

### Get the details of a Property Booking Brand [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "bookingbrand": {
              "id": 3,
              "code": "NOBB",
              "name": "Norfolk Country Cottages",
              "agency": "/v2/agency/4"
            },
            "primarybookingbrand": true
          }

### Update a Property Booking Brand [PUT]
Note that 'primarybookingbrand' can only be set to True, not false

+ Request (application/x-www-form-urlencoded)

        primarybookingbrand=true

+ Response 204

### Delete a Property Booking Brand [DELETE]
Not implemented

+ Response 501



## PropertyBookingBrandInstruction Index [/v2/property/{id}/bookingbrand/{id2}/instruction]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBookingBrand to get

### Get all PropertyBookingBrandInstruction [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "fromdate": "2025-01-01",
                "todate": "2027-01-01",
                "instructiontext": "Use a credit card. Or a debit card.",
                "html": false,
                "instructiontype": {
                    "id": 2,
                    "instructiontype": "Deposit Payment",
                    "description": "How to pay the Deposit"
                }
            },
            {
                "id": 2,
                "fromdate": "2025-01-01",
                "todate": "2027-01-01",
                "instructiontext": "Down the road and turn left",
                "html": false,
                "instructiontype": {
                    "id": 1,
                    "instructiontype": "Travel Directions",
                    "description": "Directions to the property"
                }
            }
        ]

### Add a new PropertyBookingBrandInstruction [POST]

The following fields should be provided in the POST array

* ```fromdate``` The fromdate of the instruction
* ```todate``` The todate of the instruction
* ```instructiontext``` The text of the instruction
* ```html``` Flag to say if the text is html or plain text
* ```instructiontypeid``` The id of the instruction type

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/bookingbrand/1/instruction/1

## PropertyBookingBrandInstruction Detail [/v2/property/{id}/bookingbrand/{id2}/instruction/{id3}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBookingBrand to get
    + id3 (required, integer, `1`) ... The id of the PropertyBookingBrandInstruction to get

### Gets the details of a PropertyBookingBrandInstruction [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "fromdate": "2025-01-01",
            "todate": "2027-01-01",
            "instructiontext": "Use a credit card. Or a debit card.",
            "html": false,
            "instructiontype": {
                "id": 2,
                "instructiontype": "Deposit Payment",
                "description": "How to pay the Deposit"
            }
        }

### Update a PropertyBookingBrandInstruction [PUT]

+ Request (application/x-www-form-urlencoded)

        fromdate="2015-05-01"
        todate="2015-05-01"
        instructiontext="Hello"
        html=true
        instructiontypeid=1

+ Response 204

### Delete a PropertyBookingBrandInstruction [DELETE]

+ Response 204



## Property Branding Index [/v2/property/{id}/branding]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property

### Get all Brandings for a Property [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "branding": "/v2/branding/3",
              "primarybranding": true,
              "brandinggroup": "/v2/brandinggroup/2",
              "bookingbrand": "/v2/property/1/bookingbrand/1",
              "primarybookingbrand": true,
              "marketingbrand": "/v2/property/1/marketingbrand/1",
              "status": {
                "id": 1,
                "name": "Live",
                "allowbooking": true,
                "allowoverride": false,
                "priority": 10,
                "allowbalance": true
              },
              "statusreason": "",
              "promote": false,
              "allowbookingonwebuntil": "2099-12-31",
              "showpricingonwebuntil": "2099-12-31"
            }
          ]

### Add a new Branding to a property [POST]
The following fields should be provided in the POST array

* ```brandingid``` The id of the Branding to be added
* ```status``` The Status of the Branding, e.g. 'Live' (optional, default 'New')
* ```statusreason``` The reason for changing the status (optional)
* ```promote``` Indicates whether the property should be promoted (optional, default=false)
* ```allowbookingonwebuntildate``` The latest date web bookings can be taken for this Property Branding (optional)
* ```showpricingonwebuntildate``` The latest date to show pricing on the web for this Property Branding (optional)
* ```primarybranding``` Whether the PropertyBranding is the primary PropertyBranding (optional, may be set to true only)
* ```propertynoteid``` The id of the PropertyNote to link to the PropertyBrandingStatus (optional)

+ Response 201

    + Headers

            Location: http://plato.apiary.io/v2/property/1/branding/2

## Property Branding Details [/v2/property/{id}/branding/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBranding

### Get the details of a Property Branding [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "branding": "/v2/branding/3",
            "primarybranding": true,
            "brandinggroup": "/v2/brandinggroup/2",
            "bookingbrand": "/v2/property/1/bookingbrand/1",
            "primarybookingbrand": true,
            "marketingbrand": "/v2/property/1/marketingbrand/1",
            "status": {
              "id": 1,
              "name": "Live",
              "allowbooking": true,
              "allowoverride": false,
              "priority": 10,
              "allowbalance": true
            },
            "statusreason": "",
            "promote": false,
            "allowbookingonwebuntil": "2099-12-31",
            "showpricingonwebuntil": "2099-12-31"
          }

### Update a Property Branding [PUT]
Update the Status of a Property Branding

+ Request (application/x-www-form-urlencoded)

        status='Withdrawn'

+ Response 204

### Delete a Property Branding [DELETE]

+ Response 501




## Property Branding Extra Configuration Index [/v2/property/{id}/branding/{id2}/extraconfiguration]
property/2/branding/3/extraconfiguration

+ Parameters

    + id (required, integer, `2`) ... The id of the Property
    + id2 (required, integer, `3`) ... The id of the PropertyBranding

### Get all Extra Configurations for a Property Branding [GET]

+ Response 200 (application/json)

        [
            {
              "id": 48,
              "fromdate": "2014-01-01",
              "todate": "2015-01-01",
              "compulsory": true,
              "included": false,
              "decimalplaces": 2,
              "payagency": false,
              "payowner": true,
              "visibletoowner": false,
              "visibletocustomer": true,
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "customerselectable": true,
              "priceoverrideallowed": true,
              "defaultquantity": 1,
              "quantityoverrideallowed": true,
              "maximumquantity": 1,
              "usepropertyprimarybranding": false,
              "changesbrochureprice": false,
              "type": "PropertyBrandExtraConfiguration",
              "property": "/v2/property/2",
              "route": "/v2/extra/3/branding/10/configuration/48",
              "extrabranding": 10,
              "extradetails": {
                "id": 3,
                "extracode": "HEAT",
                "extratype": "Booking",
                "description": "Heating",
                "brandings": [
                  "/v2/branding/2",
                  "/v2/branding/3",
                  "/v2/branding/4"
                ]
              }
            }
          ]

### Add a new Extra Configuration to a Property Branding [POST]

+ Response 501

## Property Branding Extra Configuration Detail [/v2/property/{id}/branding/{id2}/extraconfiguration/{id3}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBranding
    + id3 (required, integer, `1`) ... The id of the ExtraConfiguration

### Gets the details of a Property Branding Extra Configuration [GET]

+ Response 501

### Update a Property Branding Extra Configuration [PUT]

+ Response 501

### Delete a Property Branding Extra Configuration [DELETE]

+ Response 501



## Property Branding Extra Pricing Index [/v2/property/{id}/branding/{id2}/extrapricing]
+ Parameters

    + id (required, integer, `2`) ... The id of the Property
    + id2 (required, integer, `3`) ... The id of the PropertyBranding

### Get all Extra Pricing for a Property Branding [GET]

+ Response 200 (application/json)

        [
            {
              "id": 50,
              "pricingperiod": "Week",
              "property": "/v2/property/2",
              "fromdate": "2023-01-01",
              "todate": "2023-01-31",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "pricingtype": "Amount",
              "perperiod": false,
              "price": 10.2,
              "peradult": false,
              "perchild": false,
              "perinfant": false,
              "dailyprices": [],
              "route": "/v2/extra/2/branding/4/pricing/50",
              "extrabranding": 4,
              "extradetails": {
                "id": 2,
                "extracode": "CANC",
                "extratype": "Booking",
                "description": "Cancellation Scheme",
                "brandings": [
                  "/v2/branding/1",
                  "/v2/branding/3",
                  "/v2/branding/4"
                ]
              }
            },
            {
              "id": 51,
              "pricingperiod": "Week",
              "property": "/v2/property/2",
              "fromdate": "2023-01-01",
              "todate": "2023-01-31",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "pricingtype": "Percentage",
              "perperiod": true,
              "percentage": 3.49,
              "basedon": "Basic",
              "minimum": 0,
              "maximum": 9999,
              "route": "/v2/extra/2/branding/4/pricing/51",
              "extrabranding": 4,
              "extradetails": {
                "id": 2,
                "extracode": "CANC",
                "extratype": "Booking",
                "description": "Cancellation Scheme",
                "brandings": [
                  "/v2/branding/1",
                  "/v2/branding/3",
                  "/v2/branding/4"
                ]
              }
            },
            {
              "id": 52,
              "pricingperiod": "Week",
              "property": "/v2/property/2",
              "fromdate": "2023-02-01",
              "todate": "2023-02-28",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "pricingtype": "Amount",
              "perperiod": true,
              "price": 10.2,
              "peradult": false,
              "perchild": false,
              "perinfant": false,
              "dailyprices": [],
              "route": "/v2/extra/2/branding/4/pricing/52",
              "extrabranding": 4,
              "extradetails": {
                "id": 2,
                "extracode": "CANC",
                "extratype": "Booking",
                "description": "Cancellation Scheme",
                "brandings": [
                  "/v2/branding/1",
                  "/v2/branding/3",
                  "/v2/branding/4"
                ]
              }
            },
            {
              "id": 53,
              "pricingperiod": "Week",
              "property": "/v2/property/2",
              "fromdate": "2023-02-01",
              "todate": "2023-02-28",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "pricingtype": "Percentage",
              "perperiod": true,
              "percentage": 3.49,
              "basedon": "Basic",
              "minimum": 0,
              "maximum": 9999,
              "route": "/v2/extra/2/branding/4/pricing/53",
              "extrabranding": 4,
              "extradetails": {
                "id": 2,
                "extracode": "CANC",
                "extratype": "Booking",
                "description": "Cancellation Scheme",
                "brandings": [
                  "/v2/branding/1",
                  "/v2/branding/3",
                  "/v2/branding/4"
                ]
              }
            }
          ]

### Add a new Extra Pricing to a Property Branding [POST]

+ Response 501

## Property Branding Extra Pricing Detail [/v2/property/{id}/branding/{id2}/extrapricing/{id3}]
+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBranding
    + id3 (required, integer, `1`) ... The id of the ExtraPricing

### Gets the details of a Property Branding Extra Pricing [GET]

+ Response 501

### Update a Property Branding Extra Pricing [PUT]

+ Response 501

### Delete a Property Branding Extra Pricing [DELETE]

+ Response 501



## Property Branding Pricing Index [/v2/property/{id}/branding/{id2}/pricing]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBranding

### Get [GET]

+ Response 501

### Post [POST]

+ Response 501

### Modify the dates of pricing periods [PUT]

The following fields should be provided in the PUT array

* ```fromdate``` The start date of the period to be modified
* ```todate``` The end date of the period to be modified
* ```daysofweek``` The days of the week the start or end of a pricing period must fall on to be modified, a seven digiti string of Y or N characters e.g. YNNNNNN = Sunday only
* ```adddays``` The number of days to add, between -3 and +3

+ Response 204

### Delete [DELETE]

+ Response 501




## Property Branding Status Index [/v2/property/{id}/branding/{id2}/status]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBranding to get

### Get all Branding Statuses for a Property [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "status": {
                "id": 1,
                "name": "Live",
                "allowbooking": true,
                "allowoverride": false,
                "priority": 10,
                "allowbalance": true
              },
              "fromdate": "2013-10-01 00:00:00",
              "todate": "2100-01-01 00:00:00",
              "reason": [],
              "propertynote": []
            }
          ]

### Add a new Property Branding Status [POST]
Not implemented - added via /property/{id}/branding

+ Response 501

## Property Branding Status Detail [/v2/property/{id}/branding/{id2}/status/{id3}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBranding
    + id3 (required, integer, `1`) ... The id of the PropertyBrandingStatus

### Get the details of a Property Branding Status [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "status": {
              "id": 1,
              "name": "Live",
              "allowbooking": true,
              "allowoverride": false,
              "priority": 10,
              "allowbalance": true
            },
            "fromdate": "2013-10-01 00:00:00",
            "todate": "2100-01-01 00:00:00",
            "reason": [],
            "propertynote": []
          }

### Update a Property Branding Status [PUT]
Update the Reason only

+ Request (application/x-www-form-urlencoded)

        statusreasonid=4

+ Response 204

### Delete a Property Branding Status [DELETE]

+ Response 501




## Property Branding ChangeDayTemplate Index [/v2/property/{id}/branding/{id2}/changedaytemplate]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBranding

### Get all ChangeDayTemplates for a Property Branding [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "changedaytemplate": {
                    "id": 5,
                    "route": "/v2/changedaytemplate/5",
                    "type": "Property",
                    "name": "Property 1105",
                    "description": "Property level restrictions",
                    "owner": "/v2/property/1/branding/1",
                    "parent": "/v2/changedaytemplate/4",
                    "fromdate": "2025-02-20",
                    "todate": "2100-01-01",
                    "propertybrandings": [
                        "/v2/property/1/branding/1/changedaytemplate"
                    ]
                },
                "fromdate": "2025-02-20",
                "todate": "2025-12-31"
            }
        ]

### Add a new ChangeDayTemplate to a Property Branding [POST]

The following fields should be provided in the POST array

* ```changedaytemplateid``` The ChangeDayTemplate id
* ```fromdate``` The day the property starts using the template 
* ```todate``` The day the property stops using the template 

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/branding/1/changedaytemplate/1

## Property Branding ChangeDayTemplate Detail [/v2/property/{id}/branding/{id2}/changedaytemplate/{id3}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyBranding to get
    + id3 (required, integer, `1`) ... The id of the ChangeDayTemplate to get

### Gets the details of an Property Branding ChangeDayTemplate [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "changedaytemplate": {
                "id": 5,
                "route": "/v2/changedaytemplate/5",
                "type": "Property",
                "name": "Property 1105",
                "description": "Property level restrictions",
                "owner": "/v2/property/1/branding/1",
                "parent": "/v2/changedaytemplate/4",
                "fromdate": "2025-02-20",
                "todate": "2100-01-01",
                "propertybrandings": [
                    "/v2/property/1/branding/1/changedaytemplate"
                ]
            },
            "fromdate": "2025-02-20",
            "todate": "2025-12-31"
        }

### Update a Property Branding ChangeDayTemplate [PUT]

+ Request (application/x-www-form-urlencoded)

        fromdate=2015-02-03

+ Response 204

### Deletes a Property Branding ChangeDayTemplate [DELETE]

+ Response 204




## Property Comment Index [/v2/property/{id}/comment]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property

### Get all Comments for a Property [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "comment": "I liked the property because it had golden radiators.",
                "visibletoowner": true,
                "visibleonweb": true,
                "booking": null,
                "createddate": null
            }
        ]

### Add a new Comment to a Property [POST]

The following fields should be provided in the POST array

* ```comment``` The comment
* ```visibletoowner``` Whether the comment is visible to the owner
* ```visibleonweb``` Whether the comment is visible on the web
* ```bookingid``` The id of the booking (optional)
* ```createddate``` The created date (optional)

+ Response 201

    + Headers

            Location: http://plato.apiary.io/v2/property/1/comment/2

## Property Comment Detail [/v2/property/{id}/comment/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property to get
    + id2 (required, integer, `1`) ... The id of the PropertyComment to get

### Gets the details of a Property Comment [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "comment": "I liked the property because it had golden radiators.",
            "visibletoowner": true,
            "visibleonweb": true,
            "booking": null,
            "createddate": null
        }

### Update a Property's Comment [PUT]

+ Request (application/x-www-form-urlencoded)

        comment=Actually I didn't like it.

+ Response 204

### Deletes a Property's Comment [DELETE]

+ Response 204




## Property Commission Index [/v2/property/{id}/commission]
The Commission percentage to be paid on bookings starting between the dates

+ Parameters

    + id (required, integer, `1`) ... The id of the Property

### Get all Commissions for a Property [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "fromdate": "2016-01-01",
              "todate": "2019-12-31",
              "commissionpercentage": 19
            },
            {
              "id": 2,
              "fromdate": "2020-01-01",
              "todate": "2029-12-31",
              "commissionpercentage": 16.5
            }
          ]

### Add a new Commission to a property [POST]
The following fields should be provided in the POST array.

* ```fromdate``` The first date the commission rate applies
* ```todate``` The last date the commission rate applies
* ```commissionpercentage``` The percentage to be charged as commission
* ```updateexistingbookings``` Set to update existing bookings (optional, default=false)

+ Response 201

    + Headers

            Location: http://plato.apiary.io/v2/property/1/commission/2

## Property Commission Details [/v2/property/{id}/commission/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyCommission

### Get the details of a Property Commission [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "fromdate": "2016-01-01",
            "todate": "2019-12-31",
            "commissionpercentage": 19
          }

### Update a Property Commission [PUT]

+ Request (application/x-www-form-urlencoded)

        commissionpercentage=15

+ Response 204

### Delete a Property Commission [DELETE]

+ Response 204



## Property Description Index [/v2/property/{id}/marketingbrand/{id2}/description]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyMarketingBrand

### Get all Descriptions for a Property [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "descriptiontype": {
                    "id": 1,
                    "code": "long",
                    "name": "Long",
                    "description": "long",
                    "encoding": {
                        "id": 2,
                        "encoding": "HTML"
                    },
                    "minimumlength": 0,
                    "maximumlength": 999,
                    "donotmodify": true,
                    "order": 1
                },
                "description": "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?"
            },
            {
                "id": 2,
                "descriptiontype": {
                    "id": 2,
                    "code": "avail",
                    "name": "Availability",
                    "description": "avail",
                    "encoding": {
                        "id": 1,
                        "encoding": "Plain"
                    },
                    "minimumlength": 0,
                    "maximumlength": 999,
                    "donotmodify": false,
                    "order": 5
                },
                "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
            },
            {
                "id": 3,
                "descriptiontype": {
                    "id": 4,
                    "code": "direct",
                    "name": "Direct",
                    "description": "direct",
                    "encoding": {
                        "id": 1,
                        "encoding": "Plain"
                    },
                    "minimumlength": 0,
                    "maximumlength": 500,
                    "donotmodify": false,
                    "order": 4
                },
                "description": "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>"
            }
        ]

### Add a new Description to a property [POST]
The following fields should be provided in the POST array

* ```descriptiontype``` The type of description being added
* ```description``` The description text, encoded as appropriate

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/marketingbrand/2/description/3

## Property Description Detail [/v2/property/{id}/marketingbrand/{id2}/description/{id3}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyMarketingBrand
    + id3 (required, integer, `1`) ... The id of the PropertyDescription to get

### Get the details of a Property Description [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "descriptiontype": {
                "id": 1,
                "code": "long",
                "name": "Long",
                "description": "long",
                "encoding": {
                    "id": 2,
                    "encoding": "HTML"
                },
                "minimumlength": 0,
                "maximumlength": 999,
                "donotmodify": true,
                "order": 1
            },
            "description": "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?"
        }

### Update a Property Description [PUT]

+ Request (application/x-www-form-urlencoded)

        description='More lorem ipsum gibberish'

+ Response 204

### Delete a property description [DELETE]

+ Response 204



## Property Document Index [/v2/property/{id}/document]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property

### Get all Property Documents [GET]

+ Response 200 (application/json)

        [
            {
                "id": 5,
                "created": "2015-12-10 14:09:20",
                "image": {
                    "id": 5,
                    "name": "xyz.jpg",
                    "filename": "xyz.jpg",
                    "timeadded": "2014-01-01 12:00:00",
                    "weight": 0,
                    "private": false,
                    "description": "Bathroom",
                    "mimetype": {
                        "id": 2,
                        "name": "image/jpeg",
                        "shortname": "jpg"
                    },
                    "file": "/v2/file/5",
                    "height": 300,
                    "width": 200,
                    "alt": "The Bathroom"
                }
            },
            {
                "id": 6,
                "created": "2015-12-10 14:09:20",
                "image": {
                    "id": 4,
                    "name": "abc.jpg",
                    "filename": "abc.jpg",
                    "timeadded": "2014-01-01 12:00:00",
                    "weight": 0,
                    "private": false,
                    "description": "Here is another placeholder image",
                    "mimetype": {
                        "id": 2,
                        "name": "image/jpeg",
                        "shortname": "jpg"
                    },
                    "file": "/v2/file/4",
                    "height": 360,
                    "width": 480,
                    "alt": "The empire state building"
                }
            }
        ]

### Add a new Property Document [POST]
The following fields should be provided in the POST array

* ```documentid``` The id of the Document

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/document/1

## Property Document Details [/v2/property/{id}/document/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `6`) ... The id of the PropertyDocument to get

### Get the details of a Property Document [GET]

+ Response 200 (application/json)

        {
            "id": 6,
            "created": "2015-12-10 14:09:20",
            "image": {
                "id": 4,
                "name": "abc.jpg",
                "filename": "abc.jpg",
                "timeadded": "2014-01-01 12:00:00",
                "weight": 0,
                "private": false,
                "description": "Here is another placeholder image",
                "mimetype": {
                    "id": 2,
                    "name": "image/jpeg",
                    "shortname": "jpg"
                },
                "file": "/v2/file/4",
                "height": 360,
                "width": 480,
                "alt": "The empire state building"
            }
        }

### Update the a Property Document [PUT]
Not implemented

+ Response 501

### Delete a Property Document [DELETE]

+ Response 204



## Property History Index [/v2/property/{id}/history]
### Get all history for a property [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the property

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 2,
            "page": 1,
            "count": 2,
            "limit": 10,
            "time": 0,
            "orderBy": null,
            "filter": "entityType=Property:entityId=1",
            "previous": null,
            "next": null,
            "elements": [
              {
                "actor": {
                  "id": 2,
                  "type": "TabsUser",
                  "actorcode": "",
                  "created": "2017-03-29",
                  "updated": "",
                  "language": {
                    "id": 1,
                    "code": "EN",
                    "name": "English"
                  },
                  "inactive": false,
                  "firstname": "Dummy OAuth",
                  "surname": "User",
                  "title": "Mr",
                  "salutation": "Dummy",
                  "companyname": "",
                  "vatnumber": "",
                  "companynumber": "",
                  "contactdetails": [
                    {
                      "id": 90,
                      "type": "C",
                      "contactmethodtype": "Email",
                      "contactmethodsubtype": "Main",
                      "value": "support@tabs-software.co.uk",
                      "comment": "",
                      "invalid": false,
                      "invaliddatetime": "",
                      "invalidreason": "",
                      "contactpreferences": [],
                      "dedupekey": ""
                    }
                  ],
                  "bankaccounts": [],
                  "bacsbankaccount": {},
                  "documents": [],
                  "mergedinto": "",
                  "potentialduplicates": [],
                  "mergedactors": [],
                  "accountingreference": "",
                  "tabsusername": "dummyoauthuser",
                  "roles": [],
                  "tabscode": "DUMMY",
                  "settings": [],
                  "defaultbrandinggroup": [],
                  "defaultbookingbrand": []
                },
                "client": {
                  "id": 1,
                  "name": "tabs 2",
                  "url": "http://www.tabs-software.co.uk"
                },
                "datetime": "2014-08-18 00:00:00",
                "description": "Changed status",
                "parameters": {
                  "status": "Live"
                }
              },
              {
                "actor": {
                  "id": 2,
                  "type": "TabsUser",
                  "actorcode": "",
                  "created": "2017-03-29",
                  "updated": "",
                  "language": {
                    "id": 1,
                    "code": "EN",
                    "name": "English"
                  },
                  "inactive": false,
                  "firstname": "Dummy OAuth",
                  "surname": "User",
                  "title": "Mr",
                  "salutation": "Dummy",
                  "companyname": "",
                  "vatnumber": "",
                  "companynumber": "",
                  "contactdetails": [
                    {
                      "id": 90,
                      "type": "C",
                      "contactmethodtype": "Email",
                      "contactmethodsubtype": "Main",
                      "value": "support@tabs-software.co.uk",
                      "comment": "",
                      "invalid": false,
                      "invaliddatetime": "",
                      "invalidreason": "",
                      "contactpreferences": [],
                      "dedupekey": ""
                    }
                  ],
                  "bankaccounts": [],
                  "bacsbankaccount": {},
                  "documents": [],
                  "mergedinto": "",
                  "potentialduplicates": [],
                  "mergedactors": [],
                  "accountingreference": "",
                  "tabsusername": "dummyoauthuser",
                  "roles": [],
                  "tabscode": "DUMMY",
                  "settings": [],
                  "defaultbrandinggroup": [],
                  "defaultbookingbrand": []
                },
                "client": {
                  "id": 1,
                  "name": "tabs 2",
                  "url": "http://www.tabs-software.co.uk"
                },
                "datetime": "2014-08-09 00:00:00",
                "description": "Property created",
                "parameters": {
                  "name": "Angler Cottage",
                  "sleeps": 4,
                  "bedrooms": 2
                }
              }
            ]
          }




## Property Marketing Brand Index [/v2/property/{id}/marketingbrand]

+ Parameters

    + id (required, integer, `2`) ... The id of the Property

### Get all Marketing Brands for a Property [GET]

+ Response 200 (application/json)

        [
            {
                "id": 3,
                "marketingbrand": {
                    "id": 3,
                    "code": "NOMM",
                    "name": "Norfolk Country Cottages",
                    "agency": "/v2/agency/2",
                    "defaultbookingbrand": "/v2/bookingbrand/3",
                    "website": "www.norfolk.co.uk",
                    "email": "info@norfolk.co.uk"
                }
            },
            {
                "id": 2,
                "marketingbrand": {
                    "id": 4,
                    "code": "MAMM",
                    "name": "Marsdens",
                    "agency": "/v2/agency/3",
                    "defaultbookingbrand": "/v2/bookingbrand/4",
                    "website": "www.mabb.co.uk",
                    "email": "info@mabb.co.uk"
                }
            }
        ]

### Add a new Property Marketing Brand [POST]
Not implemented - added via /property/{id}/branding

+ Response 501

## Property Marketing Brand Detail [/v2/property/{id}/marketingbrand/{id2}]

+ Parameters

    + id (required, integer, `2`) ... The id of the Property
    + id2 (required, integer, `2`) ... The id of the PropertyMarketingBrand to get

### Get the details of a Property Marketing Brand [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "marketingbrand": {
                "id": 4,
                "code": "MAMM",
                "name": "Marsdens",
                "agency": "/v2/agency/3",
                "defaultbookingbrand": "/v2/bookingbrand/4",
                "website": "www.mabb.co.uk",
                "email": "info@mabb.co.uk"
            }
        }

### Update a Property Marketing Brand [PUT]

+ Response 501

### Delete a Property Marketing Brand [DELETE]
Not implemented

+ Response 501



## Property Marketing Brand Document Index [/v2/property/{id}/marketingbrand/{id2}/document]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyMarketingBrand

### Get all Documents for a Property Marketing Brand [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "private": false,
                "propertydocument": {
                    "id": 6,
                    "created": "2015-12-15 10:28:51",
                    "image": {
                        "id": 4,
                        "name": "abc.jpg",
                        "filename": "abc.jpg",
                        "timeadded": "2014-01-01 12:00:00",
                        "weight": 0,
                        "private": false,
                        "description": "Here is another placeholder image",
                        "mimetype": {
                            "id": 2,
                            "name": "image/jpeg",
                            "shortname": "jpg"
                        },
                        "file": "/v2/file/4",
                        "height": 360,
                        "width": 480,
                        "alt": "The empire state building"
                    }
                }
            }
        ]

### Add a new Property Marketing Brand Document [POST]
The following fields should be provided in the POST array

* ```propertydocumentid``` The id of the PropertyDocument to be added to the Property Marketing Brand
* ```private``` Whether the document is private to the brand

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/marketingbrand/1/document/1

## Property Marketing Brand Document Detail [/v2/property/{id}/marketingbrand/{id2}/document/{id3}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyMarketingBrand 
    + id3 (required, integer, `1`) ... The id of the PropertyMarketingBrandDocument 

### Get the details of a Property Marketing Brand Document [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "private": false,
            "propertydocument": {
                "id": 6,
                "created": "2015-12-15 10:28:51",
                "image": {
                    "id": 4,
                    "name": "abc.jpg",
                    "filename": "abc.jpg",
                    "timeadded": "2014-01-01 12:00:00",
                    "weight": 0,
                    "private": false,
                    "description": "Here is another placeholder image",
                    "mimetype": {
                        "id": 2,
                        "name": "image/jpeg",
                        "shortname": "jpg"
                    },
                    "file": "/v2/file/4",
                    "height": 360,
                    "width": 480,
                    "alt": "The empire state building"
                }
            }
        }

### Update a Property Marketing Brand Document [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output.

+ Request (application/x-www-form-urlencoded)

        private=true

+ Response 204

### Delete a Property Marketing Brand Document [DELETE]

+ Response 204



## Property Marketing Brand GroupingValue Index [/v2/property/{id}/marketingbrand/{id2}/groupingvalue]
A Grouping is a concept such as Area or Location. The Location or Area for a Property Marketing Brand is stored as a PropertyMarketingBrandGroupingValue
+ Parameters

    + id (required, integer, `2`) ... The id of the Property
    + id2 (required, integer, `3`) ... The id of the PropertyMarketingBrand

### Get all GroupingValues for a Property Marketing Brand [GET]

+ Response 200 (application/json)

        [
            {
                "id": 3,
                "grouping": {
                    "id": 1,
                    "name": "Area",
                    "parentgrouping": ""
                },
                "groupingvalue": {
                    "id": 8,
                    "marketingbrand": "/v2/marketingbrand/5",
                    "name": "The Broads & East Coast Villages",
                    "qualifier": "",
                    "parentgroupingvalue": "",
                    "description": "The Norfolk Broads is somewhat of a claim to fame for Norfolk.",
                    "latitude": "0.000000",
                    "longitude": "0.000000",
                    "radiuskm": 0,
                    "nearkm": 0,
                    "promote": false,
                    "code": "BECV",
                    "geohash": ""
                }
            },
            {
                "id": 4,
                "grouping": {
                    "id": 2,
                    "name": "Location",
                    "parentgrouping": ""
                },
                "groupingvalue": {
                    "id": 9,
                    "marketingbrand": "/v2/marketingbrand/5",
                    "name": "Horning",
                    "qualifier": "",
                    "parentgroupingvalue": "",
                    "description": "Situated on the banks of the River Bure, Horning is a lovely village at the heart of the Norfolk Broads",
                    "latitude": "52.567400",
                    "longitude": "1.036900",
                    "radiuskm": 2,
                    "nearkm": 5,
                    "promote": false,
                    "code": "HORNI",
                    "geohash": "u12ep9e53"
                }
            }
        ]

### Add a new Property Marketing Brand GroupingValue [POST]
The following fields should be provided in the POST array

* ```groupingvalueid``` The id of the GroupingValue to be added to the Property Marketing Brand

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/marketingbrand/1/groupingvalue/1

## Property Marketing Brand GroupingValue Detail [/v2/property/{id}/marketingbrand/{id2}/groupingvalue/{id3}]

+ Parameters

    + id (required, integer, `2`) ... The id of the Property
    + id2 (required, integer, `3`) ... The id of the PropertyMarketingBrand 
    + id3 (required, integer, `4`) ... The id of the PropertyMarketingBrandGroupingValue 

### Get the details of a Property Marketing Brand GroupingValue [GET]

+ Response 200 (application/json)

        {
            "id": 4,
            "grouping": {
                "id": 2,
                "name": "Location",
                "parentgrouping": ""
            },
            "groupingvalue": {
                "id": 9,
                "marketingbrand": "/v2/marketingbrand/5",
                "name": "Horning",
                "qualifier": "",
                "parentgroupingvalue": "",
                "description": "Situated on the banks of the River Bure, Horning is a lovely village at the heart of the Norfolk Broads",
                "latitude": "52.567400",
                "longitude": "1.036900",
                "radiuskm": 2,
                "nearkm": 5,
                "promote": false,
                "code": "HORNI",
                "geohash": "u12ep9e53"
            }
        }

### Update a Property Marketing Brand GroupingValue [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output.

+ Request (application/x-www-form-urlencoded)

        groupingvalueid=45

+ Response 204

### Delete a Property Marketing Brand GroupingValue [DELETE]

+ Response 204



## Property Note List [/v2/property/{id}/note{?page,limit}]
### Retrieve a list of Property Notes. [GET]
property/1/note?page=1&limit=25

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + page (optional, integer, `1`) ... The page of results to return
    + limit (optional, integer, `25`) ... The number of results to return

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 1,
            "page": 1,
            "count": 1,
            "limit": 25,
            "time": 0,
            "orderBy": null,
            "filter": "property=1",
            "previous": null,
            "next": null,
            "elements": [
                {
                    "id": 2,
                    "note": {
                        "id": 1,
                        "notetype": {
                            "id": 1,
                            "notetype": "Warning",
                            "description": "A warning which should be highlighted to the user",
                            "donotdelete": true
                        },
                        "subject": "Lorem ipsum",
                        "created": "2014-08-09 12:34:56",
                        "createdby": {
                            "actorid": 1,
                            "actortype": "TabsUser",
                            "actor": "/v2/tabsuser/1",
                            "name": "system system"
                        },
                        "createdfromscreen": "Booking",
                        "visibletocustomer": false,
                        "visibletoowner": false,
                        "visibletocleaner": false,
                        "visibletokeyholder": false,
                        "highlight": false,
                        "pin": true,
                        "private": true,
                        "completed": "",
                        "completedby": [],
                        "archived": "",
                        "archivedby": [],
                        "notetexts": [
                            {
                                "id": 1,
                                "createdby": {
                                    "actorid": 1,
                                    "actortype": "TabsUser",
                                    "actor": "/v2/tabsuser/1",
                                    "name": "system system"
                                },
                                "created": "2014-08-09 12:34:56",
                                "notetext": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut non orci id quam pharetra mattis sit amet id nisl.",
                                "actioned": "2020-02-01 12:21:45",
                                "actionedby": {
                                    "actorid": 1,
                                    "actortype": "TabsUser",
                                    "actor": "/v2/tabsuser/1",
                                    "name": "system system"
                                },
                                "followup": "2020-01-01 12:01:45"
                            },
                            {
                                "id": 2,
                                "createdby": {
                                    "actorid": 1,
                                    "actortype": "TabsUser",
                                    "actor": "/v2/tabsuser/1",
                                    "name": "system system"
                                },
                                "created": "2014-08-09 12:37:56",
                                "notetext": "Donec nec eros vitae dui tincidunt convallis. Ut neque diam, consequat a nisi quis, aliquet imperdiet lacus.",
                                "actioned": "",
                                "actionedby": []
                            }
                        ],
                        "noteactors": [
                            {
                                "actorid": 1,
                                "actortype": "TabsUser",
                                "actor": "/v2/tabsuser/1",
                                "name": "system system",
                                "id": 2,
                                "notifychanges": false,
                                "reminderdate": "2017-08-23"
                            },
                            {
                                "actorid": 7,
                                "actortype": "Customer",
                                "actor": "/v2/customer/7",
                                "name": "Thomas Thornley",
                                "id": 1,
                                "notifychanges": true,
                                "reminderdate": "2016-10-15"
                            }
                        ],
                        "bookings": [
                            {
                                "bookingnoteid": 1,
                                "bookingid": 1,
                                "booking": "/v2/booking/1",
                                "fromdate": "2026-10-01",
                                "todate": "2026-10-08"
                            }
                        ],
                        "properties": [
                            {
                                "propertynoteid": 2,
                                "propertyid": 1,
                                "property": "/v2/property/1",
                                "name": "Angler Cottage",
                                "tabspropref": "1105",
                                "fromdate": "2015-07-25",
                                "todate": "2015-08-02",
                                "requiresconfirmation": false,
                                "showonweb": false,
                                "showonavailability": true
                            },
                            {
                                "propertynoteid": 1,
                                "propertyid": 2,
                                "property": "/v2/property/2",
                                "name": "Reedmere",
                                "tabspropref": "1212",
                                "fromdate": "2015-06-30",
                                "todate": "2015-07-15",
                                "requiresconfirmation": true,
                                "showonweb": true,
                                "showonavailability": false
                            }
                        ],
                        "actors": [
                            {
                                "actorid": 7,
                                "actortype": "Customer",
                                "actor": "/v2/customer/7",
                                "name": "Thomas Thornley",
                                "actornoteid": 1
                            }
                        ],
                        "workorders": [
                            {
                                "workordernoteid": 2,
                                "workorderid": 3,
                                "workorder": "/v2/workorder/3"
                            }
                        ]
                    },
                    "property": "/v2/property/1",
                    "fromdate": "2015-07-25",
                    "todate": "2015-08-02",
                    "requiresconfirmation": false,
                    "showonweb": false,
                    "showonavailability": true
                }
            ]
        }

## PropertyNote Index [/v2/propertynote]
### Get all PropertyNotes [GET]
Not implemented - notes listed in /v2/{property}/{id}/note

+ Response 501

### Add an existing Note to an Property[POST]
The following fields should be provided in the POST array:

* ```propertyid``` Id of Note to add to the Property
* ```noteid``` Id of Note to add to the Property
* ```fromdate``` Date the Note applies from
* ```todate``` Date the Note applies to
* ```requiresconfirmation``` Whether the the note should be displayed during the booking process, and the tabs user required to confirm they've seen it
* ```showonweb``` Whether the note should be shown on websites
* ```showonavailability``` Whether the note should be shown on Availability

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/propertynote/1

## PropertyNote Detail [/v2/propertynote/{id}]
+ Parameters

    + id (required, integer, `1`) ... The id of the PropertyNote to get

### Retrieve an individual PropertyNote [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "note": {
                "id": 1,
                "notetype": {
                    "id": 1,
                    "notetype": "Warning",
                    "description": "A warning which should be highlighted to the user",
                    "donotdelete": true
                },
                "subject": "Lorem ipsum",
                "created": "2014-08-09 12:34:56",
                "createdby": {
                    "actorid": 1,
                    "actortype": "TabsUser",
                    "actor": "/v2/tabsuser/1",
                    "name": "system system"
                },
                "createdfromscreen": "Booking",
                "visibletocustomer": false,
                "visibletoowner": false,
                "visibletocleaner": false,
                "visibletokeyholder": false,
                "highlight": false,
                "pin": true,
                "private": true,
                "completed": "",
                "completedby": [],
                "archived": "",
                "archivedby": [],
                "notetexts": [
                    {
                        "id": 1,
                        "createdby": {
                            "actorid": 1,
                            "actortype": "TabsUser",
                            "actor": "/v2/tabsuser/1",
                            "name": "system system"
                        },
                        "created": "2014-08-09 12:34:56",
                        "notetext": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut non orci id quam pharetra mattis sit amet id nisl.",
                        "actioned": "2020-02-01 12:21:45",
                        "actionedby": {
                            "actorid": 1,
                            "actortype": "TabsUser",
                            "actor": "/v2/tabsuser/1",
                            "name": "system system"
                        },
                        "followup": "2020-01-01 12:01:45"
                    },
                    {
                        "id": 2,
                        "createdby": {
                            "actorid": 1,
                            "actortype": "TabsUser",
                            "actor": "/v2/tabsuser/1",
                            "name": "system system"
                        },
                        "created": "2014-08-09 12:37:56",
                        "notetext": "Donec nec eros vitae dui tincidunt convallis. Ut neque diam, consequat a nisi quis, aliquet imperdiet lacus.",
                        "actioned": "",
                        "actionedby": []
                    }
                ],
                "noteactors": [
                    {
                        "actorid": 1,
                        "actortype": "TabsUser",
                        "actor": "/v2/tabsuser/1",
                        "name": "system system",
                        "id": 2,
                        "notifychanges": false,
                        "reminderdate": "2017-08-23"
                    },
                    {
                        "actorid": 7,
                        "actortype": "Customer",
                        "actor": "/v2/customer/7",
                        "name": "Thomas Thornley",
                        "id": 1,
                        "notifychanges": true,
                        "reminderdate": "2016-10-15"
                    }
                ],
                "bookings": [
                    {
                        "bookingnoteid": 1,
                        "bookingid": 1,
                        "booking": "/v2/booking/1",
                        "fromdate": "2026-10-01",
                        "todate": "2026-10-08"
                    }
                ],
                "properties": [
                    {
                        "propertynoteid": 2,
                        "propertyid": 1,
                        "property": "/v2/property/1",
                        "name": "Angler Cottage",
                        "tabspropref": "1105",
                        "fromdate": "2015-07-25",
                        "todate": "2015-08-02",
                        "requiresconfirmation": false,
                        "showonweb": false,
                        "showonavailability": true
                    },
                    {
                        "propertynoteid": 1,
                        "propertyid": 2,
                        "property": "/v2/property/2",
                        "name": "Reedmere",
                        "tabspropref": "1212",
                        "fromdate": "2015-06-30",
                        "todate": "2015-07-15",
                        "requiresconfirmation": true,
                        "showonweb": true,
                        "showonavailability": false
                    }
                ],
                "actors": [
                    {
                        "actorid": 7,
                        "actortype": "Customer",
                        "actor": "/v2/customer/7",
                        "name": "Thomas Thornley",
                        "actornoteid": 1
                    }
                ],
                "workorders": [
                    {
                        "workordernoteid": 2,
                        "workorderid": 3,
                        "workorder": "/v2/workorder/3"
                    }
                ]
            },
            "property": "/v2/property/2",
            "fromdate": "2015-06-30",
            "todate": "2015-07-15",
            "requiresconfirmation": true,
            "showonweb": true,
            "showonavailability": false
        }

### Updates the Property Note for for a given id [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. e.g.:

        showonweb=false

+ Response 204

### Removes the Property from the Note [DELETE]

+ Response 204



## PropertyNote Confirmation Index [/v2/propertynote/{id}/confirmation]
+ Parameters

    + id (required, integer, `1`) ... The id of the PropertyNote

### Get all Confirmations for an PropertyNote [GET]
+ Response 200 (application/json)

        [
            {
                "id": 1,
                "confirmationdatetime": "2015-10-23 14:02:54",
                "actor": "/v2/tabsuser/1",
                "booking": ""
            },
            {
                "id": 2,
                "confirmationdatetime": "2015-11-03 11:33:14",
                "actor": "/v2/tabsuser/1",
                "booking": ""
            }
        ]

### Add a new Confirmation to an PropertyNote [POST]

The following fields should be provided in the POST array

* ```actorid``` The Id of the Actor who confirmed the note
* ```bookingid``` The id of the Booking prompting the confirmation (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/propertynote/1/confirmation/2

## PropertyNote Confirmation Detail [/v2/propertynote/{id}/confirmation/{eid}]
+ Parameters

    + id (required, integer, `1`) ... The id of the PropertyNote
    + eid (required, integer, `2`) ... The id of the PropertyNoteConfirmation

### Gets the details of a PropertyNote Confirmation [GET]
+ Response 200 (application/json)

        {
            "id": 2,
            "confirmationdatetime": "2015-11-03 11:33:14",
            "actor": "/v2/tabsuser/1",
            "booking": ""
        }

### Update a PropertyNote Confirmation [PUT]
Not implemented

+ Response 501

### Deletes a PropertyNote Confirmation [DELETE]

+ Response 204



## Property Office Index [/v2/property/{id}/office]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property

### Get all Offices for a Property [GET]

+ Response 200 (application/json)

        [
            {
                "id": 3,
                "property": "/v2/property/1",
                "office": "/v2/office/49",
                "fromdate": "2016-01-01",
                "todate": "2017-12-31"
            }
        ]

### Add a new PropertyOffice [POST]
The following fields should be provided in the POST array

* ```officeid``` The id of the Office
* ```fromdate``` The date the property was assigned to the office from
* ```todate```   The date the property was assigned to the office to

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/office/1

## Property Office Details [/v2/property/{id}/office/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `3`) ... The id of the PropertyOffice 

### Get the details of a Property Office [GET]

+ Response 200 (application/json)

        {
            "id": 3,
            "property": "/v2/property/1",
            "office": "/v2/office/49",
            "fromdate": "2016-01-01",
            "todate": "2017-12-31"
        }

### Update the details of a property Office [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output.

+ Request (application/x-www-form-urlencoded)

        todate='2041-12-21'

+ Response 204

### Delete a property Office [DELETE]

+ Response 204



## Property Owner Index [/v2/property/{id}/owner]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property

### Get all Owners for a Property [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "property": "/v2/property/1",
                "owner": "/v2/owner/4",
                "ownerfromdate": "2011-01-01",
                "ownertodate": "2041-12-21"
            }
        ]

### Add a new PropertyOwner [POST]
The following fields should be provided in the POST array

* ```ownerid``` The id of the Owner
* ```ownerfromdate``` The date the property was owned from
* ```ownertodate``` The date the property was owned to

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/owner/1

## Property Owner Details [/v2/property/{id}/owner/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyOwner to get

### Get the details of a Property Owner [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "property": "/v2/property/1",
            "owner": "/v2/owner/3",
            "ownerfromdate": "2011-01-01",
            "ownertodate": "2041-12-21"
        }

### Update the details of a property Owner [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output.
eg. ```ownerfromdate```, ```ownertodate```

+ Request (application/x-www-form-urlencoded)

        ownertodate='2041-12-21'

+ Response 204

### Delete a Property Owner [DELETE]

+ Response 501



## Property OwnerPaymentTerms Index [/v2/property/{id}/ownerpaymentterms]
The OwnerPaymentTerms for bookings starting between the dates

+ Parameters

    + id (required, integer, `1`) ... The id of the Property

### Get all OwnerPaymentTermss for a Property [GET]

+ Response 200 (application/json)

        [
            {
                "id": 3,
                "fromdate": "2016-01-01",
                "todate": "2027-12-31",
                "ownerpaymentterms": {
                    "id": 1,
                    "name": "Paid based on holiday dates",
                    "description": "Owner is paid based on the holiday dates",
                    "ondeposit": false,
                    "oninterim": false,
                    "onbalance": false,
                    "amountperperiod": "0.0000",
                    "percentageofpayment": 0,
                    "percentageofbasic": 0,
                    "ownerpaid": "",
                    "currency": {
                        "id": 1,
                        "code": "GBP",
                        "name": "Pound Sterling",
                        "decimalplaces": 2
                    }
                }
            }
        ]

### Add a new OwnerPaymentTerms to a property [POST]
The following fields should be provided in the POST array.

* ```fromdate``` The first date the ownerpaymentterms apply
* ```todate``` The last date the ownerpaymentterms apply
* ```ownerpaymenttermsid``` The id of the ownerpaymentterms

+ Response 201

    + Headers

            Location: http://plato.apiary.io/v2/property/1/ownerpaymentterms/2

## Property OwnerPaymentTerms Details [/v2/property/{id}/ownerpaymentterms/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `3`) ... The id of the PropertyOwnerPaymentTerms

### Get the details of a Property OwnerPaymentTerms [GET]

+ Response 200 (application/json)

        {
            "id": 3,
            "fromdate": "2016-01-01",
            "todate": "2027-12-31",
            "ownerpaymentterms": {
                "id": 1,
                "name": "Paid based on holiday dates",
                "description": "Owner is paid based on the holiday dates",
                "ondeposit": false,
                "oninterim": false,
                "onbalance": false,
                "amountperperiod": "0.0000",
                "percentageofpayment": 0,
                "percentageofbasic": 0,
                "ownerpaid": "",
                "currency": {
                    "id": 1,
                    "code": "GBP",
                    "name": "Pound Sterling",
                    "decimalplaces": 2
                }
            }
        }

### Update a Property OwnerPaymentTerms [PUT]

+ Request (application/x-www-form-urlencoded)

        fromdate=2016-01-01

+ Response 204

### Delete a Property OwnerPaymentTerms [DELETE]

+ Response 204



## Property SecurityDeposit Index [/v2/property/{id}/securitydeposit]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property

### Get all SecurityDeposits for a Property [GET]

+ Response 200 (application/json)

        [
            {
              "id": 2,
              "bookedfromdate": "2015-01-01",
              "bookedtodate": "2020-12-31",
              "holidayfromdate": "2015-07-25",
              "holidaytodate": "2015-08-02",
              "amount": 10,
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "daysduein": 14,
              "daysdueout": 7,
              "refundable": true,
              "peradult": true,
              "perchild": false,
              "perinfant": false,
              "perperiod": true,
              "pricingperiod": "Week",
              "minimumdays": 0,
              "maximumdays": 14,
              "comments": "Waiver",
              "ownerchargecode": "",
              "ownerchargeamount": 0
            },
            {
              "id": 3,
              "bookedfromdate": "2015-01-01",
              "bookedtodate": "2020-12-31",
              "holidayfromdate": "2015-07-25",
              "holidaytodate": "2015-08-02",
              "amount": 14,
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "daysduein": 14,
              "daysdueout": 10,
              "refundable": true,
              "peradult": true,
              "perchild": false,
              "perinfant": false,
              "perperiod": true,
              "pricingperiod": "Week",
              "minimumdays": 15,
              "maximumdays": 999,
              "comments": "Waiver",
              "ownerchargecode": "",
              "ownerchargeamount": 0
            },
            {
              "id": 4,
              "bookedfromdate": "2015-01-01",
              "bookedtodate": "2020-12-31",
              "holidayfromdate": "2015-08-03",
              "holidaytodate": "2020-12-31",
              "amount": 12,
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "daysduein": 14,
              "daysdueout": 3,
              "refundable": true,
              "peradult": true,
              "perchild": false,
              "perinfant": false,
              "perperiod": true,
              "pricingperiod": "Week",
              "minimumdays": 0,
              "maximumdays": 999,
              "comments": "Standard Waiver",
              "ownerchargecode": "",
              "ownerchargeamount": 0
            },
            {
              "id": 5,
              "bookedfromdate": "2015-01-01",
              "bookedtodate": "2026-01-01",
              "holidayfromdate": "2025-01-01",
              "holidaytodate": "2026-12-31",
              "amount": 7,
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "daysduein": 7,
              "daysdueout": 14,
              "refundable": true,
              "peradult": true,
              "perchild": true,
              "perinfant": false,
              "perperiod": true,
              "pricingperiod": "Week",
              "minimumdays": 0,
              "maximumdays": 999,
              "comments": "",
              "ownerchargecode": {
                "id": 1,
                "ownerchargecode": "ADM",
                "description": "Administration Charge",
                "vatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "recharge": false
              },
              "ownerchargeamount": 12.34
            }
          ]

### Add a new SecurityDeposit to a property [POST]
The following fields should be provided in the POST array.

* ```pricingperiod``` The PricingPeriod the PriceType applies to

* ```bookedfromdate```, ```bookedtodate``` The dates between which the holiday must be booked for the deposit to apply
* ```holidayfromdate```, ```holidaytodate``` The dates between which the holiday must start for the deposit to apply
* ```minimumdays```, ```maximumdays``` The range of holiday lengths the security deposit applies to
Only two of these three ranges may overlap another PropertySecurityDeposit for the same Property & PricingPeriod (i.e. if the Booked dates overlap, the Holday dates and holiday length ranges must not)

* ```amount``` The amount to be paid
* ```currencycode``` The currency code the amount is in
* ```daysduein``` How many days before the holiday starts the amount is due to be paid
* ```daysdueout``` How many days after the holiday ends the amount is due to be paid back
* ```refundable``` Whether the amount is refundable
* ```peradult``` Whether the amount is per adult
* ```perchild``` Whether the amount is per child
* ```perinfant``` Whether the amount is per infant
* ```perperiod``` Whether the amount is per period or per holiday
* ```comments``` Any comments (optional)
* ```ownerchargecodeid``` Id of the owner charge code (recharge code) (optional, unless ownerchargeamount is provided)
* ```ownerchargeamount``` The amount the owner is to be charged by the agency for handling the security deposit

+ Response 201

    + Headers

            Location: http://plato.apiary.io/v2/property/1/securitydeposit/2

## Property SecurityDeposit Details [/v2/property/{id}/securitydeposit/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `5`) ... The id of the PropertySecurityDeposit

### Get the details of a Property SecurityDeposit [GET]

+ Response 200 (application/json)

        {
            "id": 5,
            "bookedfromdate": "2015-01-01",
            "bookedtodate": "2026-01-01",
            "holidayfromdate": "2025-01-01",
            "holidaytodate": "2026-12-31",
            "amount": 7,
            "currency": {
              "id": 1,
              "code": "GBP",
              "name": "Pound Sterling",
              "decimalplaces": 2
            },
            "daysduein": 7,
            "daysdueout": 14,
            "refundable": true,
            "peradult": true,
            "perchild": true,
            "perinfant": false,
            "perperiod": true,
            "pricingperiod": "Week",
            "minimumdays": 0,
            "maximumdays": 999,
            "comments": "",
            "ownerchargecode": {
              "id": 1,
              "ownerchargecode": "ADM",
              "description": "Administration Charge",
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "recharge": false
            },
            "ownerchargeamount": 12.34
          }

### Update a Property SecurityDeposit [PUT]

+ Request (application/x-www-form-urlencoded)

        amount=75

+ Response 204

### Delete a Property SecurityDeposit [DELETE]
Not implemented - update bookedtodate

+ Response 501



## Property SecurityFeature Index [/v2/property/{id}/securityfeature]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property

### Get all SecurityFeatures for a Property [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "securityfeature": {
                    "id": 1,
                    "name": "Key Safe"
                },
                "code": "12345",
                "fromdate": "2013-10-01",
                "todate": "2100-01-01",
                "notes": "By Door"
            }
        ]

### Add a new PropertySecurityFeature [POST]
The following fields should be provided in the POST array

* ```securityfeatureid``` The id of the SecurityFeature
* ```code``` The code (e.g. keysafe code) (optional)
* ```fromdate``` Valid from (optional)
* ```todate``` Valid to (optional)
* ```notes``` Notes, e.g. location (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/securityfeature/1

## Property SecurityFeature Details [/v2/property/{id}/securityfeature/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertySecurityFeature

### Get the details of a Property SecurityFeature [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "securityfeature": {
                "id": 1,
                "name": "Key Safe"
            },
            "code": "12345",
            "fromdate": "2013-10-01",
            "todate": "2100-01-01",
            "notes": "By Door"
        }

### Update the details of a property SecurityFeature [PUT]

+ Request (application/x-www-form-urlencoded)

        fromdate='2041-12-21'

+ Response 204

### Delete a Property SecurityFeature [DELETE]

+ Response 204



## Property Supplier Index [/v2/property/{id}/supplier]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property

### Get all Suppliers for a Property [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "property": "/v2/property/1",
                "activity": {
                    "id": 1,
                    "name": "Cleaning",
                    "description": "Cleaning a property",
                    "donotmodify": true
                },
                "actor": "/v2/supplier/11",
                "dates": [
                    {
                        "id": 1,
                        "fromdate": "2013-10-01",
                        "todate": "2100-01-01"
                    }
                ]
            },
            {
                "id": 2,
                "property": "/v2/property/1",
                "activity": {
                    "id": 2,
                    "name": "Keyholder",
                    "description": "Being the keyholder for a property",
                    "donotmodify": true
                },
                "actor": "/v2/supplier/11",
                "dates": [
                    {
                        "id": 2,
                        "fromdate": "2013-10-01",
                        "todate": "2100-01-01"
                    }
                ]
            }
        ]

### Add a new PropertySupplier [POST]
The following fields should be provided in the POST array

* ```managedactivityid``` The id of the ManagedActivity
* ```actorid``` The id of the supplier of the managed activity (which may be any actor, usually either a supplier or an agency!)
* ```fromdate``` The date the supplier supplies the activity from (optional)
* ```todate``` The date the supplier supplies the activity until (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/supplier/1

## Property Supplier Details [/v2/property/{id}/supplier/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertySupplier 

### Get the details of a Property Supplier [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "property": "/v2/property/1",
            "activity": {
                "id": 1,
                "name": "Cleaning",
                "description": "Cleaning a property",
                "donotmodify": true
            },
            "actor": "/v2/supplier/11",
            "dates": [
                {
                    "id": 1,
                    "fromdate": "2013-10-01",
                    "todate": "2100-01-01"
                }
            ]
        }

### Update a Property Supplier [PUT]
Not implemented (nothing to update)

+ Response 501

### Delete a Property Supplier [DELETE]

+ Response 204



## Property Supplier Date Range Index [/v2/property/{id}/supplier/{id2}/daterange]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertySupplier

### Get all Date Ranges for a Property Supplier [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "fromdate": "2013-10-01",
                "todate": "2100-01-01"
            }
        ]

### Add a new PropertySupplierDateRange [POST]
The following fields should be provided in the POST array

* ```fromdate``` The date the supplier supplies the activity from (optional)
* ```todate``` The date the supplier supplies the activity until (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/supplier/1/daterange/1

## Property Supplier Date Range Details [/v2/property/{id}/supplier/{id2}/daterange/{id3}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertySupplier 
    + id3 (required, integer, `1`) ... The id of the PropertySupplierDateRange 

### Get the details of a Property Supplier Date Range [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "fromdate": "2013-10-01",
            "todate": "2100-01-01"
        }

### Update the details of a Property Supplier Date Range [PUT]

+ Request (application/x-www-form-urlencoded)

        todate=2017-12-31

+ Response 204

### Delete a Property Supplier Date Range [DELETE]

+ Response 204



## Property Supplier Service Index [/v2/property/{id}/supplier/{id2}/service]

+ Parameters

    + id (required, integer, `2`) ... The id of the Property
    + id2 (required, integer, `3`) ... The id of the PropertySupplier

### Get all Services for a Property Supplier [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "service": {
                    "id": 1,
                    "name": "Cleaning",
                    "description": "Cleaning a property",
                    "donotmodify": true,
                    "vatband": {
                        "id": 2,
                        "vatband": "Standard"
                    },
                    "datetouse": "fromdate",
                    "customerbookings": true,
                    "ownerbookings": false
                },
                "fromdate": "2015-04-23",
                "todate": "2017-07-01",
                "datetouse": "",
                "customerbookings": true,
                "ownerbookings": false
            }
        ]

### Add a new Property Supplier Service [POST]
The following fields should be provided in the POST array

* ```serviceid``` The id of the Service to be provided by the Property Supplier
* ```fromdate``` The date the Property Supplier supplies the Service from (optional)
* ```todate``` The date the Property Supplier supplies the Service until (optional)
* ```datetouse``` (optional)
* ```customerbookings``` Whether the service applies to customer bookings
* ```ownerbookings``` Whether the service applies to owner bookings

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/supplier/1/service/1/

## Property Supplier Service Detail [/v2/property/{id}/supplier/{id2}/service/{id3}]

+ Parameters

    + id (required, integer, `2`) ... The id of the Property
    + id2 (required, integer, `3`) ... The id of the PropertySupplier 
    + id3 (required, integer, `1`) ... The id of the PropertySupplierService

### Get the details of a Property Supplier Service [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "service": {
                "id": 1,
                "name": "Cleaning",
                "description": "Cleaning a property",
                "donotmodify": true,
                "vatband": {
                    "id": 2,
                    "vatband": "Standard"
                },
                "datetouse": "fromdate",
                "customerbookings": true,
                "ownerbookings": false
            },
            "fromdate": "2015-04-23",
            "todate": "2017-07-01",
            "datetouse": "",
            "customerbookings": true,
            "ownerbookings": false
        }

### Update a Property Supplier Service [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output.

+ Request (application/x-www-form-urlencoded)

        fromdate=2016-04-29

+ Response 204

### Delete a Property Supplier Service [DELETE]

+ Response 204



## Property Room Index [/v2/property/{id}/room]

+ Parameters

    + id (required, integer, `2`) ... The id of the Property

### Get all Rooms for a Property [GET]

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "roomtype": {
                    "id": 5,
                    "name": "king",
                    "sleeps": 2,
                    "description": "Bedroom - One double king-sizebed"
                },
                "quantity": 1,
                "description": "First-floor room with balcony"
            },
            {
                "id": 3,
                "roomtype": {
                    "id": 2,
                    "name": "twin",
                    "sleeps": 2,
                    "description": "Bedroom - Two single beds"
                },
                "quantity": 1,
                "description": "Cozy, front-facing with small fireplace"
            }
        ]

### Add a new PropertyRoom [POST]
The following fields should be provided in the POST array

* ```roomtypeid``` The id of the RoomType
* ```quantity``` The number of rooms of this type the property has
* ```description``` A description of the room(s)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/room/1

## Property Room Details [/v2/property/{id}/room/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Property
    + id2 (required, integer, `1`) ... The id of the PropertyRoome

### Get the details of a Property Room [GET]

+ Response 200 (application/json)

        {
            "id": 3,
            "roomtype": {
                "id": 2,
                "name": "twin",
                "sleeps": 2,
                "description": "Bedroom - Two single beds"
            },
            "quantity": 1,
            "description": "Cozy, front-facing with small fireplace"
        }

### Update the details of a property Room [PUT]

+ Request (application/x-www-form-urlencoded)

        quantity=3

+ Response 204

### Delete a Property Room [DELETE]

+ Response 204



## RoomType Index [/v2/roomtype]
### Get all RoomTypes [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "single",
                "sleeps": 1,
                "description": "Bedroom - One single bed"
            },
            {
                "id": 2,
                "name": "twin",
                "sleeps": 2,
                "description": "Bedroom - Two single beds"
            },
            {
                "id": 3,
                "name": "double",
                "sleeps": 2,
                "description": "Bedroom - One double bed"
            },
            {
                "id": 4,
                "name": "queen",
                "sleeps": 2,
                "description": "Bedroom - One double queen-size bed"
            },
            {
                "id": 5,
                "name": "king",
                "sleeps": 2,
                "description": "Bedroom - One double king-sizebed"
            },
            {
                "id": 6,
                "name": "double bunk",
                "sleeps": 2,
                "description": "Bedroom - Double bunk-bed"
            },
            {
                "id": 7,
                "name": "4-poster",
                "sleeps": 2,
                "description": "Bedroom - Four-poster bed"
            },
            {
                "id": 8,
                "name": "single sofa",
                "sleeps": 1,
                "description": "Bedroom - Single sofa bed"
            },
            {
                "id": 9,
                "name": "double sofa",
                "sleeps": 2,
                "description": "Bedroom - Double sofa bed"
            },
            {
                "id": 10,
                "name": "triple",
                "sleeps": 3,
                "description": "Bedroom - Three single beds"
            },
            {
                "id": 11,
                "name": "kitchen",
                "sleeps": 0,
                "description": "Kitchen"
            },
            {
                "id": 12,
                "name": "lounge",
                "sleeps": 0,
                "description": "Lounge"
            },
            {
                "id": 13,
                "name": "dining",
                "sleeps": 0,
                "description": "Dining room"
            },
            {
                "id": 14,
                "name": "lounge/diner",
                "sleeps": 0,
                "description": "Combined lounge and dining room"
            },
            {
                "id": 15,
                "name": "kitchen/diner",
                "sleeps": 0,
                "description": "Combined kitchen and dining room"
            },
            {
                "id": 16,
                "name": "hall",
                "sleeps": 0,
                "description": "Hall"
            },
            {
                "id": 17,
                "name": "bath",
                "sleeps": 0,
                "description": "Bathroom"
            },
            {
                "id": 18,
                "name": "en-suite bath",
                "sleeps": 0,
                "description": "En-suite bathroom"
            },
            {
                "id": 19,
                "name": "shower",
                "sleeps": 0,
                "description": "Shower room"
            },
            {
                "id": 20,
                "name": "en-suite shower",
                "sleeps": 0,
                "description": "En-suite shower room"
            }
        ]

### Add a new RoomType [POST]

The following fields should be provided in the POST array

* ```name``` The name of the RoomType
* ```sleeps``` The number of people the room sleeps
* ```description``` Description of the room

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/roomtype/2

## RoomType Detail [/v2/roomtype/{id}]
+ Parameters

    + id (required, integer, `4`) ... The id of the RoomType to get

### Gets the details of a RoomType [GET]

+ Response 200 (application/json)

        {
            "id": 4,
            "name": "queen",
            "sleeps": 2,
            "description": "Bedroom - One double queen-size bed"
        }

### Update a RoomType [PUT]

+ Request (application/x-www-form-urlencoded)

        sleeps=3

+ Response 204

### Deletes a RoomType [DELETE]

+ Response 204



## Room Image Index [/v2/property/{id}/room/{id2}/image]

+ Parameters

    + id (required, integer, `2`) ... The id of the Property
    + id2 (required, integer, `2`) ... The id of the Room

### Get all Images for a Room [GET]

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "propertyimage": {
                    "id": 7,
                    "created": "2015-12-21 14:57:05",
                    "image": {
                        "id": 4,
                        "name": "abc.jpg",
                        "filename": "abc.jpg",
                        "timeadded": "2014-01-01 12:00:00",
                        "weight": 0,
                        "private": false,
                        "description": "Here is another placeholder image",
                        "mimetype": {
                            "id": 2,
                            "name": "image/jpeg",
                            "shortname": "jpg"
                        },
                        "file": "/v2/file/4",
                        "height": 360,
                        "width": 480,
                        "alt": "The empire state building"
                    }
                }
            },
            {
                "id": 3,
                "propertyimage": {
                    "id": 8,
                    "created": "2015-12-21 14:57:05",
                    "image": {
                        "id": 3,
                        "name": "placeholder.jpg",
                        "filename": "placeholder.jpg",
                        "timeadded": "2014-01-01 12:00:00",
                        "weight": 0,
                        "private": false,
                        "description": "Here is a placeholder image",
                        "mimetype": {
                            "id": 2,
                            "name": "image/jpeg",
                            "shortname": "jpg"
                        },
                        "file": "/v2/file/3",
                        "height": 300,
                        "width": 200,
                        "alt": "An image"
                    }
                }
            }
        ]

### Add a new Room Image [POST]
The following fields should be provided in the POST array

* ```propertydocumentid``` The id of the PropertyDocument (image) to be added to the Room

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/room/1/image/1

## Room Image Detail [/v2/property/{id}/room/{id2}/image/{id3}]

+ Parameters

    + id (required, integer, `2`) ... The id of the Property
    + id2 (required, integer, `2`) ... The id of the Room 
    + id3 (required, integer, `3`) ... The id of the RoomImage 

### Get the details of a Room Image [GET]

+ Response 200 (application/json)

        {
                "id": 3,
                "propertyimage": {
                    "id": 8,
                    "created": "2015-12-21 14:57:05",
                    "image": {
                        "id": 3,
                        "name": "placeholder.jpg",
                        "filename": "placeholder.jpg",
                        "timeadded": "2014-01-01 12:00:00",
                        "weight": 0,
                        "private": false,
                        "description": "Here is a placeholder image",
                        "mimetype": {
                            "id": 2,
                            "name": "image/jpeg",
                            "shortname": "jpg"
                        },
                        "file": "/v2/file/3",
                        "height": 300,
                        "width": 200,
                        "alt": "An image"
                    }
                }
            }

### Update a Room Image [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output.
Not implemented

+ Response 501

### Delete a Room Image [DELETE]

+ Response 204



## SecurityFeature Index [/v2/securityfeature]
### Get all SecurityFeatures [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Key Safe"
            },
            {
                "id": 2,
                "name": "Key Code"
            },
            {
                "id": 3,
                "name": "Alarm Code"
            }
        ]

### Add a new SecurityFeature [POST]

The following fields should be provided in the POST array

* ```name``` The name of the Security Feature being added

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/securityfeature/2

## SecurityFeature Detail [/v2/securityfeature/{id}]
+ Parameters

    + id (required, integer, `1`) ... The id of the SecurityFeature to get

### Gets the details of a SecurityFeature [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "Key Safe"
        }

### Update a SecurityFeature [PUT]

+ Request (application/x-www-form-urlencoded)

        name=Keysafe

+ Response 204

### Deletes a SecurityFeature [DELETE]

+ Response 204




## Property Supplier Service Charge Index [/v2/property/{id}/supplier/{id2}/service/{id3}/charge]

+ Parameters

    + id (required, integer, `2`) ... The id of the Property
    + id2 (required, integer, `3`) ... The id of the PropertySupplier
    + id3 (required, integer, `1`) ... The id of the PropertySupplierService

### Get all Charges for a Property Supplier Service [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "type": "OwnerCharge",
              "fromdate": "2016-10-01",
              "todate": "2016-10-30",
              "charge": "29.99",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "autoaddcustomer": true,
              "autoaddowner": true,
              "includesvat": true,
              "ownerchargecode": {
                "id": 1,
                "ownerchargecode": "ADM",
                "description": "Administration Charge",
                "vatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "recharge": false
              }
            },
            {
              "id": 2,
              "type": "OwnerCharge",
              "fromdate": "2016-07-01",
              "todate": "2016-07-31",
              "charge": "29.99",
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "autoaddcustomer": true,
              "autoaddowner": true,
              "includesvat": true,
              "ownerchargecode": {
                "id": 1,
                "ownerchargecode": "ADM",
                "description": "Administration Charge",
                "vatband": {
                  "id": 2,
                  "vatband": "Standard"
                },
                "recharge": false
              }
            }
          ]

### Add a new Property Supplier Service Charge [POST]
The following fields should be provided in the POST array

* ```type``` How the charge is to be applied, via an owner charge (OwnerCharge) or using a work order template (WorkOrder)
* ```bookingtype``` Whether the service is to be provided for Customer, Owner or Agency Bookings
* ```fromdate``` The date the charge applies from
* ```todate``` The date the charge applies until
* ```charge``` The amount of the charge
* ```currencycode``` The currency the charge is in
* ```includesvat``` Whether the charge includes VAT
* ```vatbandid``` The VAT band applicable to the charge
* ```autoaddcustomer``` Whether to automatically add the charge to a customer booking at confirmation
* ```autoaddowner``` Whether to automatically add the charge to an owner booking at booking

For type=OwnerCharge:
* ```ownerchargecodeid``` The Owner Charge Code to use when adding the charge

For type=WorkOrder:
* ```workordertemplateid``` The Work Order Template to use to set up the Work Order

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/supplier/1/service/1/charge/1

## Property Supplier Service Charge Detail [/v2/property/{id}/supplier/{id2}/service/{id3}/charge/{id4}]

+ Parameters

    + id (required, integer, `2`) ... The id of the Property
    + id2 (required, integer, `3`) ... The id of the PropertySupplier
    + id3 (required, integer, `1`) ... The id of the PropertySupplierService
    + id4 (required, integer, `1`) ... The id of the ServiceCharge

### Get the details of a Property Supplier Service Charge [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "type": "OwnerCharge",
            "fromdate": "2016-10-01",
            "todate": "2016-10-30",
            "charge": "29.99",
            "currency": {
              "id": 1,
              "code": "GBP",
              "name": "Pound Sterling",
              "decimalplaces": 2
            },
            "vatband": {
              "id": 2,
              "vatband": "Standard"
            },
            "autoaddcustomer": true,
            "autoaddowner": true,
            "includesvat": true,
            "ownerchargecode": {
              "id": 1,
              "ownerchargecode": "ADM",
              "description": "Administration Charge",
              "vatband": {
                "id": 2,
                "vatband": "Standard"
              },
              "recharge": false
            }
          }

### Update a Property Supplier ServiceCharge [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output.

+ Request (application/x-www-form-urlencoded)

        charge=42.50

+ Response 204

### Delete a Property Supplier ServiceCharge [DELETE]

+ Response 204



## Property Supplier Service BookingEvent Index [/v2/property/{id}/supplier/{id2}/service/{id3}/bookingevent]

+ Parameters

    + id (required, integer, `2`) ... The id of the Property
    + id2 (required, integer, `3`) ... The id of the PropertySupplier
    + id3 (required, integer, `1`) ... The id of the PropertySupplierService

### Get all BookingEvents for a Property Supplier Service [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "event": {
                    "id": 2,
                    "event": "Confirmed",
                    "description": "The booking had a payment (either deposit or full balance) and is therefore confirmed"
                },
                "action": "Create"
            },
            {
                "id": 2,
                "event": {
                    "id": 3,
                    "event": "Cancelled",
                    "description": "The booking has been cancelled"
                },
                "action": "Cancel"
            }
        ]

### Add a new Property Supplier Service BookingEvent [POST]
The following fields should be provided in the POST array

* ```bookingeventid``` The id of the BookingEvent
* ```action```The action to take, Create (default) or Cancel

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/property/1/supplier/1/service/1/bookingevent/1

## Property Supplier Service BookingEvent Detail [/v2/property/{id}/supplier/{id2}/service/{id3}/bookingevent/{id4}]

+ Parameters

    + id (required, integer, `2`) ... The id of the Property
    + id2 (required, integer, `3`) ... The id of the PropertySupplier 
    + id3 (required, integer, `1`) ... The id of the PropertySupplierService
    + id4 (required, integer, `1`) ... The id of the ServiceBookingEvent 

### Get the details of a Property Supplier Service BookingEvent [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "event": {
                "id": 3,
                "event": "Cancelled",
                "description": "The booking has been cancelled"
            },
            "action": "Cancel"
        }

### Update a Property Supplier ServiceBookingEvent [PUT]
Not implemented

+ Response 501

### Delete a Property Supplier ServiceBookingEvent [DELETE]

+ Response 204



## Status Index [/v2/status]
The Status

### Get all Reasons for a Status [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "name": "Live",
              "allowbooking": true,
              "allowoverride": false,
              "priority": 10,
              "allowbalance": true
            },
            {
              "id": 2,
              "name": "New",
              "allowbooking": false,
              "allowoverride": false,
              "priority": 8,
              "allowbalance": true
            },
            {
              "id": 3,
              "name": "Suspended",
              "allowbooking": false,
              "allowoverride": true,
              "priority": 6,
              "allowbalance": true
            },
            {
              "id": 4,
              "name": "Withdrawn",
              "allowbooking": false,
              "allowoverride": false,
              "priority": 0,
              "allowbalance": false
            }
          ]

### Add a new Status [POST]
Not implemented.

+ Response 501

## Status Reason Details [/v2/status/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the Status

### Get the details of a Status [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "name": "New",
            "allowbooking": false,
            "allowoverride": false,
            "priority": 8,
            "allowbalance": true
          }

### Update a Status [PUT]

+ Response 501

### Delete a Status [DELETE]

+ Response 501





## Status Reason Index [/v2/status/{id}/reason]
The Reason a Status was set

+ Parameters

    + id (required, integer, `4`) ... The id of the Status

### Get all Reasons for a Status [GET]

+ Response 200 (application/json)

        [
            {
                "id": 4,
                "reason": "Withdrawn "
            },
            {
                "id": 5,
                "reason": "Owner Selling Property"
            },
            {
                "id": 6,
                "reason": "Owner choice - Poor booking levels"
            },
            {
                "id": 7,
                "reason": "Owner retiring/illness/died"
            },
            {
                "id": 8,
                "reason": "Owner marketing the property themselves"
            },
            {
                "id": 9,
                "reason": "Property going to another agency"
            },
            {
                "id": 10,
                "reason": "Property changing to residential letting"
            },
            {
                "id": 11,
                "reason": "Owner moving back into property/family use only"
            },
            {
                "id": 12,
                "reason": "Major refurbishments/redevelopment"
            },
            {
                "id": 13,
                "reason": "Not invited to renew - consistently poor standards"
            },
            {
                "id": 14,
                "reason": "Not invited to renew - lack of available weeks to us"
            },
            {
                "id": 15,
                "reason": "Building works nearby"
            },
            {
                "id": 16,
                "reason": "Dual agency - wouldn't go sole agency"
            },
            {
                "id": 17,
                "reason": "Too early to commit to next year"
            },
            {
                "id": 18,
                "reason": "Don't know reason"
            }
        ]

### Add a new Reason to a status [POST]
The following fields should be provided in the POST array. 

* ```reason``` The reason the status was set

+ Response 201

    + Headers

            Location: http://plato.apiary.io/v2/status/1/reason/2

## Status Reason Details [/v2/status/{id}/reason/{id2}]

+ Parameters

    + id (required, integer, `4`) ... The id of the Status
    + id2 (required, integer, `8`) ... The id of the StatusReason 

### Get the details of a Status Reason [GET]

+ Response 200 (application/json)

        {
            "id": 8,
            "reason": "Owner marketing the property themselves"
        }

### Update a Status Reason [PUT]

+ Request (application/x-www-form-urlencoded)

        reason=Property changing to residential letting

+ Response 204

### Delete a Status Reason [DELETE]

+ Response 204



## Property Target Index [/v2/property/{id}/target]
Target(s) for a Property / Year

+ Parameters

    + id (required, integer, `3`) ... The id of the Property

### Get all Targets for a Property [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "property": "/v2/property/3",
              "year": 2016,
              "daysbooked": 140
            },
            {
              "id": 2,
              "property": "/v2/property/3",
              "year": 2017,
              "daysbooked": 135
            }
          ]

### Add a new Target to a property [POST]
The following fields should be provided in the POST array.

* ```year``` The year the target applies to
* ```daysbooked``` The target for days booked

+ Response 201

    + Headers

            Location: http://plato.apiary.io/v2/property/1/target/2

## Property Target Details [/v2/property/{id}/target/{id2}]

+ Parameters

    + id (required, integer, `3`) ... The id of the Property
    + id2 (required, integer, `2`) ... The id of the PropertyTarget

### Get the details of a Property Target [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "property": "/v2/property/3",
            "year": 2017,
            "daysbooked": 135
          }

### Update a Property Target [PUT]

+ Request (application/x-www-form-urlencoded)

        daysbooked=150

+ Response 204

### Delete a Property Target [DELETE]

+ Response 204



# Group Report

## Reports [/v2/report]
### Retreive a list of Reports [GET]

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 1,
            "page": 1,
            "count": 1,
            "limit": 10,
            "time": 0,
            "orderBy": null,
            "filter": "",
            "previous": null,
            "next": null,
            "elements": [
              {
                "id": 1,
                "name": "Bookings Breakdown By Month 1",
                "description": "Bookings Breakdown By Month",
                "filename": "BookingsBreakdownByMonth.rptdesign",
                "parameters": [
                  {
                    "id": 1,
                    "name": "BookingFromDate",
                    "description": "",
                    "type": "string",
                    "defaultvalue": null,
                    "order": 0,
                    "required": false
                  },
                  {
                    "id": 2,
                    "name": "BookingToDate",
                    "description": "",
                    "type": "string",
                    "defaultvalue": null,
                    "order": 1,
                    "required": false
                  },
                  {
                    "id": 3,
                    "name": "ConfirmedFromDate",
                    "description": "",
                    "type": "string",
                    "defaultvalue": null,
                    "order": 2,
                    "required": false
                  },
                  {
                    "id": 4,
                    "name": "ConfirmedToDate",
                    "description": "",
                    "type": "string",
                    "defaultvalue": null,
                    "order": 3,
                    "required": false
                  }
                ],
                "category": ""
              }
            ]
          }

### Create a new Report [POST]
The following fields should be provided in the POST array

* ```file``` The .rptdesign file

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/report/1

## Report Detail [/v2/report/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Report

### Gets the details of a Report [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "Bookings Breakdown By Month 1",
            "description": "Bookings Breakdown By Month",
            "filename": "BookingsBreakdownByMonth.rptdesign",
            "parameters": [
              {
                "id": 1,
                "name": "BookingFromDate",
                "description": "",
                "type": "string",
                "defaultvalue": null,
                "order": 0,
                "required": false
              },
              {
                "id": 2,
                "name": "BookingToDate",
                "description": "",
                "type": "string",
                "defaultvalue": null,
                "order": 1,
                "required": false
              },
              {
                "id": 3,
                "name": "ConfirmedFromDate",
                "description": "",
                "type": "string",
                "defaultvalue": null,
                "order": 2,
                "required": false
              },
              {
                "id": 4,
                "name": "ConfirmedToDate",
                "description": "",
                "type": "string",
                "defaultvalue": null,
                "order": 3,
                "required": false
              }
            ],
            "category": ""
          }

### Delete a Report [DELETE]

+ Response 204


## Report Run [/v2/report/{id}/run]

+ Parameters

    + id (required, integer, `1`) ... The id of the Report to run

### Run a report [POST]
The following fields should be provided in the POST array

* ```_recipients``` A comma-separated list of email addresses to send the report to
* ```_format``` The desired output file format, either xls (the default) or pdf
* ```?``` Any parameters to pass into the report
+ Response 201


## CronTasks [/v2/crontask]
### Retreive a list of CronTasks [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "schedule": "Every ten minutes",
              "type": "Report",
              "lastrundatetime": "2016-09-12 03:46:01",
              "method": "runReport",
              "url": "/v2/report/234/run",
              "parameters": "Brand=NO",
              "headers": "Authorization=cdsdfhsdcdukvffdnm432432rmdsadweyq72386edtgyuw"
            }
          ]

### Create a new CronTask [POST]
The following fields should be provided in the POST array

* ```schedule```
* ```type```
* ```lastrundatetime```
* ```method```
* ```url```
* ```parameters```
* ```headers```

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/crontask/1

## CronTask Detail [/v2/crontask/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the CronTask

### Gets the details of a CronTask [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "schedule": "Every ten minutes",
            "type": "Report",
            "lastrundatetime": "2016-09-12 03:46:01",
            "method": "runReport",
            "url": "/v2/report/234/run",
            "parameters": "Brand=NO",
            "headers": "Authorization=cdsdfhsdcdukvffdnm432432rmdsadweyq72386edtgyuw"
          }

### Update a CronTask [PUT]

+ Response 204

### Delete a CronTask [DELETE]

+ Response 204



# Group Scheduler

## ScheduledEvent Index [/v2/scheduledevent]

### Retreive a list of ScheduledEvents [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "label": "Confirmed Customer Bookings",
                "filter": "balancepaiddate=yesterday/tomorrow:confirmedbooking=true:transferredbooking=false",
                "filtercontext": "Booking",
                "frequency": "now",
                "sendonce": false,
                "inactive": false,
                "nextrundate": "2016-09-08 12:30:45",
                "createddatetime": "2016-09-08 12:36:02",
                "lastprocesseddatetime": null,
                "createdbytabsuser": "/v2/tabsuser/1",
                "templatecontactmethods": [
                    {
                        "id": 1,
                        "templatecontactmethod": "/v2/template/2/contactmethod/4"
                    },
                    {
                        "id": 2,
                        "templatecontactmethod": "/v2/template/7/contactmethod/10"
                    },
                    {
                        "id": 3,
                        "templatecontactmethod": "/v2/template/8/contactmethod/12"
                    }
                ]
            },
            {
                "id": 2,
                "label": "Confirmed Owner Bookings",
                "filter": "type=Owner:bookeddate=yesterday/tomorrow",
                "filtercontext": "Booking",
                "frequency": "now",
                "sendonce": false,
                "inactive": false,
                "nextrundate": "2016-09-08 12:30:45",
                "createddatetime": "2016-09-08 12:36:02",
                "lastprocesseddatetime": null,
                "createdbytabsuser": "/v2/tabsuser/1",
                "templatecontactmethods": []
            },
            {
                "id": 3,
                "label": "Deposits Due",
                "filter": "type=Customer:depositduedate=yesterday/tomorrow:transferredbooking=false",
                "filtercontext": "Booking",
                "frequency": "now",
                "sendonce": false,
                "inactive": false,
                "nextrundate": "2016-09-08 12:30:45",
                "createddatetime": "2016-09-08 12:36:02",
                "lastprocesseddatetime": null,
                "createdbytabsuser": "/v2/tabsuser/1",
                "templatecontactmethods": [
                    {
                        "id": 4,
                        "templatecontactmethod": "/v2/template/4/contactmethod/6"
                    }
                ]
            },
            {
                "id": 4,
                "label": "Deposit Paid",
                "filter": "type=Customer:depositpaiddate=yesterday/tomorrow",
                "filtercontext": "Booking",
                "frequency": "now",
                "sendonce": false,
                "inactive": false,
                "nextrundate": "2016-09-08 12:30:45",
                "createddatetime": "2016-09-08 12:36:02",
                "lastprocesseddatetime": null,
                "createdbytabsuser": "/v2/tabsuser/1",
                "templatecontactmethods": [
                    {
                        "id": 5,
                        "templatecontactmethod": "/v2/template/3/contactmethod/5"
                    }
                ]
            },
            {
                "id": 5,
                "label": "Balance Due",
                "filter": "type=Customer:balanceduedate=yesterday/tomorrow",
                "filtercontext": "Booking",
                "frequency": "now",
                "sendonce": false,
                "inactive": false,
                "nextrundate": "2016-09-08 12:30:45",
                "createddatetime": "2016-09-08 12:36:02",
                "lastprocesseddatetime": null,
                "createdbytabsuser": "/v2/tabsuser/1",
                "templatecontactmethods": [
                    {
                        "id": 6,
                        "templatecontactmethod": "/v2/template/5/contactmethod/7"
                    }
                ]
            },
            {
                "id": 6,
                "label": "Any Provisional Bookings",
                "filter": "transferredbooking=false:cancelledbooking=false:provisionalbooking=true",
                "filtercontext": "Booking",
                "frequency": "now",
                "sendonce": false,
                "inactive": true,
                "nextrundate": "2016-09-08 12:30:45",
                "createddatetime": "2016-09-08 12:36:02",
                "lastprocesseddatetime": null,
                "createdbytabsuser": "/v2/tabsuser/1",
                "templatecontactmethods": [
                    {
                        "id": 7,
                        "templatecontactmethod": "/v2/template/1/contactmethod/1"
                    }
                ]
            }
        ]

### Create a new ScheduledEvent [POST]
The following fields should be provided in the POST array

* ```filter``` Filter query string specifying the bookings etc
* ```filtercontext``` The filter context e.g. Booking, Customer etc
* ```frequency``` How and when we should check for items meeting the schedule requirements
* ```sendonce``` Whether the item should be sent once only
* ```createddatetime``` Date and time created
* ```lastprocesseddatetime``` Date and time this schedule was last run
* ```createdbytabsuserid``` Id of the tabs user creating the schedule

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/scheduledevent/1


## ScheduledEvent Detail [/v2/scheduledevent/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the ScheduledEvent

### Gets the details of a ScheduledEvent [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "label": "Confirmed Customer Bookings",
            "filter": "balancepaiddate=yesterday/tomorrow:confirmedbooking=true:transferredbooking=false",
            "filtercontext": "Booking",
            "frequency": "now",
            "sendonce": false,
            "inactive": false,
            "nextrundate": "2016-09-08 12:30:45",
            "createddatetime": "2016-09-08 12:36:02",
            "lastprocesseddatetime": null,
            "createdbytabsuser": "/v2/tabsuser/1",
            "templatecontactmethods": [
                {
                    "id": 1,
                    "templatecontactmethod": "/v2/template/2/contactmethod/4"
                },
                {
                    "id": 2,
                    "templatecontactmethod": "/v2/template/7/contactmethod/10"
                },
                {
                    "id": 3,
                    "templatecontactmethod": "/v2/template/8/contactmethod/12"
                }
            ]
        }

### Update the details of a ScheduledEvent [PUT]

+ Request (application/x-www-form-urlencoded)

        lastprocesseddatetime=2016-09-07 12:43:14

+ Response 204

### Delete a ScheduledEvent [DELETE]

+ Response 501




## ScheduledEvent TemplateContactMethod Index [/v2/scheduledevent/{id}/templatecontactmethod]
+ Parameters

    + id (required, integer, `1`) ... The id of the ScheduledEvent

### Get all TemplateContactMethods for a ScheduledEvent [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "templatecontactmethod": "/v2/template/1/contactmethod/1"
            }
        ]

### Add a new TemplateContactMethod to a ScheduledEvent Template [POST]

The following fields should be provided in the POST array

* ```templatecontactmethodid``` The id of the templatecontactmethod

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/scheduledevent/4/templatecontactmethod/4

## ScheduledEvent TemplateContactMethod Detail [/v2/scheduledevent/{id}/templatecontactmethod/{id2}]
+ Parameters

    + id (required, integer, `1`) ... The id of the ScheduledEvent
    + id2 (required, integer, `1`) ... The id of the TemplateContactMethod

### Gets the details of a ScheduledEvent TemplateContactMethod [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "templatecontactmethod": "/v2/template/1/contactmethod/1"
        }

### Update a ScheduledEvent TemplateContactMethod [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. templatecontactmethodid=6

+ Response 501

### Deletes a ScheduledEvent TemplateContactMethod [DELETE]

+ Response 204



## SchedulerLastRun Index [/v2/schedulerlastrun]

### Retreive a list of SchedulerLastRuns [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "lastrundatetime": "2016-09-08 12:30:45"
            }
          ]

### Create a new SchedulerLastRun [POST]

+ Response 501

## SchedulerLastRun Detail [/v2/schedulerlastrun/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the SchedulerLastRun to get

### Gets the details of an SchedulerLastRun [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "lastrundatetime": "2016-09-08 12:30:45"
          }

### Update the details of an SchedulerLastRun [PUT]

+ Request (application/x-www-form-urlencoded)

        lastrundatetime=2016-09-07 12:43:14

+ Response 204

### Delete an SchedulerLastRun [DELETE]

+ Response 501



# Group Setting
The setting endpoint returns the value of a specified setting

## Setting Index [/v2/setting]
### Retrieves a list of Settings. [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "name": "Credit Card Commission",
              "description": "The commission charged on credit card transactions",
              "type": "Number",
              "minimumvalue": 0,
              "maximumvalue": 5,
              "decimalplaces": 2,
              "defaultvalue": 1.75,
              "entitysettings": [
                {
                  "id": 1,
                  "entity": "Branding",
                  "mandatory": true,
                  "defaultvalue": "2.1",
                  "values": [
                    {
                      "id": 1,
                      "entity": "Branding",
                      "entityid": 1,
                      "value": "2"
                    },
                    {
                      "id": 2,
                      "entity": "Branding",
                      "entityid": 2,
                      "value": "2.25"
                    }
                  ]
                }
              ]
            },
            {
              "id": 2,
              "name": "Web Database",
              "description": "Settings to be used to access the web database",
              "type": "JSON",
              "defaultvalue": "0",
              "entitysettings": []
            },
            {
              "id": 3,
              "name": "Owner Maint Charge",
              "description": "Percentage charged on top of supplier invoice",
              "type": "Number",
              "minimumvalue": 0,
              "maximumvalue": 0,
              "decimalplaces": 1,
              "defaultvalue": 10,
              "entitysettings": [
                {
                  "id": 2,
                  "entity": "Branding",
                  "mandatory": false,
                  "defaultvalue": "7.5",
                  "values": [
                    {
                      "id": 3,
                      "entity": "Branding",
                      "entityid": 3,
                      "value": "12.5"
                    }
                  ]
                },
                {
                  "id": 3,
                  "entity": "Owner",
                  "mandatory": false,
                  "defaultvalue": "",
                  "values": [
                    {
                      "id": 4,
                      "entity": "Owner",
                      "entityid": 15,
                      "value": "11"
                    }
                  ]
                }
              ]
            },
            {
              "id": 4,
              "name": "Deposit Due Days",
              "description": "The number of days after the booking is taken that the deposit is due",
              "type": "Number",
              "minimumvalue": 0,
              "maximumvalue": 0,
              "decimalplaces": 0,
              "defaultvalue": 7,
              "entitysettings": [
                {
                  "id": 4,
                  "entity": "Branding",
                  "mandatory": true,
                  "defaultvalue": "56",
                  "values": [
                    {
                      "id": 5,
                      "entity": "Branding",
                      "entityid": 1,
                      "value": "49"
                    },
                    {
                      "id": 6,
                      "entity": "Branding",
                      "entityid": 2,
                      "value": "28 "
                    },
                    {
                      "id": 9,
                      "entity": "Branding",
                      "entityid": 3,
                      "value": "56"
                    }
                  ]
                }
              ]
            },
            {
              "id": 5,
              "name": "Balance Due Days",
              "description": "The number of days before the booking starts that the balance is due",
              "type": "Number",
              "minimumvalue": 0,
              "maximumvalue": 0,
              "decimalplaces": 0,
              "defaultvalue": 10,
              "entitysettings": [
                {
                  "id": 5,
                  "entity": "Branding",
                  "mandatory": true,
                  "defaultvalue": "14",
                  "values": [
                    {
                      "id": 7,
                      "entity": "Branding",
                      "entityid": 1,
                      "value": "14"
                    },
                    {
                      "id": 8,
                      "entity": "Branding",
                      "entityid": 2,
                      "value": "7"
                    },
                    {
                      "id": 10,
                      "entity": "Branding",
                      "entityid": 3,
                      "value": "14"
                    }
                  ]
                }
              ]
            },
            {
              "id": 6,
              "name": "Agency Extra Income Nominal Code",
              "description": "The default Nominal Code to assign new Agency Extra Income to",
              "type": "String",
              "defaultvalue": "4320",
              "entitysettings": []
            },
            {
              "id": 7,
              "name": "Owner Extra Income Nominal Code",
              "description": "The default Nominal Code to assign new Owner Extra Income to",
              "type": "String",
              "defaultvalue": "2102",
              "entitysettings": []
            },
            {
              "id": 8,
              "name": "Owner Charge Income Nominal Code",
              "description": "The default Nominal Code to assign new Owner Charge Income to",
              "type": "String",
              "defaultvalue": "4405",
              "entitysettings": []
            },
            {
              "id": 9,
              "name": "Payment Method Nominal Code",
              "description": "The default Nominal Code to assign new Payment Methods to",
              "type": "String",
              "defaultvalue": "2132",
              "entitysettings": []
            },
            {
              "id": 10,
              "name": "Cancellation Offset Extra",
              "description": "The extra code to be used to offset the Brochure Price when doing a full refund cancellation",
              "type": "String",
              "defaultvalue": "COFF",
              "entitysettings": [
                {
                  "id": 6,
                  "entity": "Branding",
                  "mandatory": true,
                  "defaultvalue": "COFF",
                  "values": []
                }
              ]
            },
            {
              "id": 11,
              "name": "Party Size Pricing Note",
              "description": "The text to be shown on screen and comms when a booking has Reduced Occupancy Pricing",
              "type": "String",
              "defaultvalue": "N.B. A 'Reduced Occupancy Discount' (ROD) has been applied to this booking. Please ensure that your party numbers do not exceed the maximum permitted under the terms of this ROD. If additional bedrooms, bed linen and/or towels are required for your holiday please contact our office before your arrival for confirmation of charges.",
              "entitysettings": [
                {
                  "id": 7,
                  "entity": "Branding",
                  "mandatory": true,
                  "defaultvalue": "N.B. A 'Reduced Occupancy Discount' (ROD) has been applied to this booking. Please ensure that your party numbers do not exceed the maximum permitted under the terms of this ROD. If additional bedrooms, bed linen and/or towels are required for your holiday please contact our office before your arrival for confirmation of charges.",
                  "values": []
                },
                {
                  "id": 8,
                  "entity": "Property",
                  "mandatory": true,
                  "defaultvalue": "N.B. A 'Reduced Occupancy Discount' (ROD) has been applied to this booking. Please ensure that your party numbers do not exceed the maximum permitted under the terms of this ROD. If additional bedrooms, bed linen and/or towels are required for your holiday please contact our office before your arrival for confirmation of charges.",
                  "values": []
                }
              ]
            },
            {
              "id": 12,
              "name": "Booking Fee Extra",
              "description": "The Booking Fee extra code",
              "type": "String",
              "defaultvalue": "BKFE",
              "entitysettings": []
            },
            {
              "id": 13,
              "name": "Property Rating Inspection Type",
              "description": "Inspection Type to use for proerty ratings",
              "type": "String",
              "defaultvalue": "VisitEngland",
              "entitysettings": [
                {
                  "id": 9,
                  "entity": "Branding",
                  "mandatory": true,
                  "defaultvalue": "VisitEngland",
                  "values": []
                },
                {
                  "id": 10,
                  "entity": "Property",
                  "mandatory": true,
                  "defaultvalue": "VisitEngland",
                  "values": []
                }
              ]
            }
          ]

### Add a new Setting [POST]
Not implemented - settings can only be added as part of a development

+ Response 501


## Setting Detail [/v2/setting/{id}]
### Retrieves details of a Setting [GET]
+ Parameters

    + id (required, integer, `3`) ... The id of the Setting


+ Response 200 (application/json)

        {
            "id": 3,
            "name": "Owner Maint Charge",
            "description": "Percentage charged on top of supplier invoice",
            "type": "Number",
            "minimumvalue": 0,
            "maximumvalue": 10000,
            "decimalplaces": 1,
            "defaultvalue": 10,
            "entitysettings": [
                {
                    "id": 2,
                    "entity": "Branding",
                    "mandatory": false,
                    "defaultvalue": "7.5",
                    "values": [
                        {
                            "id": 3,
                            "entity": "Branding",
                            "entityid": 3,
                            "value": "12.5"
                        }
                    ]
                },
                {
                    "id": 3,
                    "entity": "Owner",
                    "mandatory": false,
                    "defaultvalue": "",
                    "values": [
                        {
                            "id": 4,
                            "entity": "Owner",
                            "entityid": 15,
                            "value": "11"
                        }
                    ]
                }
            ]
        }

### Update a Setting [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. minimumvalue=5

+ Parameter

    + id (required, integer, `1`) ... The id of the Setting

+ Response 204

### Delete a Setting [DELETE]
Not implemented

+ Parameters

    + id (required, integer, `1`) ... The id of the Setting

+ Response 501


## Setting Value [/v2/setting/{id}/value{?parameters}]
### Retrieves the value of the setting, for the parameters supplied. [GET]
If no 'parameters' query field is supplied, then the default value is returned as 'value' with type=SettingDefault
If a parameters query field is supplied the applicable value is returned as 'value', with type=Value.
e.g. if the parameters query field is 'property=4:branding=3' then the value returned will be the first of the following:
- the value for property 4 (type=Value)
- the value for branding 3 (type=Value)
- the default value for the 'Property' entity, if it is not null (type=SettingDefault)
- the default value for the 'Branding' entity, if not null (type=SettingDefault)
- the default value for the setting (type=EntityDefault)

+ Parameters

    + id (required, integer, `3`) ... The id of the Setting
    + parameters (optional, string, `owner=15:branding=3`) ... The entity/id pairs to use to find the setting value, tried in order

+ Response 200 (application/json)

        {
            "type": "Value",
            "value": "11",
            "settingvalue": {
                "id": 4,
                "entity": "Owner",
                "entityid": 15,
                "value": "11"
            }
        }

## Setting Entity [/v2/settingentity]
### Retrieves a list of Setting Types. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "entityclassname": "Global"
            },
            {
                "id": 2,
                "entityclassname": "Branding"
            },
            {
                "id": 3,
                "entityclassname": "MarketingBrand"
            },
            {
                "id": 4,
                "entityclassname": "BookingBrand"
            },
            {
                "id": 5,
                "entityclassname": "Property"
            },
            {
                "id": 6,
                "entityclassname": "Owner"
            }
        ]





## Entity Setting Index [/v2/setting/{id}/entity]
### Retrieves a list of Entity Settings [GET]
+ Parameters

    + id (required, integer, `3`) ... The id of the Setting

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "entity": "Branding",
                "mandatory": false,
                "defaultvalue": "7.5",
                "values": [
                    {
                        "id": 3,
                        "entity": "Branding",
                        "entityid": 3,
                        "value": "12.5"
                    }
                ]
            },
            {
                "id": 3,
                "entity": "Owner",
                "mandatory": false,
                "defaultvalue": "",
                "values": [
                    {
                        "id": 4,
                        "entity": "Owner",
                        "entityid": 15,
                        "value": "11"
                    }
                ]
            }
        ]

### Add a new Entity for a Setting [POST]

The following fields should be provided in the POST array

* ```entity``` The class name of the entity the setting can be set for
* ```defaultvalue``` The default value for this class of entity

+ Parameters

    + id (required, integer, `1`) ... The id of the Setting

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/setting/4/entity/4


## Entity Setting Detail [/v2/setting/{id}/entity/{id2}]
### Retrieve details of an Entity Setting [GET]
+ Parameters

    + id (required, integer, `3`) ... The id of the Setting
    + id2 (required, integer, `3`) ... The id of the EntitySetting


+ Response 200 (application/json)

        {
            "id": 3,
            "entity": "Owner",
            "mandatory": false,
            "defaultvalue": "",
            "values": [
                {
                    "id": 4,
                    "entity": "Owner",
                    "entityid": 15,
                    "value": "11"
                }
            ]
        }

### Update an Entity Setting [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. defaultvalue=true

+ Parameter

    + id (required, integer, `1`) ... The id of the Setting
    + id2 (required, integer, `1`) ... The id of the SettingEntity to update

+ Response 204

### Delete an Entity Setting [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the Setting
    + id2 (required, integer, `1`) ... The id of the SettingEntity to delete

+ Response 204




## Setting Value Index [/v2/setting/{id}/entity/{id2}/value]
### Retrieve the Values for an Entity Setting. [GET]

+ Parameters

    + id (required, integer, `3`) ... The id of the Setting
    + id2 (required, integer, `2`) ... The id of the EntitySetting

+ Response 200 (application/json)

        [
            {
                "id": 3,
                "entity": "Branding",
                "entityid": 3,
                "value": "12.5"
            }
        ]

### Add a new Setting Value [POST]

The following fields should be provided in the POST array

* ```entityid``` The id of the entity the setting applies to
* ```value``` The value

+ Parameters

    + id (required, integer, `1`) ... The id of the Setting
    + id2 (required, integer, `1`) ... The id of the EntitySetting

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/setting/1/entity/1/value/3

## Setting Value Detail [/v2/setting/{id}/entity/{id2}/value/{id3}]
### Get the details of a Setting Value [GET]
+ Parameters

    + id (required, integer, `3`) ... The id of the Setting
    + id2 (required, integer, `2`) ... The id of the EntitySetting
    + id3 (required, integer, `3`) ... The id of the SettingValue to get

+ Response 200 (application/json)

        {
            "id": 3,
            "entity": "Branding",
            "entityid": 3,
            "value": "12.5"
        }

### Update a Setting Value [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. value=true

+ Parameter

    + id (required, integer, `1`) ... The id of the Setting
    + id2 (required, integer, `1`) ... The id of the EntitySetting
    + id3 (required, integer, `4`) ... The id of the SettingValue

+ Response 204

### Delete a Setting Value [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the Setting
    + id2 (required, integer, `1`) ... The id of the EntitySetting
    + id3 (required, integer, `4`) ... The id of the SettingValue

+ Response 204




# Group Special Offer

## Special Offer [/v2/specialoffer]
A Special Offer is a set of criteria and an amount

### Retrieve a list of Special Offers. [GET]

+ Response 200 (application/json)

        {
          "searchId": 0,
          "total": 22,
          "page": 1,
          "count": 10,
          "limit": 10,
          "time": 0,
          "orderBy": null,
          "filter": "",
          "previous": null,
          "next": "/v2/specialoffer?page=2&limit=10",
          "elements": [
            {
              "id": 15,
              "type": "Fixed",
              "active": true,
              "archived": false,
              "archiveddatetime": "",
              "archivedby": "",
              "pricingperiod": {
                "id": 2,
                "pricingperiod": "Week",
                "days": 0,
                "weeks": 1,
                "months": 0,
                "subperiod": "Day"
              },
              "description": "450 GBP for small parties",
              "officedescription": "",
              "minimumholidaylength": 12,
              "maximumholidaylength": 28,
              "minimumoccupancy": 0,
              "maximumoccupancy": 4,
              "minimumdaysbeforeholiday": 21,
              "maximumdaysbeforeholiday": 50,
              "daysbeforeappliestowholeholiday": false,
              "additional": false,
              "advertise": true,
              "changedaystartfinishonly": false,
              "haspromotions": false,
              "promotion": [],
              "confirmedbookingsinperiod": 0,
              "commissionpercentage": null,
              "fixedprice": 450,
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "perperiod": true
            },
            {
              "id": 16,
              "type": "Fixed",
              "active": true,
              "archived": false,
              "archiveddatetime": "",
              "archivedby": "",
              "pricingperiod": {
                "id": 2,
                "pricingperiod": "Week",
                "days": 0,
                "weeks": 1,
                "months": 0,
                "subperiod": "Day"
              },
              "description": "375 GBP per week",
              "officedescription": "",
              "minimumholidaylength": 0,
              "maximumholidaylength": 999,
              "minimumoccupancy": 0,
              "maximumoccupancy": 999,
              "minimumdaysbeforeholiday": 0,
              "maximumdaysbeforeholiday": 9999,
              "daysbeforeappliestowholeholiday": false,
              "additional": false,
              "advertise": true,
              "changedaystartfinishonly": false,
              "haspromotions": false,
              "promotion": [],
              "confirmedbookingsinperiod": 0,
              "commissionpercentage": null,
              "fixedprice": 375,
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "perperiod": true
            },
            {
              "id": 17,
              "type": "Fixed",
              "active": true,
              "archived": false,
              "archiveddatetime": "",
              "archivedby": "",
              "pricingperiod": {
                "id": 2,
                "pricingperiod": "Week",
                "days": 0,
                "weeks": 1,
                "months": 0,
                "subperiod": "Day"
              },
              "description": "375 GBP",
              "officedescription": "",
              "minimumholidaylength": 0,
              "maximumholidaylength": 999,
              "minimumoccupancy": 0,
              "maximumoccupancy": 999,
              "minimumdaysbeforeholiday": 0,
              "maximumdaysbeforeholiday": 9999,
              "daysbeforeappliestowholeholiday": false,
              "additional": false,
              "advertise": true,
              "changedaystartfinishonly": false,
              "haspromotions": false,
              "promotion": [],
              "confirmedbookingsinperiod": 0,
              "commissionpercentage": null,
              "fixedprice": 375,
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "perperiod": false
            },
            {
              "id": 18,
              "type": "Fixed",
              "active": true,
              "archived": false,
              "archiveddatetime": "",
              "archivedby": "",
              "pricingperiod": {
                "id": 2,
                "pricingperiod": "Week",
                "days": 0,
                "weeks": 1,
                "months": 0,
                "subperiod": "Day"
              },
              "description": "315 GBP per week",
              "officedescription": "",
              "minimumholidaylength": 0,
              "maximumholidaylength": 999,
              "minimumoccupancy": 0,
              "maximumoccupancy": 999,
              "minimumdaysbeforeholiday": 0,
              "maximumdaysbeforeholiday": 9999,
              "daysbeforeappliestowholeholiday": false,
              "additional": false,
              "advertise": true,
              "changedaystartfinishonly": false,
              "haspromotions": false,
              "promotion": [],
              "confirmedbookingsinperiod": 0,
              "commissionpercentage": null,
              "fixedprice": 315,
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "perperiod": true
            },
            {
              "id": 1,
              "type": "Amount",
              "active": true,
              "archived": false,
              "archiveddatetime": "",
              "archivedby": "",
              "pricingperiod": {
                "id": 2,
                "pricingperiod": "Week",
                "days": 0,
                "weeks": 1,
                "months": 0,
                "subperiod": "Day"
              },
              "description": "50 GBP off",
              "officedescription": "",
              "minimumholidaylength": 12,
              "maximumholidaylength": 28,
              "minimumoccupancy": 0,
              "maximumoccupancy": 4,
              "minimumdaysbeforeholiday": 21,
              "maximumdaysbeforeholiday": 50,
              "daysbeforeappliestowholeholiday": true,
              "additional": true,
              "advertise": true,
              "changedaystartfinishonly": false,
              "haspromotions": true,
              "promotion": [],
              "confirmedbookingsinperiod": 1,
              "commissionpercentage": null,
              "amount": 50,
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "perperiod": true,
              "applytopartysizepricing": false
            },
            {
              "id": 2,
              "type": "Amount",
              "active": true,
              "archived": false,
              "archiveddatetime": "",
              "archivedby": "",
              "pricingperiod": {
                "id": 2,
                "pricingperiod": "Week",
                "days": 0,
                "weeks": 1,
                "months": 0,
                "subperiod": "Day"
              },
              "description": "75 GBP off",
              "officedescription": "",
              "minimumholidaylength": 0,
              "maximumholidaylength": 14,
              "minimumoccupancy": 6,
              "maximumoccupancy": 8,
              "minimumdaysbeforeholiday": 0,
              "maximumdaysbeforeholiday": 10,
              "daysbeforeappliestowholeholiday": false,
              "additional": false,
              "advertise": true,
              "changedaystartfinishonly": true,
              "haspromotions": false,
              "promotion": [],
              "confirmedbookingsinperiod": 0,
              "commissionpercentage": null,
              "amount": 75,
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "perperiod": false,
              "applytopartysizepricing": false
            },
            {
              "id": 3,
              "type": "Amount",
              "active": true,
              "archived": false,
              "archiveddatetime": "",
              "archivedby": "",
              "pricingperiod": {
                "id": 2,
                "pricingperiod": "Week",
                "days": 0,
                "weeks": 1,
                "months": 0,
                "subperiod": "Day"
              },
              "description": "70 GBP discount per booking",
              "officedescription": "",
              "minimumholidaylength": 0,
              "maximumholidaylength": 999,
              "minimumoccupancy": 0,
              "maximumoccupancy": 999,
              "minimumdaysbeforeholiday": 0,
              "maximumdaysbeforeholiday": 9999,
              "daysbeforeappliestowholeholiday": false,
              "additional": true,
              "advertise": false,
              "changedaystartfinishonly": false,
              "haspromotions": false,
              "promotion": [],
              "confirmedbookingsinperiod": 0,
              "commissionpercentage": null,
              "amount": 70,
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "perperiod": false,
              "applytopartysizepricing": false
            },
            {
              "id": 4,
              "type": "Amount",
              "active": true,
              "archived": false,
              "archiveddatetime": "",
              "archivedby": "",
              "pricingperiod": {
                "id": 2,
                "pricingperiod": "Week",
                "days": 0,
                "weeks": 1,
                "months": 0,
                "subperiod": "Day"
              },
              "description": "70 GBP discount per period",
              "officedescription": "",
              "minimumholidaylength": 0,
              "maximumholidaylength": 999,
              "minimumoccupancy": 0,
              "maximumoccupancy": 999,
              "minimumdaysbeforeholiday": 0,
              "maximumdaysbeforeholiday": 9999,
              "daysbeforeappliestowholeholiday": false,
              "additional": false,
              "advertise": false,
              "changedaystartfinishonly": false,
              "haspromotions": false,
              "promotion": [],
              "confirmedbookingsinperiod": 0,
              "commissionpercentage": null,
              "amount": 70,
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "perperiod": true,
              "applytopartysizepricing": false
            },
            {
              "id": 5,
              "type": "Amount",
              "active": true,
              "archived": false,
              "archiveddatetime": "",
              "archivedby": "",
              "pricingperiod": {
                "id": 2,
                "pricingperiod": "Week",
                "days": 0,
                "weeks": 1,
                "months": 0,
                "subperiod": "Day"
              },
              "description": "70 GBP discount per booking",
              "officedescription": "",
              "minimumholidaylength": 0,
              "maximumholidaylength": 999,
              "minimumoccupancy": 0,
              "maximumoccupancy": 999,
              "minimumdaysbeforeholiday": 0,
              "maximumdaysbeforeholiday": 9999,
              "daysbeforeappliestowholeholiday": false,
              "additional": true,
              "advertise": false,
              "changedaystartfinishonly": false,
              "haspromotions": false,
              "promotion": [],
              "confirmedbookingsinperiod": 0,
              "commissionpercentage": null,
              "amount": 70,
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "perperiod": false,
              "applytopartysizepricing": true
            },
            {
              "id": 6,
              "type": "Amount",
              "active": true,
              "archived": false,
              "archiveddatetime": "",
              "archivedby": "",
              "pricingperiod": {
                "id": 2,
                "pricingperiod": "Week",
                "days": 0,
                "weeks": 1,
                "months": 0,
                "subperiod": "Day"
              },
              "description": "70 GBP discount per period",
              "officedescription": "",
              "minimumholidaylength": 0,
              "maximumholidaylength": 999,
              "minimumoccupancy": 0,
              "maximumoccupancy": 999,
              "minimumdaysbeforeholiday": 0,
              "maximumdaysbeforeholiday": 9999,
              "daysbeforeappliestowholeholiday": false,
              "additional": false,
              "advertise": false,
              "changedaystartfinishonly": false,
              "haspromotions": false,
              "promotion": [],
              "confirmedbookingsinperiod": 0,
              "commissionpercentage": null,
              "amount": 70,
              "currency": {
                "id": 1,
                "code": "GBP",
                "name": "Pound Sterling",
                "decimalplaces": 2
              },
              "perperiod": true,
              "applytopartysizepricing": true
            }
          ]
        }

### Add a new Special Offer [POST]

The following fields should be provided in the POST array

* ```type``` The type of offer, e.g. Amount, Fixed, Percentage, PriceTypeForPriceType
* ```description``` The description of the offer
* ```officedescription``` The office version of the description of the offer
* ```minimumholidaylength``` The minimum holiday length the offer applies to (optional, default=1)
* ```maximumholidaylength``` The maximum holiday length the offer applies to (optional, default=999)
* ```minimumoccupancy``` The minimum occupancy the offer applies to (optional, default=0)
* ```maximumoccupancy``` The maximum occupancy the offer applies to (optional, default=999)
* ```minimumdaysbeforeholiday``` The minimum days before the holiday the booking must be made (optional, default=0)
* ```maximumdaysbeforeholiday``` The maximum days before the holiday the booking can be made (optional, default=9999)
* ```daysbeforeappliestowholeholiday``` Whether the discount applies to the whole holiday if a 'days before holiday' restriction is applied
* ```additional``` Whether the offer should be applied in addition to the lowest non-additional offer (optional, default=true, doesn't apply to type=Fixed)
* ```advertise``` Whether the offer should be shown in the pricing, or just deducted from the price (optional, default=true)
* ```changedaystartfinishonly``` Offer will only apply to periods of the holiday which start and finish on a changeday (optional, default=false)
* ```currencycode``` The currency the amount or fixed price is in (required for type=Amount or type=Fixed only)
* ```amount``` The amount of discount, e.g 50 (required for type=Amount only)
* ```fixedprice``` The price to be used in place of the standard price (required for type=Fixed only)
* ```percentage``` The percentage (of the full price) to be used to calculate the discount (required for type=Percentage only)
* ```active``` Whether the offer is active, regardless of other criteria / restrictions (default=false)
* ```pricingperiod``` the pricing period the offer applies to
* ```perperiod``` Whether the amount or fixedprice is 'per period' or for the whole holiday
* ```applytopartysizepricing``` whether the amount or percentage should apply to the 'standard' price or the party-size price (if one exists) (optional, default=false, for type=Amount and type=Percentage only)
* ```confirmedbookingsinperiod``` The number of Confirmed Bookings the Customer must have made in the period(s) given by the SpecialOfferConfirmedBookingPeriods
* ```commissionpercentage``` The percentage used to calculate the Agency Commission element of the offer (optional, default = booking's commission percentage) (use string 'null' to reset to booking default)
* ```archivedbyactorid``` The id of the actor archiving the offer (optional, if not provided, and archive or archiveddatetime is provided, will default to current user)
* ```archiveddatetime``` The date/time the offer was archived (optional, if not provided, and archive  archivedbyactorid is provided, defaults to current date/time)
* ```archive``` Archive the offer (optional, archivedbyactorid defaults to current user, archiveddatetime defaults to current date/time)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/specialoffer/1


## Special Offer [/v2/specialoffer/{id}]
+ Parameters

    + id (required, integer, `1`) ... The id of the Special Offer to get

### Get a specific Special Offer [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "type": "Amount",
            "active": true,
            "archived": false,
            "archiveddatetime": "",
            "archivedby": "",
            "pricingperiod": {
              "id": 2,
              "pricingperiod": "Week",
              "days": 0,
              "weeks": 1,
              "months": 0,
              "subperiod": "Day"
            },
            "description": "50 GBP off",
            "officedescription": "",
            "minimumholidaylength": 12,
            "maximumholidaylength": 28,
            "minimumoccupancy": 0,
            "maximumoccupancy": 4,
            "minimumdaysbeforeholiday": 21,
            "maximumdaysbeforeholiday": 50,
            "daysbeforeappliestowholeholiday": true,
            "additional": true,
            "advertise": true,
            "changedaystartfinishonly": false,
            "haspromotions": true,
            "promotion": [],
            "confirmedbookingsinperiod": 1,
            "commissionpercentage": null,
            "amount": 50,
            "currency": {
              "id": 1,
              "code": "GBP",
              "name": "Pound Sterling",
              "decimalplaces": 2
            },
            "perperiod": true,
            "applytopartysizepricing": false
          }

### Updates a Special Offer for a given id [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. maximumholidaylength=21

+ Response 204

### Deletes a Special Offer [DELETE]

+ Response 204




## Special Offer Attribute Index [/v2/specialoffer/{id}/attribute]
+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer

### Get all Attributes for a SpecialOffer [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "type": "Boolean",
              "attribute": {
                "id": 3,
                "code": "ATTR998",
                "group": {
                  "id": 6,
                  "name": "Entertainment/Internet"
                },
                "name": "WiFi",
                "description": "WiFi available",
                "type": "Boolean",
                "usedinavailabilitysearch": true,
                "donotmodify": false,
                "important": true,
                "extras": []
              },
              "value": true
            }
          ]

### Add a new Attribute to a Special Offer [POST]

The following fields should be provided in the POST array

* ```type``` The type of the attribute which is required for the offer to apply (must be 'Boolean' for now)
* ```attributeid``` The of the attribute which is required for the offer to apply (must be an AttributeBoolean for now)
* ```value``` The value the attribute must have for a property for the offer to apply (must be true or false for now)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/specialoffer/1/attribute/4

## Special Offer Attribute Detail [/v2/specialoffer/{id}/attribute/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer
    + id2 (required, integer, `1`) ... The id of the Special Offer Attribute

### Gets the details of a Special Offer Attribute [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "type": "Boolean",
            "attribute": {
              "id": 3,
              "code": "ATTR998",
              "group": {
                "id": 6,
                "name": "Entertainment/Internet"
              },
              "name": "WiFi",
              "description": "WiFi available",
              "type": "Boolean",
              "usedinavailabilitysearch": true,
              "donotmodify": false,
              "important": true,
              "extras": []
            },
            "value": true
          }

### Update a Special Offer Attribute [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. value=false

+ Response 204

### Delete a Special Offer Attribute [DELETE]

+ Response 204




## Special Offer Booking Period Index [/v2/specialoffer/{id}/bookingperiod]
### Get all BookingPeriods for a SpecialOffer [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "fromdate": "2026-04-01",
                "todate": "2026-04-08"
            },
            {
                "id": 4,
                "fromdate": "2027-04-01",
                "todate": "2027-04-08"
            }
        ]

### Add a new Booking Period to a Special Offer [POST]

The following fields should be provided in the POST array

* ```fromdate``` The start date of the period the booking must be booked in for the offer to apply
* ```todate``` The end date of the period the booking must be booked in for the offer to apply

+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/specialoffer/1/bookingperiod/4

## Special Offer Booking Period Detail [/v2/specialoffer/{id}/bookingperiod/{eid}]
### Gets the details of a Special Offer Booking Period [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer
    + eid (required, integer, `4`) ... The id of the Special Offer Booking Period to get

+ Response 200 (application/json)

        {
            "id": 4,
            "fromdate": "2027-04-01",
            "todate": "2027-04-08"
        }

### Update a Special Offer's Booking Period [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. percentage=85

+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer
    + eid (required, integer, `1`) ... The id of the SpecialOfferBookingPeriod to update

+ Response 404

### Deletes a Special Offer's Booking Period [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer
    + eid (required, integer, `1`) ... The id of the SpecialOfferBookingPeriod to delete

+ Response 204




## Special Offer Branding Index [/v2/specialoffer/{id}/branding]
### Get all Brandings a SpecialOffer is to be applied for [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "branding": {
                    "id": 1,
                    "brandinggroup": {
                        "id": 1,
                        "code": "SWAA",
                        "name": "South West",
                        "agency": "/v2/agency/3"
                    },
                    "marketingbrand": {
                        "id": 1,
                        "code": "MAD",
                        "name": "Marsdens Devon",
                        "agency": "/v2/agency/1",
                        "defaultbookingbrand": "/v2/bookingbrand/1",
                        "website": null,
                        "email": null
                    },
                    "bookingbrand": {
                        "id": 1,
                        "code": "MAD",
                        "name": "Mardens Devon",
                        "agency": "/v2/agency/1"
                    }
                },
                "description": "Brand variant of description",
                "active": true
            },
            {
                "id": 2,
                "branding": {
                    "id": 2,
                    "brandinggroup": {
                        "id": 1,
                        "code": "SWAA",
                        "name": "South West",
                        "agency": "/v2/agency/3"
                    },
                    "marketingbrand": {
                        "id": 2,
                        "code": "MAC",
                        "name": "Marsdens Cornwall",
                        "agency": "/v2/agency/1",
                        "defaultbookingbrand": "/v2/bookingbrand/2",
                        "website": null,
                        "email": null
                    },
                    "bookingbrand": {
                        "id": 2,
                        "code": "MAC",
                        "name": "Mardens Cornwall",
                        "agency": "/v2/agency/1"
                    }
                },
                "description": "Brand variant of description",
                "active": true
            }
        ]

### Add a new Branding to a Special Offer [POST]

The following fields should be provided in the POST array

* ```brandingid``` The id of the Branding

+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/specialoffer/1/branding/1

## Special Offer Branding Detail [/v2/specialoffer/{id}/branding/{eid}]
### Gets the details of a Special Offer Branding [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer
    + eid (required, integer, `2`) ... The id of the Special Offer Branding to get

+ Response 200 (application/json)

        {
            "id": 2,
            "branding": {
                "id": 2,
                "brandinggroup": {
                    "id": 1,
                    "code": "SWAA",
                    "name": "South West",
                    "agency": "/v2/agency/3"
                },
                "marketingbrand": {
                    "id": 2,
                    "code": "MAC",
                    "name": "Marsdens Cornwall",
                    "agency": "/v2/agency/1",
                    "defaultbookingbrand": "/v2/bookingbrand/2",
                    "website": null,
                    "email": null
                },
                "bookingbrand": {
                    "id": 2,
                    "code": "MAC",
                    "name": "Mardens Cornwall",
                    "agency": "/v2/agency/1"
                }
            },
            "description": "Brand variant of description",
            "active": true
        }

### Update a Special Offer's Branding [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. percentage=85

+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer
    + eid (required, integer, `1`) ... The id of the SpecialOfferBranding to update

+ Response 404

### Deletes a Special Offer's Branding [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer
    + eid (required, integer, `1`) ... The id of the SpecialOfferBranding to delete

+ Response 204




## Special Offer Confirmed Booking Period Index [/v2/specialoffer/{id}/confirmedbookingperiod]

+ Parameters

    + id (required, integer, `13`) ... The id of the SpecialOffer

### Get all ConfirmedBookingPeriods for a SpecialOffer [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "periodfrom": "Jan 1",
              "period": "",
              "periodto": "Mar 31"
            },
            {
              "id": 2,
              "periodfrom": "Sep 1",
              "period": "",
              "periodto": "Dec 31"
            }
          ]

### Add a new ConfirmedBooking Period to a Special Offer [POST]

The following fields should be provided in the POST array.

* ```periodfrom``` The start of the period the booking must have been confirmed in for the offer to apply, e.g. 'Jan 15'
* ```period``` The length of the period the booking must have been confirmed in for the offer to apply, e.g. '3 months'
* ```periodto``` The end of the period the booking must have been confirmed in for the offer to apply, e.g. 'Dec 21', 'today'
At least two of the above must be provided.

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/specialoffer/1/confirmedbookingperiod/4

## Special Offer Confirmed Booking Period Detail [/v2/specialoffer/{id}/confirmedbookingperiod/{eid}]

+ Parameters

    + id (required, integer, `13`) ... The id of the SpecialOffer
    + eid (required, integer, `1`) ... The id of the Special Offer ConfirmedBooking Period

### Gets the details of a Special Offer ConfirmedBooking Period [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "periodfrom": "Jan 1",
            "period": "",
            "periodto": "Mar 31"
          }

### Update a Special Offer's ConfirmedBooking Period [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. percentage=85

+ Response 404

### Deletes a Special Offer's ConfirmedBooking Period [DELETE]

+ Response 204




## Special Offer Holiday Period Index [/v2/specialoffer/{id}/holidayperiod]
### Get all HolidayPeriods for a SpecialOffer [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "fromdate": "2026-03-02",
                "todate": "2026-03-09",
                "donotsplit": false
            },
            {
                "id": 4,
                "fromdate": "2026-04-02",
                "todate": "2026-05-16",
                "donotsplit": false
            }
        ]

### Add a new Holiday Period to a Special Offer [POST]

The following fields should be provided in the POST array

* ```fromdate``` The start date of the period the holiday must start in for the offer to apply
* ```todate``` The end date of the period the holiday must start in for the offer to apply

+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/specialoffer/1/holidayperiod/2

## Special Offer Holiday Period Detail [/v2/specialoffer/{id}/holidayperiod/{eid}]
### Gets the details of a Special Offer Holiday Period [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer
    + eid (required, integer, `4`) ... The id of the Special Offer Holiday Period to get

+ Response 200 (application/json)

        {
            "id": 4,
            "fromdate": "2026-04-02",
            "todate": "2026-05-16",
            "donotsplit": false
        }

### Update a Special Offer's Holiday Period [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. percentage=85

+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer
    + eid (required, integer, `1`) ... The id of the SpecialOfferHolidayPeriod to update

+ Response 404

### Deletes a Special Offer's Holiday Period [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer
    + eid (required, integer, `1`) ... The id of the SpecialOfferHolidayPeriod to delete

+ Response 204




## Special Offer Property Branding Index [/v2/specialoffer/{id}/propertybranding]
+ Parameters

    + id (required, integer, `2`) ... The id of the SpecialOffer

### Get all PropertyBrandings a SpecialOffer is to be applied for [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "propertybranding": {
                "id": 1,
                "branding": "/v2/branding/3",
                "primarybranding": true,
                "brandinggroup": "/v2/brandinggroup/2",
                "bookingbrand": "/v2/property/1/bookingbrand/1",
                "primarybookingbrand": true,
                "marketingbrand": "/v2/property/1/marketingbrand/1",
                "status": {
                  "id": 1,
                  "name": "Live",
                  "allowbooking": true,
                  "allowoverride": false,
                  "priority": 10,
                  "allowbalance": true
                },
                "statusreason": "",
                "promote": false,
                "allowbookingonwebuntil": "2099-12-31",
                "showpricingonwebuntil": "2099-12-31",
                "property": {
                  "id": 1,
                  "name": "Angler Cottage",
                  "details": "/v2/property/1"
                }
              },
              "description": "Property-level description"
            }
          ]

### Add a new Property Branding to a Special Offer [POST]

The following fields should be provided in the POST array

* ```propertybrandingid``` The id of the Property Branding
* ```description``` property-level description (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/specialoffer/1/propertybranding/1

## Special Offer Property Branding Detail [/v2/specialoffer/{id}/propertybranding/{id2}]
+ Parameters

    + id (required, integer, `2`) ... The id of the SpecialOffer
    + id2 (required, integer, `1`) ... The id of the SpecialOfferPropertyBranding

### Gets the details of a Special Offer Property Branding [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "propertybranding": {
              "id": 1,
              "branding": "/v2/branding/3",
              "primarybranding": true,
              "brandinggroup": "/v2/brandinggroup/2",
              "bookingbrand": "/v2/property/1/bookingbrand/1",
              "primarybookingbrand": true,
              "marketingbrand": "/v2/property/1/marketingbrand/1",
              "status": {
                "id": 1,
                "name": "Live",
                "allowbooking": true,
                "allowoverride": false,
                "priority": 10,
                "allowbalance": true
              },
              "statusreason": "",
              "promote": false,
              "allowbookingonwebuntil": "2099-12-31",
              "showpricingonwebuntil": "2099-12-31",
              "property": {
                "id": 1,
                "name": "Angler Cottage",
                "details": "/v2/property/1"
              }
            },
            "description": "Property-level description"
          }

### Update a Special Offer's Property Branding [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is.

    e.g. description=New description

+ Response 204

### Deletes a Special Offer's Property Branding [DELETE]

+ Response 204




## Special Offer Promotion Index [/v2/specialoffer/{id}/promotion]
Postman: /v2/specialoffer/1/promotion

+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer

### Get all Promotions a SpecialOffer is to be applied for [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "promotioncode": "TESTONE",
              "extra": {
                "id": 1,
                "extracode": "BKFE",
                "extratype": "Booking",
                "description": "Booking Fee",
                "brandings": [
                  "/v2/branding/1",
                  "/v2/branding/2",
                  "/v2/branding/3",
                  "/v2/branding/4",
                  "/v2/branding/6"
                ]
              },
              "usagelimit": 1000,
              "usedcount": 0
            }
          ]

### Add Promotion details to a Special Offer [POST]

The following fields should be provided in the POST array

* ```promotioncode``` The Promotion Code to be used by the customer
* ```extraid``` The id of the Extra to be added to the booking
* ```limit``` The maximum number of times the promotion can be used
* ```usecount``` The number of times the promotion has been used


+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/specialoffer/1/promotion/1

## Special Offer Promotion Detail [/v2/specialoffer/{id}/promotion/{eid}]

+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer
    + eid (required, integer, `1`) ... The id of the Special Offer Promotion to get

### Gets the details of a Special Offer Promotion [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "promotioncode": "TESTONE",
            "extra": {
              "id": 1,
              "extracode": "BKFE",
              "extratype": "Booking",
              "description": "Booking Fee",
              "brandings": [
                "/v2/branding/1",
                "/v2/branding/2",
                "/v2/branding/3",
                "/v2/branding/4",
                "/v2/branding/6"
              ]
            },
            "usagelimit": 1000,
            "usedcount": 0
          }

### Update a Special Offer's Promotion [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. limit=85

+ Response 204

### Deletes a Special Offer's Promotion [DELETE]

+ Response 204




## Special Offer Sales Channel Index [/v2/specialoffer/{id}/saleschannel]
### Get all SalesChannels for a SpecialOffer [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "saleschannel": {
                    "id": 1,
                    "saleschannel": "Brand Website",
                    "description": "Sales made via a brand website, e.g. Suffolk Secrets"
                }
            }
        ]

### Add a new Sales Channel to a Special Offer [POST]

The following fields should be provided in the POST array

* ```saleschannelid``` The id of the Sales Channel

+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/specialoffer/1/saleschannel/1

## Special Offer Sales Channel Detail [/v2/specialoffer/{id}/saleschannel/{eid}]
### Gets the details of a Special Offer Sales Channel [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer
    + eid (required, integer, `1`) ... The id of the Special Offer Sales Channel to get

+ Response 200 (application/json)

        {
            "id": 1,
            "saleschannel": {
                "id": 1,
                "saleschannel": "Brand Website",
                "description": "Sales made via a brand website, e.g. Suffolk Secrets"
            }
        }

### Update a Special Offer's Sales Channel [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. percentage=85

+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer
    + eid (required, integer, `1`) ... The id of the SpecialOfferSalesChannel to update

+ Response 404

### Deletes a Special Offer's Sales Channel [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer
    + eid (required, integer, `1`) ... The id of the SpecialOfferSalesChannel to delete

+ Response 204




## Special Offer Website Section Index [/v2/specialoffer/{id}/websitesection]
### Get all WebsiteSections a SpecialOffer is valid for [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "websitesection": {
                    "id": 1,
                    "section": "Property Pages"
                }
            },
            {
                "id": 2,
                "websitesection": {
                    "id": 3,
                    "section": "Last-minute Offers Page"
                }
            }
        ]

### Add a new Website Section to a Special Offer [POST]

The following fields should be provided in the POST array

* ```websitesectionid``` The id of the Website Section

+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/specialoffer/1/websitesection/1

## Special Offer Website Section Detail [/v2/specialoffer/{id}/websitesection/{eid}]
### Gets the details of a Special Offer Website Section [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer
    + eid (required, integer, `1`) ... The id of the Special Offer Website Section to get

+ Response 200 (application/json)

        {
            "id": 1,
            "websitesection": {
                "id": 1,
                "section": "Property Pages"
            }
        }

### Update a Special Offer's Website Section [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. percentage=85

+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer
    + eid (required, integer, `1`) ... The id of the SpecialOfferWebsiteSection to update

+ Response 404

### Deletes a Special Offer's Website Section [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the SpecialOffer
    + eid (required, integer, `1`) ... The id of the SpecialOfferWebsiteSection to delete

+ Response 204




## Website Section [/v2/websitesection]
A Website Section is a set of criteria and an amount
### Retrieve a list of Website Sections. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "section": "Property Pages"
            },
            {
                "id": 2,
                "section": "Special Offers Page"
            },
            {
                "id": 3,
                "section": "Last-minute Offers Page"
            }
        ]

### Add a new Website Section [POST]

The following fields should be provided in the POST array

* ```type``` The type of offer, e.g. Amount, Fixed, Percentage, PriceTypeForPriceType

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/websitesection/2


## Website Section [/v2/websitesection/{id}]
### Get a specific Website Section [GET]
+ Parameters

    + id (required, integer, `2`) ... The id of the Website Section to get


+ Response 200 (application/json)

        {
            "id": 2,
            "section": "Special Offers page"
        }

### Updates a Website Section for a given id [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. section=Pricing Grids

+ Parameters

    + id (required, integer, `1`) ... The id of the Website Section

+ Response 204

### Deletes a Website Section [DELETE]

+ Parameters

    + id (required, integer, `1`) ... The id of the Website Section

+ Response 204




# Group Source
The source endpoints provide functionality to create, read, update and delete source codes.

## Source [/v2/source]
### Retrieve a list of sources. [GET]

+ Response 200 (application/json)

        [
            {
              "id": 1,
              "sourcecode": "VE",
              "description": "Visit England",
              "showonweb": true,
              "sourcecategory": {
                "id": 1,
                "sourcecategory": "Internet"
              },
              "sourcemarketingbrands": [
                {
                  "id": 1,
                  "marketingbrand": {
                    "id": 3,
                    "code": "NOMM",
                    "name": "Norfolk Country Cottages",
                    "agency": "/v2/agency/4",
                    "defaultbookingbrand": "/v2/bookingbrand/3",
                    "website": "www.norfolk.co.uk",
                    "email": "info@norfolk.co.uk"
                  },
                  "fromdate": "2015-03-01",
                  "todate": "2015-12-31"
                }
              ]
            },
            {
              "id": 2,
              "sourcecode": "EDC",
              "description": "EDP Cottages",
              "showonweb": true,
              "sourcecategory": {
                "id": 1,
                "sourcecategory": "Internet"
              },
              "sourcemarketingbrands": [
                {
                  "id": 2,
                  "marketingbrand": {
                    "id": 3,
                    "code": "NOMM",
                    "name": "Norfolk Country Cottages",
                    "agency": "/v2/agency/4",
                    "defaultbookingbrand": "/v2/bookingbrand/3",
                    "website": "www.norfolk.co.uk",
                    "email": "info@norfolk.co.uk"
                  },
                  "fromdate": "2016-03-01",
                  "todate": "2020-12-31"
                },
                {
                  "id": 3,
                  "marketingbrand": {
                    "id": 4,
                    "code": "MAMM",
                    "name": "Marsdens",
                    "agency": "/v2/agency/5",
                    "defaultbookingbrand": "/v2/bookingbrand/4",
                    "website": "www.mabb.co.uk",
                    "email": "info@mabb.co.uk"
                  },
                  "fromdate": "2016-03-01",
                  "todate": "2020-12-31"
                }
              ]
            },
            {
              "id": 3,
              "sourcecode": "COL",
              "description": "Cornish Life",
              "showonweb": true,
              "sourcecategory": {
                "id": 2,
                "sourcecategory": "Magazines"
              },
              "sourcemarketingbrands": [
                {
                  "id": 4,
                  "marketingbrand": {
                    "id": 4,
                    "code": "MAMM",
                    "name": "Marsdens",
                    "agency": "/v2/agency/5",
                    "defaultbookingbrand": "/v2/bookingbrand/4",
                    "website": "www.mabb.co.uk",
                    "email": "info@mabb.co.uk"
                  },
                  "fromdate": "2016-03-01",
                  "todate": "2020-12-31"
                },
                {
                  "id": 5,
                  "marketingbrand": {
                    "id": 5,
                    "code": "CCMM",
                    "name": "Completely Cottages",
                    "agency": "/v2/agency/6",
                    "defaultbookingbrand": "/v2/bookingbrand/5",
                    "website": "www.comm.co.uk",
                    "email": "info@comm.co.uk"
                  },
                  "fromdate": "2016-03-01",
                  "todate": "2020-12-31"
                },
                {
                  "id": 6,
                  "marketingbrand": {
                    "id": 5,
                    "code": "CCMM",
                    "name": "Completely Cottages",
                    "agency": "/v2/agency/6",
                    "defaultbookingbrand": "/v2/bookingbrand/5",
                    "website": "www.comm.co.uk",
                    "email": "info@comm.co.uk"
                  },
                  "fromdate": "2016-02-01",
                  "todate": "2016-02-28"
                }
              ]
            }
          ]

### Add a new Source [POST]

The following fields should be provided in the POST array

* ```sourcecode``` The code of the Source being added
* ```description``` A description of the source
* ```sourcecategory``` The source category.

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/source/2


## Source [/v2/source/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the Source

### Get a specific Source [GET]

+ Response 200 (application/json)

         {
            "id": 2,
            "sourcecode": "EDC",
            "description": "EDP Cottages",
            "showonweb": true,
            "sourcecategory": {
              "id": 1,
              "sourcecategory": "Internet"
            },
            "sourcemarketingbrands": [
              {
                "id": 2,
                "marketingbrand": {
                  "id": 3,
                  "code": "NOMM",
                  "name": "Norfolk Country Cottages",
                  "agency": "/v2/agency/4",
                  "defaultbookingbrand": "/v2/bookingbrand/3",
                  "website": "www.norfolk.co.uk",
                  "email": "info@norfolk.co.uk"
                },
                "fromdate": "2016-03-01",
                "todate": "2020-12-31"
              },
              {
                "id": 3,
                "marketingbrand": {
                  "id": 4,
                  "code": "MAMM",
                  "name": "Marsdens",
                  "agency": "/v2/agency/5",
                  "defaultbookingbrand": "/v2/bookingbrand/4",
                  "website": "www.mabb.co.uk",
                  "email": "info@mabb.co.uk"
                },
                "fromdate": "2016-03-01",
                "todate": "2020-12-31"
              }
            ]
          }

### Updates a Source for a given id [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

* ```sourcecategory``` Source Category
* ```sourcecode``` Source code
* ```description``` Source description

+ Response 204

### Deletes a Source [DELETE]

+ Response 204



## SourceCategory [/v2/sourcecategory]
### Retrieve a list of source categories. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "sourcecategory": "Internet"
            },
            {
                "id": 2,
                "sourcecategory": "Magazines"
            },
            {
                "id": 3,
                "sourcecategory": "Newspapers"
            },
            {
                "id": 4,
                "sourcecategory": "Local Paper"
            },
            {
                "id": 5,
                "sourcecategory": "Telesales"
            },
            {
                "id": 6,
                "sourcecategory": "Event"
            },
            {
                "id": 7,
                "sourcecategory": "Other"
            }
        ]

### Add a new SourceCategory [POST]

The following fields should be provided in the POST array

* ```sourcecategory``` The source category.

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/sourcecategory/2


## SourceCategory [/v2/sourcecategory/{id}]
### Get a specific SourceCategory [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the SourceCategory to get


+ Response 200 (application/json)
        
        {
            "id": 1,
            "sourcecategory": "Internet"
        }

### Updates a SourceCategory for a given id [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

* ```sourcecategory``` Source category

+ Parameters

    + id (required, integer, `1`) ... The id of the SourceCategory

+ Response 204

### Deletes a SourceCategory [DELETE]

+ Parameters

    + id (required, integer, `1`) ... The id of the SourceCategory

+ Response 204



## Source Marketing Brand index [/v2/source/{id}/marketingbrand]
### Retrieve a list of source marketing brands. [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the Source

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "source": {
                    "id": 2,
                    "sourcecode": "EDC",
                    "description": "EDP Cottages",
                    "showonweb": true,
                    "sourcecategory": {
                        "id": 1,
                        "sourcecategory": "Internet"
                    }
                },
                "marketingbrand": {
                    "id": 3,
                    "code": "NOMM",
                    "name": "Norfolk Country Cottages",
                    "agency": "/v2/agency/2",
                    "defaultbookingbrand": "/v2/bookingbrand/3",
                    "website": "www.norfolk.co.uk",
                    "email": "info@norfolk.co.uk"
                },
                "fromdate": "2016-03-01",
                "todate": "2016-12-31"
            },
            {
                "id": 3,
                "source": {
                    "id": 2,
                    "sourcecode": "EDC",
                    "description": "EDP Cottages",
                    "showonweb": true,
                    "sourcecategory": {
                        "id": 1,
                        "sourcecategory": "Internet"
                    }
                },
                "marketingbrand": {
                    "id": 4,
                    "code": "MAMM",
                    "name": "Marsdens",
                    "agency": "/v2/agency/3",
                    "defaultbookingbrand": "/v2/bookingbrand/4",
                    "website": "www.norfolk.co.uk",
                    "email": "info@norfolk.co.uk"
                },
                "fromdate": "2016-03-01",
                "todate": "2016-12-31"
            }
        ]

### Add a new Marketing Brand to a Source [POST]
The following fields should be provided in the POST array

* ```marketingbrandcode``` The Marketing Brand
* ```fromdate``` Date source is assigned to marketing brand from
* ```todate``` Date source is assigned to marketing brand  to

+ Parameters

    + id (required, integer, `1`) ... The id of the Source

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/source/1/marketingbrand/1

## Source Marketing Brand [/v2/source/{id}/marketingbrand/{mid}]
### Get a specific Source [GET]
+ Parameters

    + id (required, integer, `1`) ... The id of the Source to get
    + mid (required, integer, `1`) ... The id of the SourceMarketingBrand to get


+ Response 200 (application/json)

        {
            "id": 3,
            "source": {
                "id": 2,
                "sourcecode": "EDC",
                "description": "EDP Cottages",
                "showonweb": true,
                "sourcecategory": {
                    "id": 1,
                    "sourcecategory": "Internet"
                }
            },
            "marketingbrand": {
                "id": 3,
                "code": "NOMM",
                "name": "Marsdens",
                "agency": "/v2/agency/3",
                "defaultbookingbrand": "/v2/bookingbrand/4",
                "website": "www.norfolk.co.uk",
                "email": "info@norfolk.co.uk"
            },
            "fromdate": "2016-03-01",
            "todate": "2016-12-31"
        }

### Updates a Source Marketing Brand for a given id [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

* ```fromdate``` Date source is assigned to marketing brand from
* ```todate``` Date source is assigned to marketing brand to

+ Parameters

    + id (required, integer, `1`) ... The id of the Source
    + mid (required, integer, `2`) ... The id of the SourceMarketingBrand

+ Response 204

### Deletes a Source Marketing Brand [DELETE]

+ Parameters

    + id (required, integer, `1`) ... The id of the Source
    + mid (required, integer, `2`) ... The id of the SourceMarketingBrand

+ Response 204




## SourceCost Index [/v2/source/{id}/marketingbrand/{id2}/cost]

+ Parameters

    + id (required, integer, `1`) ... The id of the Source
    + id2 (required, integer, `1`) ... The id of the SourceMarketingBrand

### Get all SourceCosts [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "costdate": "2015-03-14",
                "cost": 24.50
            },
            {
                "id": 2,
                "costdate": "2015-04-14",
                "cost": 498.35
            }
        ]

### Add a new SourceCost [POST]

The following fields should be provided in the POST array

* ```costdate``` Date of the Cost
* ```cost``` Amount of the Cost

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/source/1/marketingbrand/1/cost/1

## SourceCost Detail [/v2/source/{id}/marketingbrand/{id2}/cost/{id3}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Source
    + id2 (required, integer, `1`) ... The id of the SourceMarketingBrand
    + id3 (required, integer, `1`) ... The id of the SourceCost

### Gets the details of a SourceCost [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "costdate": "2015-03-14",
            "cost": 25
        }

### Update a SourceCost [PUT]

+ Request (application/x-www-form-urlencoded)

        costdate="2015-05-01"
        cost=1.23


+ Response 204

### Delete a SourceCost [DELETE]

+ Response 204



# Group Template

## Template [/v2/template{?filter}]

+ Parameters

    + filter (optional, string, `type=Booking`) ... Template filter

### Retrieve a list of Templates. [GET]

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 8,
            "page": 1,
            "count": 8,
            "limit": 10,
            "time": 0,
            "orderBy": null,
            "filter": "type=Booking",
            "previous": null,
            "next": null,
            "elements": [
                {
                    "id": 1,
                    "type": "BookingTemplate",
                    "templatename": "Provisional Booking Letter",
                    "templatedescription": "Sent to customers when a provisional booking is received",
                    "fromdate": "2014-01-01",
                    "todate": "2020-01-01",
                    "templatetargetsource": {
                        "id": 1,
                        "templatesource": {
                            "id": 1,
                            "templatesource": "Booking",
                            "sourcesql": "SELECT * FROM BOOKING"
                        },
                        "templatetarget": {
                            "id": 1,
                            "templatetarget": "Customer"
                        }
                    },
                    "contactmethods": [
                        {
                            "id": 1,
                            "fromdate": "2014-01-01",
                            "todate": "2077-12-31",
                            "contactmethodtype": {
                                "id": 5,
                                "method": "Post",
                                "encoding": {
                                    "id": 1,
                                    "encoding": "Plain"
                                },
                                "characterlimit": 0,
                                "maximumaddresslength": 0,
                                "addressvalidationtype": "PAF",
                                "addressvalidation": "www.paf.co.uk"
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "attachments": [],
                            "elements": [
                                {
                                    "id": 1,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2030-03-31",
                                    "elementorder": 2,
                                    "contactmethodelement": {
                                        "id": 6,
                                        "contactmethodelement": "address",
                                        "description": "Address section of the letter"
                                    },
                                    "heightinmm": 50,
                                    "textitem": {
                                        "id": 5,
                                        "name": "Booking customer address",
                                        "text": "{% if customers|length > 0 %}\n{% for customer in customers|slice(0, 1) %}\n{% if customer.address.line1|length > 0 %}\n<table class=\"table\">\n<tr><td>{{ customer.fullname }}</td></tr>\n<tr><td>{{ customer.address.line1 }}</td></tr>\n{% if customer.address.line2|length > 0 %}<tr><td>{{ customer.address.line2 }}</td></tr>{% endif %}\n{% if customer.address.line3|length > 0 %}<tr><td>{{ customer.address.line3 }}</td></tr>{% endif %}\n{% if customer.address.town|length > 0 %}<tr><td>{{ customer.address.town }}</td></tr>{% endif %}\n<tr><td>{{ customer.address.postcode }}</td></tr>\n<tr><td>{{ customer.address.country }}</td></tr>\n</table>\n<div style=\"clear: both;\"></div>\n{% endif %}\n{% endfor %}\n{% endif %}\n",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                },
                                {
                                    "id": 2,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2030-03-31",
                                    "elementorder": 5,
                                    "contactmethodelement": {
                                        "id": 7,
                                        "contactmethodelement": "title",
                                        "description": "Title section of the letter"
                                    },
                                    "heightinmm": 80,
                                    "textitem": {
                                        "id": 9,
                                        "name": "Provisional Title",
                                        "text": "<table class=\"table\">\n    <tr>\n        <td>Booking Ref:</td>\n        <td>\n            {{ idandreference }}\n        </td>\n    </tr>\n    <tr>\n        <td>Date:</td>\n        <td>\n            {{ bookeddate|date('j/M/Y') }}\n        </td>\n    </tr>\n</table>",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                },
                                {
                                    "id": 3,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2030-03-31",
                                    "elementorder": 10,
                                    "contactmethodelement": {
                                        "id": 8,
                                        "contactmethodelement": "propertydetails",
                                        "description": "Property details section of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 7,
                                        "name": "Booking property breakdown",
                                        "text": "<table class=\"table table-bordered\">\n    <tr><td width=\"30%\" class=\"bg\">Property details</td><td>{{ property.tabspropref }} {{ property.name }}</td></tr>\n    <tr><td width=\"30%\">Holiday Arrival</td><td>{{ fromdate|date('l jS F Y') }}</td></tr>\n    <tr><td width=\"30%\">Holiday Departure</td><td>{{ todate|date('l jS F Y') }}</td></tr>\n    <tr><td width=\"30%\">No. of Nights</td><td>{{ nights }}</td></tr>\n</table>\n",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                },
                                {
                                    "id": 4,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2030-03-31",
                                    "elementorder": 13,
                                    "contactmethodelement": {
                                        "id": 9,
                                        "contactmethodelement": "partydetails",
                                        "description": "Party details section of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 10,
                                        "name": "Booking party size breakdown",
                                        "text": "<table class=\"table table-bordered table-padded\">\n    <thead>\n        <tr>\n            <th colspan=\"2\" class=\"bg\">Party Details</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr><td width=\"70%\">Total Party Size</td><td>{{ partysize }}</td></tr>\n        <tr><td width=\"70%\">Adults</td><td>{{ adults }}</td></tr>\n        <tr><td width=\"70%\">Children</td><td>{{ children }}</td></tr>\n        <tr><td width=\"70%\">Infants</td><td>{{ infants }}</td></tr>\n    </tbody>\n</table>",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                },
                                {
                                    "id": 5,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2030-03-31",
                                    "elementorder": 16,
                                    "contactmethodelement": {
                                        "id": 1,
                                        "contactmethodelement": "body",
                                        "description": "Body of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 2,
                                        "name": "Provisional booking intro",
                                        "text": "<p>Dear {{ firstcustomer_fullname }},</p>\n<p>The details of your provisional reservation {{ idandreference }} for {{ fromdate|date('d/M/Y') }} are shown below. \n    Please check to ensure that the details are correct and contact us if there are any changes or you have any queries.</p>\n<p>To confirm your booking, please forward a deposit payment of one third of the total cost of your holiday\n    within five days together with names and ages of everyone in your party.</p>\n<p>We ask you to notify us immediately if you are unable to proceed with this booking.</p>\n<p>We look forward to hearing from you.</p>\n\n{{ TextItemInclude(13) }}",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                },
                                {
                                    "id": 6,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2030-03-31",
                                    "elementorder": 17,
                                    "contactmethodelement": {
                                        "id": 1,
                                        "contactmethodelement": "body",
                                        "description": "Body of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 3,
                                        "name": "Booking price breakdown",
                                        "text": "<table class=\"table table-bordered table-padded\">\n    <thead class=\"bg\">\n        <tr>\n            <th colspan=\"2\">Cost &amp; Extras</th>\n            <th>Amount (&pound;)</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Basic cost</td>\n            <td> </td>\n            <td width=\"20%\">&pound;{{ basiccost }}{% set totalextras = 0 %}</td>\n        </tr>\n        {% for extra in extras %}\n        <tr>\n            <td>{{ extra.quantity }}</td>\n            <td>{{ extra.description }}</td>\n            <td>&pound;{{ extra.price }}{% set totalextras = totalextras + extra.price %} </td>\n        </tr>\n        {% endfor %}\n        <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n        </tr>\n        <tr>\n        <td>Total Extras</td>\n            <td> </td>\n            <td colspan=\"2\">&pound;{{ totalextras }}</td>\n        </tr>\n        <tr {% if sdamount == 0 %}style=\"display: none;\"{% endif %}>\n            <td>Security deposit</td>\n            <td> </td>\n            <td>&pound;{{ sdamount }}</td>\n        </tr>\n    </tbody>\n    <tfoot class=\"bg\">\n        <tr>\n            <td>Total cost</td>\n            <td> </td>\n            <td>&pound;{{ totalcost }}</td>\n        </tr>\n        <tr {% if sdamount == 0 %}style=\"display: none;\"{% endif %}>\n            <td>Including Security deposit</td>\n            <td> </td>\n            <td>&pound;{{ totalcost + sdamount }}</td>\n        </tr>\n        <tr {% if depositpaiddate != '' %}style=\"display: none;\"{% endif %}>\n            <td> </td>\n            <td>Deposit due to be paid by {{ depositduedate|date('d/M/Y') }}</td>\n            <td>&pound;{{ depositdue }}</td>\n        </tr>\n        <tr {% if balancepaiddate != '' %}style=\"display: none;\"{% endif %}>\n            <td> </td>\n            <td>Balance due to be paid by {{ balanceduedate|date('d/M/Y') }}</td>\n            <td>&pound;{{ balancedue }}</td>\n        </tr>\n    </tfoot>\n</table>",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                }
                            ]
                        },
                        {
                            "id": 2,
                            "fromdate": "2014-01-01",
                            "todate": "2077-12-31",
                            "contactmethodtype": {
                                "id": 4,
                                "method": "Email",
                                "encoding": {
                                    "id": 2,
                                    "encoding": "HTML"
                                },
                                "characterlimit": 0,
                                "maximumaddresslength": 0,
                                "addressvalidationtype": "",
                                "addressvalidation": ""
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "attachments": [
                                {
                                    "id": 1,
                                    "document": {
                                        "id": 1,
                                        "name": "Tabs 2 roadmap.pdf",
                                        "filename": "Tabs 2 roadmap.pdf",
                                        "timeadded": "2014-01-01 12:00:00",
                                        "weight": 0,
                                        "private": false,
                                        "description": "A document",
                                        "mimetype": {
                                            "id": 1,
                                            "name": "application/pdf",
                                            "shortname": "pdf"
                                        },
                                        "file": "/v2/file/1"
                                    },
                                    "properties": [
                                        {
                                            "id": 1,
                                            "property": {
                                                "id": 1,
                                                "type": "property",
                                                "tabspropref": "1105",
                                                "name": "Angler Cottage"
                                            }
                                        }
                                    ]
                                },
                                {
                                    "id": 2,
                                    "templatecontactmethod": "/v2/template/1/contactmethod/1",
                                    "properties": []
                                }
                            ],
                            "elements": [
                                {
                                    "id": 7,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2030-03-31",
                                    "elementorder": 16,
                                    "contactmethodelement": {
                                        "id": 1,
                                        "contactmethodelement": "body",
                                        "description": "Body of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 2,
                                        "name": "Provisional booking intro",
                                        "text": "<p>Dear {{ firstcustomer_fullname }},</p>\n<p>The details of your provisional reservation {{ idandreference }} for {{ fromdate|date('d/M/Y') }} are shown below. \n    Please check to ensure that the details are correct and contact us if there are any changes or you have any queries.</p>\n<p>To confirm your booking, please forward a deposit payment of one third of the total cost of your holiday\n    within five days together with names and ages of everyone in your party.</p>\n<p>We ask you to notify us immediately if you are unable to proceed with this booking.</p>\n<p>We look forward to hearing from you.</p>\n\n{{ TextItemInclude(13) }}",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                }
                            ]
                        }
                    ],
                    "mandatory": true,
                    "sendonce": true,
                    "sendonceper": "Booking",
                    "triggerevent": {
                        "id": 1,
                        "triggerevent": "ProvisionalBooking",
                        "eventdescription": "Provisional booking received"
                    },
                    "daysbeforetrigger": 0,
                    "showprovisional": true,
                    "showdepositpaid": false,
                    "showbalancepaid": false,
                    "showcancelledprovisional": false,
                    "showcancelledconfirmed": false,
                    "showtransferred": false,
                    "showowner": false,
                    "showflexilet": false,
                    "showcancelledflexilet": false,
                    "bookingbrand": "/v2/bookingbrand/3"
                },
                {
                    "id": 2,
                    "type": "BookingTemplate",
                    "templatename": "Balance Confirmation Letter",
                    "templatedescription": "Sent to customers when the booking has been fully paid",
                    "fromdate": "2014-01-01",
                    "todate": "2020-01-01",
                    "templatetargetsource": {
                        "id": 1,
                        "templatesource": {
                            "id": 1,
                            "templatesource": "Booking",
                            "sourcesql": "SELECT * FROM BOOKING"
                        },
                        "templatetarget": {
                            "id": 1,
                            "templatetarget": "Customer"
                        }
                    },
                    "contactmethods": [
                        {
                            "id": 3,
                            "fromdate": "2014-01-01",
                            "todate": "2077-12-31",
                            "contactmethodtype": {
                                "id": 5,
                                "method": "Post",
                                "encoding": {
                                    "id": 1,
                                    "encoding": "Plain"
                                },
                                "characterlimit": 0,
                                "maximumaddresslength": 0,
                                "addressvalidationtype": "PAF",
                                "addressvalidation": "www.paf.co.uk"
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "attachments": [
                                {
                                    "id": 3,
                                    "templatecontactmethod": "/v2/template/6/contactmethod/8",
                                    "properties": []
                                }
                            ],
                            "elements": [
                                {
                                    "id": 8,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2030-03-31",
                                    "elementorder": 2,
                                    "contactmethodelement": {
                                        "id": 6,
                                        "contactmethodelement": "address",
                                        "description": "Address section of the letter"
                                    },
                                    "heightinmm": 50,
                                    "textitem": {
                                        "id": 5,
                                        "name": "Booking customer address",
                                        "text": "{% if customers|length > 0 %}\n{% for customer in customers|slice(0, 1) %}\n{% if customer.address.line1|length > 0 %}\n<table class=\"table\">\n<tr><td>{{ customer.fullname }}</td></tr>\n<tr><td>{{ customer.address.line1 }}</td></tr>\n{% if customer.address.line2|length > 0 %}<tr><td>{{ customer.address.line2 }}</td></tr>{% endif %}\n{% if customer.address.line3|length > 0 %}<tr><td>{{ customer.address.line3 }}</td></tr>{% endif %}\n{% if customer.address.town|length > 0 %}<tr><td>{{ customer.address.town }}</td></tr>{% endif %}\n<tr><td>{{ customer.address.postcode }}</td></tr>\n<tr><td>{{ customer.address.country }}</td></tr>\n</table>\n<div style=\"clear: both;\"></div>\n{% endif %}\n{% endfor %}\n{% endif %}\n",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                },
                                {
                                    "id": 9,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2030-03-31",
                                    "elementorder": 5,
                                    "contactmethodelement": {
                                        "id": 7,
                                        "contactmethodelement": "title",
                                        "description": "Title section of the letter"
                                    },
                                    "heightinmm": 90,
                                    "textitem": {
                                        "id": 9,
                                        "name": "Provisional Title",
                                        "text": "<table class=\"table\">\n    <tr>\n        <td>Booking Ref:</td>\n        <td>\n            {{ idandreference }}\n        </td>\n    </tr>\n    <tr>\n        <td>Date:</td>\n        <td>\n            {{ bookeddate|date('j/M/Y') }}\n        </td>\n    </tr>\n</table>",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                },
                                {
                                    "id": 10,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2030-03-31",
                                    "elementorder": 10,
                                    "contactmethodelement": {
                                        "id": 8,
                                        "contactmethodelement": "propertydetails",
                                        "description": "Property details section of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 7,
                                        "name": "Booking property breakdown",
                                        "text": "<table class=\"table table-bordered\">\n    <tr><td width=\"30%\" class=\"bg\">Property details</td><td>{{ property.tabspropref }} {{ property.name }}</td></tr>\n    <tr><td width=\"30%\">Holiday Arrival</td><td>{{ fromdate|date('l jS F Y') }}</td></tr>\n    <tr><td width=\"30%\">Holiday Departure</td><td>{{ todate|date('l jS F Y') }}</td></tr>\n    <tr><td width=\"30%\">No. of Nights</td><td>{{ nights }}</td></tr>\n</table>\n",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                },
                                {
                                    "id": 11,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2030-03-31",
                                    "elementorder": 13,
                                    "contactmethodelement": {
                                        "id": 9,
                                        "contactmethodelement": "partydetails",
                                        "description": "Party details section of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 10,
                                        "name": "Booking party size breakdown",
                                        "text": "<table class=\"table table-bordered table-padded\">\n    <thead>\n        <tr>\n            <th colspan=\"2\" class=\"bg\">Party Details</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr><td width=\"70%\">Total Party Size</td><td>{{ partysize }}</td></tr>\n        <tr><td width=\"70%\">Adults</td><td>{{ adults }}</td></tr>\n        <tr><td width=\"70%\">Children</td><td>{{ children }}</td></tr>\n        <tr><td width=\"70%\">Infants</td><td>{{ infants }}</td></tr>\n    </tbody>\n</table>",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                },
                                {
                                    "id": 12,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2030-03-31",
                                    "elementorder": 16,
                                    "contactmethodelement": {
                                        "id": 1,
                                        "contactmethodelement": "body",
                                        "description": "Body of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 11,
                                        "name": "Balance Confirmation Intro",
                                        "text": "<p>Dear {{ firstcustomer_fullname }},</p>\n<p>We would like to thank you for your settlement of your balance.  Your booking for {{ property.name }} is now \n    complete and a receipt, along with directions and access details, has been attached.</p>\n<p>If you have any questions about your property, or about the area you're visiting, \n    please get in touch and we will be only too pleased to help. To help you plan your holiday, \n    we have extensive information on our website with features on things to do and places to visit.</p>\n<p>We hope you have a very enjoyable holiday and hope to welcome you back again soon.</p>\n\n{{ TextItemInclude(13) }}",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                },
                                {
                                    "id": 13,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2030-03-31",
                                    "elementorder": 17,
                                    "contactmethodelement": {
                                        "id": 1,
                                        "contactmethodelement": "body",
                                        "description": "Body of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 3,
                                        "name": "Booking price breakdown",
                                        "text": "<table class=\"table table-bordered table-padded\">\n    <thead class=\"bg\">\n        <tr>\n            <th colspan=\"2\">Cost &amp; Extras</th>\n            <th>Amount (&pound;)</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Basic cost</td>\n            <td> </td>\n            <td width=\"20%\">&pound;{{ basiccost }}{% set totalextras = 0 %}</td>\n        </tr>\n        {% for extra in extras %}\n        <tr>\n            <td>{{ extra.quantity }}</td>\n            <td>{{ extra.description }}</td>\n            <td>&pound;{{ extra.price }}{% set totalextras = totalextras + extra.price %} </td>\n        </tr>\n        {% endfor %}\n        <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n        </tr>\n        <tr>\n        <td>Total Extras</td>\n            <td> </td>\n            <td colspan=\"2\">&pound;{{ totalextras }}</td>\n        </tr>\n        <tr {% if sdamount == 0 %}style=\"display: none;\"{% endif %}>\n            <td>Security deposit</td>\n            <td> </td>\n            <td>&pound;{{ sdamount }}</td>\n        </tr>\n    </tbody>\n    <tfoot class=\"bg\">\n        <tr>\n            <td>Total cost</td>\n            <td> </td>\n            <td>&pound;{{ totalcost }}</td>\n        </tr>\n        <tr {% if sdamount == 0 %}style=\"display: none;\"{% endif %}>\n            <td>Including Security deposit</td>\n            <td> </td>\n            <td>&pound;{{ totalcost + sdamount }}</td>\n        </tr>\n        <tr {% if depositpaiddate != '' %}style=\"display: none;\"{% endif %}>\n            <td> </td>\n            <td>Deposit due to be paid by {{ depositduedate|date('d/M/Y') }}</td>\n            <td>&pound;{{ depositdue }}</td>\n        </tr>\n        <tr {% if balancepaiddate != '' %}style=\"display: none;\"{% endif %}>\n            <td> </td>\n            <td>Balance due to be paid by {{ balanceduedate|date('d/M/Y') }}</td>\n            <td>&pound;{{ balancedue }}</td>\n        </tr>\n    </tfoot>\n</table>",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                },
                                {
                                    "id": 14,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2030-03-31",
                                    "elementorder": 17,
                                    "contactmethodelement": {
                                        "id": 3,
                                        "contactmethodelement": "bodyleft",
                                        "description": "Left column of Body of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 3,
                                        "name": "Booking price breakdown",
                                        "text": "<table class=\"table table-bordered table-padded\">\n    <thead class=\"bg\">\n        <tr>\n            <th colspan=\"2\">Cost &amp; Extras</th>\n            <th>Amount (&pound;)</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Basic cost</td>\n            <td> </td>\n            <td width=\"20%\">&pound;{{ basiccost }}{% set totalextras = 0 %}</td>\n        </tr>\n        {% for extra in extras %}\n        <tr>\n            <td>{{ extra.quantity }}</td>\n            <td>{{ extra.description }}</td>\n            <td>&pound;{{ extra.price }}{% set totalextras = totalextras + extra.price %} </td>\n        </tr>\n        {% endfor %}\n        <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n        </tr>\n        <tr>\n        <td>Total Extras</td>\n            <td> </td>\n            <td colspan=\"2\">&pound;{{ totalextras }}</td>\n        </tr>\n        <tr {% if sdamount == 0 %}style=\"display: none;\"{% endif %}>\n            <td>Security deposit</td>\n            <td> </td>\n            <td>&pound;{{ sdamount }}</td>\n        </tr>\n    </tbody>\n    <tfoot class=\"bg\">\n        <tr>\n            <td>Total cost</td>\n            <td> </td>\n            <td>&pound;{{ totalcost }}</td>\n        </tr>\n        <tr {% if sdamount == 0 %}style=\"display: none;\"{% endif %}>\n            <td>Including Security deposit</td>\n            <td> </td>\n            <td>&pound;{{ totalcost + sdamount }}</td>\n        </tr>\n        <tr {% if depositpaiddate != '' %}style=\"display: none;\"{% endif %}>\n            <td> </td>\n            <td>Deposit due to be paid by {{ depositduedate|date('d/M/Y') }}</td>\n            <td>&pound;{{ depositdue }}</td>\n        </tr>\n        <tr {% if balancepaiddate != '' %}style=\"display: none;\"{% endif %}>\n            <td> </td>\n            <td>Balance due to be paid by {{ balanceduedate|date('d/M/Y') }}</td>\n            <td>&pound;{{ balancedue }}</td>\n        </tr>\n    </tfoot>\n</table>",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                },
                                {
                                    "id": 15,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2030-03-31",
                                    "elementorder": 17,
                                    "contactmethodelement": {
                                        "id": 4,
                                        "contactmethodelement": "bodyright",
                                        "description": "Right column of Body of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 6,
                                        "name": "Booking payment breakdown",
                                        "text": "<table class=\"table table-bordered table-padded\">\n    <thead class=\"bg\">\n        <tr>\n            <th>Payments</th>\n            <th>Amount (&pound;)</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr><td width=\"30%\">Amount paid</td><td>&pound;{{ bookingpaid }}</td></tr>\n        <tr><td width=\"30%\">Amount outstanding</td><td>&pound;{{ bookingoutstanding }}</td></tr>\n        {% if sdamount > 0 %}\n        <tr><td width=\"30%\">Security deposit paid</td><td>&pound;{{ securitydepositpaid }}</td></tr>\n        <tr><td width=\"30%\">Security deposit outstanding</td><td>&pound;{{ securitydepositoutstanding }}</td></tr>\n        <tr><td width=\"30%\">Security deposit refunded</td><td>&pound;{{ securitydepositrefunded }}</td></tr>\n        {% endif %}\n    </tbody>\n    <tfoot class=\"bg\">\n        <tr><td>Total paid</td><td>&pound;{{ totalpaid }}</td></tr>\n        <tr><td>Total refunded</td><td>&pound;{{ totalrefunded }}</td></tr>\n        <tr><td>Total outstanding</td><td>&pound;{{ totaloutstanding }}</td></tr>\n    <tfoot>\n</table>",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                }
                            ]
                        },
                        {
                            "id": 4,
                            "fromdate": "2014-01-01",
                            "todate": "2077-12-31",
                            "contactmethodtype": {
                                "id": 4,
                                "method": "Email",
                                "encoding": {
                                    "id": 2,
                                    "encoding": "HTML"
                                },
                                "characterlimit": 0,
                                "maximumaddresslength": 0,
                                "addressvalidationtype": "",
                                "addressvalidation": ""
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "attachments": [
                                {
                                    "id": 4,
                                    "templatecontactmethod": "/v2/template/2/contactmethod/3",
                                    "properties": []
                                }
                            ],
                            "elements": [
                                {
                                    "id": 16,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2030-03-31",
                                    "elementorder": 16,
                                    "contactmethodelement": {
                                        "id": 1,
                                        "contactmethodelement": "body",
                                        "description": "Body of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 11,
                                        "name": "Balance Confirmation Intro",
                                        "text": "<p>Dear {{ firstcustomer_fullname }},</p>\n<p>We would like to thank you for your settlement of your balance.  Your booking for {{ property.name }} is now \n    complete and a receipt, along with directions and access details, has been attached.</p>\n<p>If you have any questions about your property, or about the area you're visiting, \n    please get in touch and we will be only too pleased to help. To help you plan your holiday, \n    we have extensive information on our website with features on things to do and places to visit.</p>\n<p>We hope you have a very enjoyable holiday and hope to welcome you back again soon.</p>\n\n{{ TextItemInclude(13) }}",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                }
                            ]
                        }
                    ],
                    "mandatory": true,
                    "sendonce": true,
                    "sendonceper": "Booking",
                    "triggerevent": {
                        "id": 2,
                        "triggerevent": "Confirmation",
                        "eventdescription": "Booking is confirmed"
                    },
                    "daysbeforetrigger": 0,
                    "showprovisional": false,
                    "showdepositpaid": false,
                    "showbalancepaid": true,
                    "showcancelledprovisional": false,
                    "showcancelledconfirmed": false,
                    "showtransferred": false,
                    "showowner": false,
                    "showflexilet": false,
                    "showcancelledflexilet": false,
                    "bookingbrand": "/v2/bookingbrand/3"
                },
                {
                    "id": 3,
                    "type": "BookingTemplate",
                    "templatename": "Deposit Confirmation",
                    "templatedescription": "Confirming a deposit payment",
                    "fromdate": "2014-01-01",
                    "todate": "2020-01-01",
                    "templatetargetsource": {
                        "id": 1,
                        "templatesource": {
                            "id": 1,
                            "templatesource": "Booking",
                            "sourcesql": "SELECT * FROM BOOKING"
                        },
                        "templatetarget": {
                            "id": 1,
                            "templatetarget": "Customer"
                        }
                    },
                    "contactmethods": [
                        {
                            "id": 5,
                            "fromdate": "2014-01-01",
                            "todate": "2077-12-31",
                            "contactmethodtype": {
                                "id": 4,
                                "method": "Email",
                                "encoding": {
                                    "id": 2,
                                    "encoding": "HTML"
                                },
                                "characterlimit": 0,
                                "maximumaddresslength": 0,
                                "addressvalidationtype": "",
                                "addressvalidation": ""
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "attachments": []
                        }
                    ],
                    "mandatory": true,
                    "sendonce": true,
                    "sendonceper": "Booking",
                    "triggerevent": {
                        "id": 2,
                        "triggerevent": "Confirmation",
                        "eventdescription": "Booking is confirmed"
                    },
                    "daysbeforetrigger": 0,
                    "showprovisional": false,
                    "showdepositpaid": true,
                    "showbalancepaid": false,
                    "showcancelledprovisional": false,
                    "showcancelledconfirmed": false,
                    "showtransferred": false,
                    "showowner": false,
                    "showflexilet": false,
                    "showcancelledflexilet": false,
                    "bookingbrand": "/v2/bookingbrand/3"
                },
                {
                    "id": 4,
                    "type": "BookingTemplate",
                    "templatename": "Deposit Reminder",
                    "templatedescription": "Remind customers that the deposit is due",
                    "fromdate": "2014-01-01",
                    "todate": "2020-01-01",
                    "templatetargetsource": {
                        "id": 1,
                        "templatesource": {
                            "id": 1,
                            "templatesource": "Booking",
                            "sourcesql": "SELECT * FROM BOOKING"
                        },
                        "templatetarget": {
                            "id": 1,
                            "templatetarget": "Customer"
                        }
                    },
                    "contactmethods": [
                        {
                            "id": 6,
                            "fromdate": "2014-01-01",
                            "todate": "2077-12-31",
                            "contactmethodtype": {
                                "id": 4,
                                "method": "Email",
                                "encoding": {
                                    "id": 2,
                                    "encoding": "HTML"
                                },
                                "characterlimit": 0,
                                "maximumaddresslength": 0,
                                "addressvalidationtype": "",
                                "addressvalidation": ""
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "attachments": [],
                            "elements": [
                                {
                                    "id": 17,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2077-03-31",
                                    "elementorder": 16,
                                    "contactmethodelement": {
                                        "id": 1,
                                        "contactmethodelement": "body",
                                        "description": "Body of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 15,
                                        "name": "Deposit Reminder",
                                        "text": "<p>Dear {{ firstcustomer_fullname }},</p>\n<p>Booking ref: {{ idandreference }} for {{ property.name }} from {{ fromdate|date('d/M/Y') }} to {{ todate|date('d/M/Y') }}.</p>\n<p>The deposit we require for your holiday is &pound;{{ depositdue }} (due on the {{ depositduedate|date('d/M/Y') }}).</p> \n<p>We can accept payment over the 'phone by debit or credit card, or via a cheque made payable to \"{{ bookingbrand.name }}\" (N.B. Please note that an additional surcharge of {{ bookingbrand.creditcardfee }}% will apply to credit card payments only). </p>\n<p>If you have any further queries relating to this provsional booking please contact the relevant office via the telephone number or e-mail address below (also found on the back cover of our brochure). </p>\n<p>We look forward to hearing from you and welcoming you to the area very soon. </p>\n\n{{ TextItemInclude(13) }}",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                }
                            ]
                        }
                    ],
                    "mandatory": true,
                    "sendonce": true,
                    "sendonceper": "Booking",
                    "triggerevent": {
                        "id": 2,
                        "triggerevent": "Confirmation",
                        "eventdescription": "Booking is confirmed"
                    },
                    "daysbeforetrigger": 0,
                    "showprovisional": true,
                    "showdepositpaid": false,
                    "showbalancepaid": false,
                    "showcancelledprovisional": false,
                    "showcancelledconfirmed": false,
                    "showtransferred": false,
                    "showowner": false,
                    "showflexilet": false,
                    "showcancelledflexilet": false,
                    "bookingbrand": "/v2/bookingbrand/3"
                },
                {
                    "id": 5,
                    "type": "BookingTemplate",
                    "templatename": "Balance Reminder",
                    "templatedescription": "Remind customers that the balance is due",
                    "fromdate": "2014-01-01",
                    "todate": "2020-01-01",
                    "templatetargetsource": {
                        "id": 1,
                        "templatesource": {
                            "id": 1,
                            "templatesource": "Booking",
                            "sourcesql": "SELECT * FROM BOOKING"
                        },
                        "templatetarget": {
                            "id": 1,
                            "templatetarget": "Customer"
                        }
                    },
                    "contactmethods": [
                        {
                            "id": 7,
                            "fromdate": "2014-01-01",
                            "todate": "2077-12-31",
                            "contactmethodtype": {
                                "id": 4,
                                "method": "Email",
                                "encoding": {
                                    "id": 2,
                                    "encoding": "HTML"
                                },
                                "characterlimit": 0,
                                "maximumaddresslength": 0,
                                "addressvalidationtype": "",
                                "addressvalidation": ""
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "attachments": [],
                            "elements": [
                                {
                                    "id": 18,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2077-03-31",
                                    "elementorder": 16,
                                    "contactmethodelement": {
                                        "id": 1,
                                        "contactmethodelement": "body",
                                        "description": "Body of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 16,
                                        "name": "Balance Reminder",
                                        "text": "<p>Dear {{ firstcustomer_fullname }},</p>\n<p>Booking ref: {{ idandreference }} for {{ property.name }} from {{ fromdate|date('d/M/Y') }} to {{ todate|date('d/M/Y') }}.</p>\n<p>With reference to your holiday above we can now confirm that the balance payment of &pound;{{ balancedue }} is due on the {{ balanceduedate|date('d/M/Y') }}.</p> \n<p>We can accept payment over the 'phone by debit or credit card, or via a cheque made payable to \"{{ bookingbrand.name }}\" (N.B. Please note that an additional surcharge of {{ bookingbrand.creditcardfee }}% will apply to credit card payments only). </p>\n<p>If you have any further queries relating to this provsional booking please contact the relevant office via the telephone number or e-mail address below (also found on the back cover of our brochure). </p>\n<p>We look forward to hearing from you and welcoming you to the area very soon. </p>\n\n{{ TextItemInclude(13) }}",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                }
                            ]
                        }
                    ],
                    "mandatory": true,
                    "sendonce": true,
                    "sendonceper": "Booking",
                    "triggerevent": {
                        "id": 2,
                        "triggerevent": "Confirmation",
                        "eventdescription": "Booking is confirmed"
                    },
                    "daysbeforetrigger": 0,
                    "showprovisional": false,
                    "showdepositpaid": true,
                    "showbalancepaid": false,
                    "showcancelledprovisional": false,
                    "showcancelledconfirmed": false,
                    "showtransferred": false,
                    "showowner": false,
                    "showflexilet": false,
                    "showcancelledflexilet": false,
                    "bookingbrand": "/v2/bookingbrand/3"
                },
                {
                    "id": 6,
                    "type": "BookingTemplate",
                    "templatename": "Directions",
                    "templatedescription": "Send customers the property directions",
                    "fromdate": "2014-01-01",
                    "todate": "2020-01-01",
                    "templatetargetsource": {
                        "id": 1,
                        "templatesource": {
                            "id": 1,
                            "templatesource": "Booking",
                            "sourcesql": "SELECT * FROM BOOKING"
                        },
                        "templatetarget": {
                            "id": 1,
                            "templatetarget": "Customer"
                        }
                    },
                    "contactmethods": [
                        {
                            "id": 8,
                            "fromdate": "2014-01-01",
                            "todate": "2077-12-31",
                            "contactmethodtype": {
                                "id": 5,
                                "method": "Post",
                                "encoding": {
                                    "id": 1,
                                    "encoding": "Plain"
                                },
                                "characterlimit": 0,
                                "maximumaddresslength": 0,
                                "addressvalidationtype": "PAF",
                                "addressvalidation": "www.paf.co.uk"
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "attachments": [],
                            "elements": [
                                {
                                    "id": 19,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2077-03-31",
                                    "elementorder": 16,
                                    "contactmethodelement": {
                                        "id": 5,
                                        "contactmethodelement": "additionalbody",
                                        "description": "Additional Body of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 18,
                                        "name": "Property Instructions",
                                        "text": "{% if property.instructions|length > 0 %}\n{{ pagebreak|raw }}\n<h2>Property Directions</h2>\n<table class=\"table table-bordered\">\n    {% for instr in property.instructions %}\n    <tr>\n        <td class=\"bg\">{{ instr.name }}</td>\n    </tr>\n    <tr>\n        <td>\n            {% if instr.html == true %}\n            {{ instr.text|raw }}\n            {% else %}\n            <p>{{ instr.text }}</p>\n            {% endif %}\n        </td>\n    </tr>\n    {% endfor %}\n</table>\n{% endif %}",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                }
                            ]
                        },
                        {
                            "id": 13,
                            "fromdate": "2014-01-01",
                            "todate": "2077-12-31",
                            "contactmethodtype": {
                                "id": 4,
                                "method": "Email",
                                "encoding": {
                                    "id": 2,
                                    "encoding": "HTML"
                                },
                                "characterlimit": 0,
                                "maximumaddresslength": 0,
                                "addressvalidationtype": "",
                                "addressvalidation": ""
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "attachments": [
                                {
                                    "id": 5,
                                    "templatecontactmethod": "/v2/template/6/contactmethod/8",
                                    "properties": []
                                }
                            ]
                        }
                    ],
                    "mandatory": true,
                    "sendonce": true,
                    "sendonceper": "Booking",
                    "triggerevent": {
                        "id": 2,
                        "triggerevent": "Confirmation",
                        "eventdescription": "Booking is confirmed"
                    },
                    "daysbeforetrigger": 0,
                    "showprovisional": false,
                    "showdepositpaid": false,
                    "showbalancepaid": true,
                    "showcancelledprovisional": false,
                    "showcancelledconfirmed": false,
                    "showtransferred": false,
                    "showowner": false,
                    "showflexilet": false,
                    "showcancelledflexilet": false,
                    "bookingbrand": "/v2/bookingbrand/3"
                },
                {
                    "id": 7,
                    "type": "BookingTemplate",
                    "templatename": "Owner Confirmation",
                    "templatedescription": "Send owners a booking confirmation",
                    "fromdate": "2014-01-01",
                    "todate": "2020-01-01",
                    "templatetargetsource": {
                        "id": 6,
                        "templatesource": {
                            "id": 1,
                            "templatesource": "Booking",
                            "sourcesql": "SELECT * FROM BOOKING"
                        },
                        "templatetarget": {
                            "id": 2,
                            "templatetarget": "Owner"
                        }
                    },
                    "contactmethods": [
                        {
                            "id": 9,
                            "fromdate": "2014-01-01",
                            "todate": "2077-12-31",
                            "contactmethodtype": {
                                "id": 5,
                                "method": "Post",
                                "encoding": {
                                    "id": 1,
                                    "encoding": "Plain"
                                },
                                "characterlimit": 0,
                                "maximumaddresslength": 0,
                                "addressvalidationtype": "PAF",
                                "addressvalidation": "www.paf.co.uk"
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "attachments": [],
                            "elements": [
                                {
                                    "id": 20,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2077-03-31",
                                    "elementorder": 16,
                                    "contactmethodelement": {
                                        "id": 1,
                                        "contactmethodelement": "body",
                                        "description": "Body of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 12,
                                        "name": "Owner booking confirmation",
                                        "text": "<p>Dear {{ owner_salutation }},</p>\n<p>This is a confirmed booking for {{ property.name }} and you will find all of the details below.</p>\n<p>As always, please check any booking notes (below) which lists any special requirements.</p>\n\n{% if bookingbrand.agency.maintelephone|length > 0 %}\n    <p>If you have any queries, please give us a call on {{ bookingbrand.agency.maintelephone }}.</p> \n{% endif %}\n\n{{ TextItemInclude(13) }}\n\n<p>Booking details:-</p>\n<ul>\n    <li>Reference: {{ idandreference }}</li>\n    <li>Property: {{ property.name }}</li>\n    <li>Your income for this booking will be: {{ totalcommission }}</li>\n    <li>Booked on: {{ bookeddate }}</li>\n    <li>From: {{ fromdate }} To: {{ todate }}</li>\n    <li>Customer: {{ firstcustomer_fullname }}</li>\n    <li>Phone: {{ firstcustomer_maintelephone }}</li>\n    <li>Email: {{ firstcustomer_mainemail }}</li>\n</ul>\n<p>The party is as follows:-</p>\n<ul>\n    <li>Adults: {{ adults }}</li>\n    <li>Children: {{ children }}</li>\n    <li>Infants: {{ infants }}</li>\n    <li>Pets: {{ pets }}</li>\n</ul>\n\n{% if notes|length > 0 %}\n    <p>Notes: </p>\n    <ul>\n        {% for note in notes %}\n            <li>{{ note }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                }
                            ]
                        },
                        {
                            "id": 10,
                            "fromdate": "2014-01-01",
                            "todate": "2077-12-31",
                            "contactmethodtype": {
                                "id": 4,
                                "method": "Email",
                                "encoding": {
                                    "id": 2,
                                    "encoding": "HTML"
                                },
                                "characterlimit": 0,
                                "maximumaddresslength": 0,
                                "addressvalidationtype": "",
                                "addressvalidation": ""
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "attachments": [],
                            "elements": [
                                {
                                    "id": 21,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2077-03-31",
                                    "elementorder": 16,
                                    "contactmethodelement": {
                                        "id": 1,
                                        "contactmethodelement": "body",
                                        "description": "Body of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 12,
                                        "name": "Owner booking confirmation",
                                        "text": "<p>Dear {{ owner_salutation }},</p>\n<p>This is a confirmed booking for {{ property.name }} and you will find all of the details below.</p>\n<p>As always, please check any booking notes (below) which lists any special requirements.</p>\n\n{% if bookingbrand.agency.maintelephone|length > 0 %}\n    <p>If you have any queries, please give us a call on {{ bookingbrand.agency.maintelephone }}.</p> \n{% endif %}\n\n{{ TextItemInclude(13) }}\n\n<p>Booking details:-</p>\n<ul>\n    <li>Reference: {{ idandreference }}</li>\n    <li>Property: {{ property.name }}</li>\n    <li>Your income for this booking will be: {{ totalcommission }}</li>\n    <li>Booked on: {{ bookeddate }}</li>\n    <li>From: {{ fromdate }} To: {{ todate }}</li>\n    <li>Customer: {{ firstcustomer_fullname }}</li>\n    <li>Phone: {{ firstcustomer_maintelephone }}</li>\n    <li>Email: {{ firstcustomer_mainemail }}</li>\n</ul>\n<p>The party is as follows:-</p>\n<ul>\n    <li>Adults: {{ adults }}</li>\n    <li>Children: {{ children }}</li>\n    <li>Infants: {{ infants }}</li>\n    <li>Pets: {{ pets }}</li>\n</ul>\n\n{% if notes|length > 0 %}\n    <p>Notes: </p>\n    <ul>\n        {% for note in notes %}\n            <li>{{ note }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                }
                            ]
                        }
                    ],
                    "mandatory": true,
                    "sendonce": true,
                    "sendonceper": "Booking",
                    "triggerevent": {
                        "id": 2,
                        "triggerevent": "Confirmation",
                        "eventdescription": "Booking is confirmed"
                    },
                    "daysbeforetrigger": 0,
                    "showprovisional": false,
                    "showdepositpaid": false,
                    "showbalancepaid": true,
                    "showcancelledprovisional": false,
                    "showcancelledconfirmed": false,
                    "showtransferred": false,
                    "showowner": false,
                    "showflexilet": false,
                    "showcancelledflexilet": false,
                    "bookingbrand": "/v2/bookingbrand/3"
                },
                {
                    "id": 8,
                    "type": "BookingTemplate",
                    "templatename": "Supplier Confirmation",
                    "templatedescription": "Send suppliers a booking confirmation",
                    "fromdate": "2014-01-01",
                    "todate": "2020-01-01",
                    "templatetargetsource": {
                        "id": 4,
                        "templatesource": {
                            "id": 1,
                            "templatesource": "Booking",
                            "sourcesql": "SELECT * FROM BOOKING"
                        },
                        "templatetarget": {
                            "id": 3,
                            "templatetarget": "Supplier"
                        }
                    },
                    "contactmethods": [
                        {
                            "id": 11,
                            "fromdate": "2014-01-01",
                            "todate": "2077-12-31",
                            "contactmethodtype": {
                                "id": 5,
                                "method": "Post",
                                "encoding": {
                                    "id": 1,
                                    "encoding": "Plain"
                                },
                                "characterlimit": 0,
                                "maximumaddresslength": 0,
                                "addressvalidationtype": "PAF",
                                "addressvalidation": "www.paf.co.uk"
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "attachments": [],
                            "elements": [
                                {
                                    "id": 22,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2077-03-31",
                                    "elementorder": 16,
                                    "contactmethodelement": {
                                        "id": 1,
                                        "contactmethodelement": "body",
                                        "description": "Body of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 17,
                                        "name": "Supplier Confirmation",
                                        "text": "{% for supplier in suppliers|slice(0, 1) %}\n<p>Dear {{ supplier.salutation }},</p>\n<p>This is a confirmed booking for {{ property.name }} and you will find all of the details below.</p>\n<p>As always, please check any booking notes (below) which lists any special requirements.</p>\n\n{% if bookingbrand.agency.maintelephone|length > 0 %}\n    <p>If you have any queries, please give us a call on {{ bookingbrand.agency.maintelephone }}.</p> \n{% endif %}\n\n{{ TextItemInclude(13) }}\n\n<p>Booking details:-</p>\n<ul>\n    <li>Reference: {{ idandreference }}</li>\n    <li>Property: {{ property.name }}</li>\n    <li>Booked on: {{ bookeddate }}</li>\n    <li>From: {{ fromdate }} To: {{ todate }}</li>\n    {% for customer in customers|slice(0, 1) %}\n        <li>Customer: {{ customer.fullname }}</li>\n    {% endfor %}\n</ul>\n<p>The party is as follows:-</p>\n<ul>\n    <li>Adults: {{ adults }}</li>\n    <li>Children: {{ children }}</li>\n    <li>Infants: {{ infants }}</li>\n    <li>Pets: {{ pets }}</li>\n</ul>\n\n{% if notes|length > 0 %}\n    <p>Notes: </p>\n    <ul>\n        {% for note in notes %}\n            <li>{{ note }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n\n{% endfor %}",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                }
                            ]
                        },
                        {
                            "id": 12,
                            "fromdate": "2014-01-01",
                            "todate": "2077-12-31",
                            "contactmethodtype": {
                                "id": 4,
                                "method": "Email",
                                "encoding": {
                                    "id": 2,
                                    "encoding": "HTML"
                                },
                                "characterlimit": 0,
                                "maximumaddresslength": 0,
                                "addressvalidationtype": "",
                                "addressvalidation": ""
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "attachments": [],
                            "elements": [
                                {
                                    "id": 23,
                                    "type": "TemplateElementTextItem",
                                    "fromdate": "2014-01-01",
                                    "todate": "2077-03-31",
                                    "elementorder": 16,
                                    "contactmethodelement": {
                                        "id": 1,
                                        "contactmethodelement": "body",
                                        "description": "Body of the letter"
                                    },
                                    "heightinmm": null,
                                    "textitem": {
                                        "id": 17,
                                        "name": "Supplier Confirmation",
                                        "text": "{% for supplier in suppliers|slice(0, 1) %}\n<p>Dear {{ supplier.salutation }},</p>\n<p>This is a confirmed booking for {{ property.name }} and you will find all of the details below.</p>\n<p>As always, please check any booking notes (below) which lists any special requirements.</p>\n\n{% if bookingbrand.agency.maintelephone|length > 0 %}\n    <p>If you have any queries, please give us a call on {{ bookingbrand.agency.maintelephone }}.</p> \n{% endif %}\n\n{{ TextItemInclude(13) }}\n\n<p>Booking details:-</p>\n<ul>\n    <li>Reference: {{ idandreference }}</li>\n    <li>Property: {{ property.name }}</li>\n    <li>Booked on: {{ bookeddate }}</li>\n    <li>From: {{ fromdate }} To: {{ todate }}</li>\n    {% for customer in customers|slice(0, 1) %}\n        <li>Customer: {{ customer.fullname }}</li>\n    {% endfor %}\n</ul>\n<p>The party is as follows:-</p>\n<ul>\n    <li>Adults: {{ adults }}</li>\n    <li>Children: {{ children }}</li>\n    <li>Infants: {{ infants }}</li>\n    <li>Pets: {{ pets }}</li>\n</ul>\n\n{% if notes|length > 0 %}\n    <p>Notes: </p>\n    <ul>\n        {% for note in notes %}\n            <li>{{ note }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n\n{% endfor %}",
                                        "branding": "/v2/branding/3",
                                        "encoding": {
                                            "id": 2,
                                            "encoding": "HTML"
                                        },
                                        "language": {
                                            "id": 1,
                                            "code": "EN",
                                            "name": "English"
                                        },
                                        "header": false,
                                        "footer": false
                                    }
                                }
                            ]
                        }
                    ],
                    "mandatory": true,
                    "sendonce": true,
                    "sendonceper": "Booking",
                    "triggerevent": {
                        "id": 2,
                        "triggerevent": "Confirmation",
                        "eventdescription": "Booking is confirmed"
                    },
                    "daysbeforetrigger": 0,
                    "showprovisional": false,
                    "showdepositpaid": false,
                    "showbalancepaid": true,
                    "showcancelledprovisional": false,
                    "showcancelledconfirmed": false,
                    "showtransferred": false,
                    "showowner": false,
                    "showflexilet": false,
                    "showcancelledflexilet": false,
                    "bookingbrand": "/v2/bookingbrand/3"
                }
            ]
        }

### Add a new Template [POST]

The following fields should be provided in the POST array

* ```type``` The type of template, e.g. BookingTemplate, ActorTemplate
* ```templatename``` The name of the template
* ```templatedescription``` The description of the template
* ```fromdate``` The date the template is valid from
* ```todate``` The date the template is valid to
* ```mandatory``` Whether the template is mandatory (required for type=BookingTemplate only)
* ```sendonce``` Whether the template should only be sent once (required for type=BookingTemplate only)
* ```sendonceper``` Unknown (required for type=BookingTemplate only)
* ```triggereventid``` The id of the TriggerEvent (required for type=BookingTemplate only)
* ```daysbeforetrigger``` The number of days to send before the trigger (required for type=BookingTemplate only)
* ```showprovisional``` Whether the template applies to provisional bookings (required for type=BookingTemplate only)
* ```showdepositpaid``` Whether the template applies to deposit paid bookings (required for type=BookingTemplate only)
* ```showbalancepaid``` Whether the template applies to balance paid bookings (required for type=BookingTemplate only)
* ```showcancelledprovisional``` Whether the template applies to cancelled provisional bookings (required for type=BookingTemplate only)
* ```showcancelledconfirmed``` Whether the template applies to cancelled confirmed bookings (required for type=BookingTemplate only)
* ```showtransferred``` Whether the template applies to transferred bookings (required for type=BookingTemplate only)
* ```showowner``` Whether the template applies to owner bookings (required for type=BookingTemplate only)
* ```showflexilet``` Whether the template applies to flexilet bookings (required for type=BookingTemplate only)
* ```showcancelledflexilet``` Whether the template applies to cancelled flexilet bookings (required for type=BookingTemplate only)
* ```bookingbrandid``` The id of the BookingBrand (required for type=BookingTemplate only)
* ```brandingid``` The id of the Branding (required for type=ActorTemplate only)
* ```marketingbrandid``` The id of the MarketingBrand (required for type=MarketingCampaignTemplate only)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/template/1

## Template [/v2/template/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Template to get

### Get a specific Template [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "type": "BookingTemplate",
            "templatename": "Provisional Booking Letter",
            "templatedescription": "Sent to customers when a provisional booking is received",
            "fromdate": "2014-01-01",
            "todate": "2020-01-01",
            "templatetargetsource": {
                "id": 1,
                "templatesource": {
                    "id": 1,
                    "templatesource": "Booking",
                    "sourcesql": "SELECT * FROM BOOKING"
                },
                "templatetarget": {
                    "id": 1,
                    "templatetarget": "Customer"
                }
            },
            "contactmethods": [
                {
                    "id": 1,
                    "fromdate": "2014-01-01",
                    "todate": "2077-12-31",
                    "contactmethodtype": {
                        "id": 5,
                        "method": "Post",
                        "encoding": {
                            "id": 1,
                            "encoding": "Plain"
                        },
                        "characterlimit": 0,
                        "maximumaddresslength": 0,
                        "addressvalidationtype": "PAF",
                        "addressvalidation": "www.paf.co.uk"
                    },
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "attachments": [],
                    "elements": [
                        {
                            "id": 1,
                            "type": "TemplateElementTextItem",
                            "fromdate": "2014-01-01",
                            "todate": "2030-03-31",
                            "elementorder": 2,
                            "contactmethodelement": {
                                "id": 6,
                                "contactmethodelement": "address",
                                "description": "Address section of the letter"
                            },
                            "heightinmm": 50,
                            "textitem": {
                                "id": 5,
                                "name": "Booking customer address",
                                "text": "{% if customers|length > 0 %}\n{% for customer in customers|slice(0, 1) %}\n{% if customer.address.line1|length > 0 %}\n<table class=\"table\">\n<tr><td>{{ customer.fullname }}</td></tr>\n<tr><td>{{ customer.address.line1 }}</td></tr>\n{% if customer.address.line2|length > 0 %}<tr><td>{{ customer.address.line2 }}</td></tr>{% endif %}\n{% if customer.address.line3|length > 0 %}<tr><td>{{ customer.address.line3 }}</td></tr>{% endif %}\n{% if customer.address.town|length > 0 %}<tr><td>{{ customer.address.town }}</td></tr>{% endif %}\n<tr><td>{{ customer.address.postcode }}</td></tr>\n<tr><td>{{ customer.address.country }}</td></tr>\n</table>\n<div style=\"clear: both;\"></div>\n{% endif %}\n{% endfor %}\n{% endif %}\n",
                                "branding": "/v2/branding/3",
                                "encoding": {
                                    "id": 2,
                                    "encoding": "HTML"
                                },
                                "language": {
                                    "id": 1,
                                    "code": "EN",
                                    "name": "English"
                                },
                                "header": false,
                                "footer": false
                            }
                        },
                        {
                            "id": 2,
                            "type": "TemplateElementTextItem",
                            "fromdate": "2014-01-01",
                            "todate": "2030-03-31",
                            "elementorder": 5,
                            "contactmethodelement": {
                                "id": 7,
                                "contactmethodelement": "title",
                                "description": "Title section of the letter"
                            },
                            "heightinmm": 80,
                            "textitem": {
                                "id": 9,
                                "name": "Provisional Title",
                                "text": "<table class=\"table\">\n    <tr>\n        <td>Booking Ref:</td>\n        <td>\n            {{ idandreference }}\n        </td>\n    </tr>\n    <tr>\n        <td>Date:</td>\n        <td>\n            {{ bookeddate|date('j/M/Y') }}\n        </td>\n    </tr>\n</table>",
                                "branding": "/v2/branding/3",
                                "encoding": {
                                    "id": 2,
                                    "encoding": "HTML"
                                },
                                "language": {
                                    "id": 1,
                                    "code": "EN",
                                    "name": "English"
                                },
                                "header": false,
                                "footer": false
                            }
                        },
                        {
                            "id": 3,
                            "type": "TemplateElementTextItem",
                            "fromdate": "2014-01-01",
                            "todate": "2030-03-31",
                            "elementorder": 10,
                            "contactmethodelement": {
                                "id": 8,
                                "contactmethodelement": "propertydetails",
                                "description": "Property details section of the letter"
                            },
                            "heightinmm": null,
                            "textitem": {
                                "id": 7,
                                "name": "Booking property breakdown",
                                "text": "<table class=\"table table-bordered\">\n    <tr><td width=\"30%\" class=\"bg\">Property details</td><td>{{ property.tabspropref }} {{ property.name }}</td></tr>\n    <tr><td width=\"30%\">Holiday Arrival</td><td>{{ fromdate|date('l jS F Y') }}</td></tr>\n    <tr><td width=\"30%\">Holiday Departure</td><td>{{ todate|date('l jS F Y') }}</td></tr>\n    <tr><td width=\"30%\">No. of Nights</td><td>{{ nights }}</td></tr>\n</table>\n",
                                "branding": "/v2/branding/3",
                                "encoding": {
                                    "id": 2,
                                    "encoding": "HTML"
                                },
                                "language": {
                                    "id": 1,
                                    "code": "EN",
                                    "name": "English"
                                },
                                "header": false,
                                "footer": false
                            }
                        },
                        {
                            "id": 4,
                            "type": "TemplateElementTextItem",
                            "fromdate": "2014-01-01",
                            "todate": "2030-03-31",
                            "elementorder": 13,
                            "contactmethodelement": {
                                "id": 9,
                                "contactmethodelement": "partydetails",
                                "description": "Party details section of the letter"
                            },
                            "heightinmm": null,
                            "textitem": {
                                "id": 10,
                                "name": "Booking party size breakdown",
                                "text": "<table class=\"table table-bordered table-padded\">\n    <thead>\n        <tr>\n            <th colspan=\"2\" class=\"bg\">Party Details</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr><td width=\"70%\">Total Party Size</td><td>{{ partysize }}</td></tr>\n        <tr><td width=\"70%\">Adults</td><td>{{ adults }}</td></tr>\n        <tr><td width=\"70%\">Children</td><td>{{ children }}</td></tr>\n        <tr><td width=\"70%\">Infants</td><td>{{ infants }}</td></tr>\n    </tbody>\n</table>",
                                "branding": "/v2/branding/3",
                                "encoding": {
                                    "id": 2,
                                    "encoding": "HTML"
                                },
                                "language": {
                                    "id": 1,
                                    "code": "EN",
                                    "name": "English"
                                },
                                "header": false,
                                "footer": false
                            }
                        },
                        {
                            "id": 5,
                            "type": "TemplateElementTextItem",
                            "fromdate": "2014-01-01",
                            "todate": "2030-03-31",
                            "elementorder": 16,
                            "contactmethodelement": {
                                "id": 1,
                                "contactmethodelement": "body",
                                "description": "Body of the letter"
                            },
                            "heightinmm": null,
                            "textitem": {
                                "id": 2,
                                "name": "Provisional booking intro",
                                "text": "<p>Dear {{ firstcustomer_fullname }},</p>\n<p>The details of your provisional reservation {{ idandreference }} for {{ fromdate|date('d/M/Y') }} are shown below. \n    Please check to ensure that the details are correct and contact us if there are any changes or you have any queries.</p>\n<p>To confirm your booking, please forward a deposit payment of one third of the total cost of your holiday\n    within five days together with names and ages of everyone in your party.</p>\n<p>We ask you to notify us immediately if you are unable to proceed with this booking.</p>\n<p>We look forward to hearing from you.</p>\n\n{{ TextItemInclude(13) }}",
                                "branding": "/v2/branding/3",
                                "encoding": {
                                    "id": 2,
                                    "encoding": "HTML"
                                },
                                "language": {
                                    "id": 1,
                                    "code": "EN",
                                    "name": "English"
                                },
                                "header": false,
                                "footer": false
                            }
                        },
                        {
                            "id": 6,
                            "type": "TemplateElementTextItem",
                            "fromdate": "2014-01-01",
                            "todate": "2030-03-31",
                            "elementorder": 17,
                            "contactmethodelement": {
                                "id": 1,
                                "contactmethodelement": "body",
                                "description": "Body of the letter"
                            },
                            "heightinmm": null,
                            "textitem": {
                                "id": 3,
                                "name": "Booking price breakdown",
                                "text": "<table class=\"table table-bordered table-padded\">\n    <thead class=\"bg\">\n        <tr>\n            <th colspan=\"2\">Cost &amp; Extras</th>\n            <th>Amount (&pound;)</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Basic cost</td>\n            <td> </td>\n            <td width=\"20%\">&pound;{{ basiccost }}{% set totalextras = 0 %}</td>\n        </tr>\n        {% for extra in extras %}\n        <tr>\n            <td>{{ extra.quantity }}</td>\n            <td>{{ extra.description }}</td>\n            <td>&pound;{{ extra.price }}{% set totalextras = totalextras + extra.price %} </td>\n        </tr>\n        {% endfor %}\n        <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n        </tr>\n        <tr>\n        <td>Total Extras</td>\n            <td> </td>\n            <td colspan=\"2\">&pound;{{ totalextras }}</td>\n        </tr>\n        <tr {% if sdamount == 0 %}style=\"display: none;\"{% endif %}>\n            <td>Security deposit</td>\n            <td> </td>\n            <td>&pound;{{ sdamount }}</td>\n        </tr>\n    </tbody>\n    <tfoot class=\"bg\">\n        <tr>\n            <td>Total cost</td>\n            <td> </td>\n            <td>&pound;{{ totalcost }}</td>\n        </tr>\n        <tr {% if sdamount == 0 %}style=\"display: none;\"{% endif %}>\n            <td>Including Security deposit</td>\n            <td> </td>\n            <td>&pound;{{ totalcost + sdamount }}</td>\n        </tr>\n        <tr {% if depositpaiddate != '' %}style=\"display: none;\"{% endif %}>\n            <td> </td>\n            <td>Deposit due to be paid by {{ depositduedate|date('d/M/Y') }}</td>\n            <td>&pound;{{ depositdue }}</td>\n        </tr>\n        <tr {% if balancepaiddate != '' %}style=\"display: none;\"{% endif %}>\n            <td> </td>\n            <td>Balance due to be paid by {{ balanceduedate|date('d/M/Y') }}</td>\n            <td>&pound;{{ balancedue }}</td>\n        </tr>\n    </tfoot>\n</table>",
                                "branding": "/v2/branding/3",
                                "encoding": {
                                    "id": 2,
                                    "encoding": "HTML"
                                },
                                "language": {
                                    "id": 1,
                                    "code": "EN",
                                    "name": "English"
                                },
                                "header": false,
                                "footer": false
                            }
                        }
                    ]
                },
                {
                    "id": 2,
                    "fromdate": "2014-01-01",
                    "todate": "2077-12-31",
                    "contactmethodtype": {
                        "id": 4,
                        "method": "Email",
                        "encoding": {
                            "id": 2,
                            "encoding": "HTML"
                        },
                        "characterlimit": 0,
                        "maximumaddresslength": 0,
                        "addressvalidationtype": "",
                        "addressvalidation": ""
                    },
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "attachments": [
                        {
                            "id": 1,
                            "document": {
                                "id": 1,
                                "name": "Tabs 2 roadmap.pdf",
                                "filename": "Tabs 2 roadmap.pdf",
                                "timeadded": "2014-01-01 12:00:00",
                                "weight": 0,
                                "private": false,
                                "description": "A document",
                                "mimetype": {
                                    "id": 1,
                                    "name": "application/pdf",
                                    "shortname": "pdf"
                                },
                                "file": "/v2/file/1"
                            },
                            "properties": [
                                {
                                    "id": 1,
                                    "property": {
                                        "id": 1,
                                        "type": "property",
                                        "tabspropref": "1105",
                                        "name": "Angler Cottage"
                                    }
                                }
                            ]
                        },
                        {
                            "id": 2,
                            "templatecontactmethod": "/v2/template/1/contactmethod/1",
                            "properties": []
                        }
                    ],
                    "elements": [
                        {
                            "id": 7,
                            "type": "TemplateElementTextItem",
                            "fromdate": "2014-01-01",
                            "todate": "2030-03-31",
                            "elementorder": 16,
                            "contactmethodelement": {
                                "id": 1,
                                "contactmethodelement": "body",
                                "description": "Body of the letter"
                            },
                            "heightinmm": null,
                            "textitem": {
                                "id": 2,
                                "name": "Provisional booking intro",
                                "text": "<p>Dear {{ firstcustomer_fullname }},</p>\n<p>The details of your provisional reservation {{ idandreference }} for {{ fromdate|date('d/M/Y') }} are shown below. \n    Please check to ensure that the details are correct and contact us if there are any changes or you have any queries.</p>\n<p>To confirm your booking, please forward a deposit payment of one third of the total cost of your holiday\n    within five days together with names and ages of everyone in your party.</p>\n<p>We ask you to notify us immediately if you are unable to proceed with this booking.</p>\n<p>We look forward to hearing from you.</p>\n\n{{ TextItemInclude(13) }}",
                                "branding": "/v2/branding/3",
                                "encoding": {
                                    "id": 2,
                                    "encoding": "HTML"
                                },
                                "language": {
                                    "id": 1,
                                    "code": "EN",
                                    "name": "English"
                                },
                                "header": false,
                                "footer": false
                            }
                        }
                    ]
                }
            ],
            "mandatory": true,
            "sendonce": true,
            "sendonceper": "Booking",
            "triggerevent": {
                "id": 1,
                "triggerevent": "ProvisionalBooking",
                "eventdescription": "Provisional booking received"
            },
            "daysbeforetrigger": 0,
            "showprovisional": true,
            "showdepositpaid": false,
            "showbalancepaid": false,
            "showcancelledprovisional": false,
            "showcancelledconfirmed": false,
            "showtransferred": false,
            "showowner": false,
            "showflexilet": false,
            "showcancelledflexilet": false,
            "bookingbrand": "/v2/bookingbrand/3"
        }

### Updates a Template for a given id [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. daysbeforetrigger=1

+ Response 204

### Deletes a Template [DELETE]

+ Response 204



## TemplateElement Index [/v2/template/{id}/contactmethod/{id2}/element]

+ Parameters

    + id (required, integer, `1`) ... The id of the Template
    + id2 (required, integer, `1`) ... The id of the TemplateContactMethod

### Retrieve a list of template elements. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "type": "TemplateElementTextItem",
                "fromdate": "2014-01-01",
                "todate": "2030-03-31",
                "elementorder": 2,
                "contactmethodelement": {
                    "id": 6,
                    "contactmethodelement": "address",
                    "description": "Address section of the letter"
                },
                "heightinmm": null,
                "textitem": {
                    "id": 5,
                    "name": "Booking customer address",
                    "text": "{% if customers|length > 0 %}\n{% for customer in customers|slice(0, 1) %}\n{% if customer.address.line1|length > 0 %}\n<table class=\"table\">\n<tr><td>{{ customer.fullname }}</td></tr>\n<tr><td>{{ customer.address.line1 }}</td></tr>\n{% if customer.address.line2|length > 0 %}<tr><td>{{ customer.address.line2 }}</td></tr>{% endif %}\n{% if customer.address.line3|length > 0 %}<tr><td>{{ customer.address.line3 }}</td></tr>{% endif %}\n{% if customer.address.town|length > 0 %}<tr><td>{{ customer.address.town }}</td></tr>{% endif %}\n<tr><td>{{ customer.address.postcode }}</td></tr>\n<tr><td>{{ customer.address.country }}</td></tr>\n</table>\n<div style=\"clear: both;\"></div>\n{% endif %}\n{% endfor %}\n{% endif %}\n",
                    "branding": "/v2/branding/3",
                    "encoding": {
                        "id": 2,
                        "encoding": "HTML"
                    },
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    }
                }
            },
            {
                "id": 2,
                "type": "TemplateElementTextItem",
                "fromdate": "2014-01-01",
                "todate": "2030-03-31",
                "elementorder": 5,
                "contactmethodelement": {
                    "id": 7,
                    "contactmethodelement": "title",
                    "description": "Title section of the letter"
                },
                "heightinmm": null,
                "textitem": {
                    "id": 9,
                    "name": "Provisional Title",
                    "text": "<table class=\"table\">\n    <tr>\n        <td>Booking Ref:</td>\n        <td>\n            {{ idandreference }}\n        </td>\n    </tr>\n    <tr>\n        <td>Date:</td>\n        <td>\n            {{ bookeddate|date('j/M/Y') }}\n        </td>\n    </tr>\n</table>",
                    "branding": "/v2/branding/3",
                    "encoding": {
                        "id": 2,
                        "encoding": "HTML"
                    },
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    }
                }
            },
            {
                "id": 3,
                "type": "TemplateElementTextItem",
                "fromdate": "2014-01-01",
                "todate": "2030-03-31",
                "elementorder": 10,
                "contactmethodelement": {
                    "id": 8,
                    "contactmethodelement": "propertydetails",
                    "description": "Property details section of the letter"
                },
                "heightinmm": null,
                "textitem": {
                    "id": 7,
                    "name": "Booking property breakdown",
                    "text": "<table class=\"table table-bordered\">\n    <tr><td width=\"30%\" class=\"bg\">Property details</td><td>{{ property.tabspropref }} {{ property.name }}</td></tr>\n    <tr><td width=\"30%\">Holiday Arrival</td><td>{{ fromdate|date('l jS F Y') }}</td></tr>\n    <tr><td width=\"30%\">Holiday Departure</td><td>{{ todate|date('l jS F Y') }}</td></tr>\n    <tr><td width=\"30%\">No. of Nights</td><td>{{ nights }}</td></tr>\n</table>\n",
                    "branding": "/v2/branding/3",
                    "encoding": {
                        "id": 2,
                        "encoding": "HTML"
                    },
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    }
                }
            },
            {
                "id": 4,
                "type": "TemplateElementTextItem",
                "fromdate": "2014-01-01",
                "todate": "2030-03-31",
                "elementorder": 13,
                "contactmethodelement": {
                    "id": 9,
                    "contactmethodelement": "partydetails",
                    "description": "Party details section of the letter"
                },
                "heightinmm": null,
                "textitem": {
                    "id": 10,
                    "name": "Booking party size breakdown",
                    "text": "<table class=\"table table-bordered table-padded\">\n    <thead>\n        <tr>\n            <th colspan=\"2\" class=\"bg\">Party Details</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr><td width=\"70%\">Total Party Size</td><td>{{ partysize }}</td></tr>\n        <tr><td width=\"70%\">Adults</td><td>{{ adults }}</td></tr>\n        <tr><td width=\"70%\">Children</td><td>{{ children }}</td></tr>\n        <tr><td width=\"70%\">Infants</td><td>{{ infants }}</td></tr>\n    </tbody>\n</table>",
                    "branding": "/v2/branding/3",
                    "encoding": {
                        "id": 2,
                        "encoding": "HTML"
                    },
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    }
                }
            },
            {
                "id": 5,
                "type": "TemplateElementTextItem",
                "fromdate": "2014-01-01",
                "todate": "2030-03-31",
                "elementorder": 16,
                "contactmethodelement": {
                    "id": 1,
                    "contactmethodelement": "body",
                    "description": "Body of the letter"
                },
                "heightinmm": null,
                "textitem": {
                    "id": 2,
                    "name": "Provisional booking intro",
                    "text": "<p>Dear {{ firstcustomer_fullname }},</p>\n<p>The details of your provisional reservation {{ idandreference }} for {{ fromdate|date('d/M/Y') }} are shown below. \n    Please check to ensure that the details are correct and contact us if there are any changes or you have any queries.</p>\n<p>To confirm your booking, please forward a deposit payment of one third of the total cost of your holiday\n    within five days together with names and ages of everyone in your party.</p>\n<p>We ask you to notify us immediately if you are unable to proceed with this booking.</p>\n<p>We look forward to hearing from you.</p>\n\n{{ TextItemInclude(13) }}",
                    "branding": "/v2/branding/3",
                    "encoding": {
                        "id": 2,
                        "encoding": "HTML"
                    },
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    }
                }
            },
            {
                "id": 6,
                "type": "TemplateElementTextItem",
                "fromdate": "2014-01-01",
                "todate": "2030-03-31",
                "elementorder": 17,
                "contactmethodelement": {
                    "id": 1,
                    "contactmethodelement": "body",
                    "description": "Body of the letter"
                },
                "heightinmm": null,
                "textitem": {
                    "id": 3,
                    "name": "Booking price breakdown",
                    "text": "<table class=\"table table-bordered table-padded\">\n    <thead class=\"bg\">\n        <tr>\n            <th colspan=\"2\">Cost &amp; Extras</th>\n            <th>Amount (&pound;)</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr><td>Basic cost</td><td></td><td width=\"20%\">&pound;{{ basiccost }}</td></tr>\n        {% set totalextras = 0 %}\n        {% for extra in extras %}\n            <tr><td>{{ extra.quantity }}</td><td>{{ extra.description }}</td><td>&pound;{{ extra.price }}</td></tr>\n            {% set totalextras = totalextras + extra.price %}\n        {% endfor %}\n        <tr><td></td><td></td><td></td></tr>\n        <tr><td>Total Extras</td><td></td><td>&pound;{{ totalextras }}</td></tr>\n        {% if sdamount > 0 %}\n        <tr><td>Security deposit</td><td></td><td>&pound;{{ sdamount }}</td></tr>\n        {% endif %}\n    </tbody>\n    <tfoot class=\"bg\">\n        <tr><td>Total cost</td><td></td><td>&pound;{{ totalcost }}</td></tr>\n        {% if sdamount > 0 %}\n        <tr><td>Including Security deposit</td><td></td><td>&pound;{{ totalcost + sdamount }}</td></tr>\n        {% endif %}\n        <tr><td></td><td>Deposit due to be paid by {{ depositduedate|date('d/M/Y') }}</td><td>&pound;{{ depositdue }}</td></tr>\n    </tfoot>\n</table>\n",
                    "branding": "/v2/branding/3",
                    "encoding": {
                        "id": 2,
                        "encoding": "HTML"
                    },
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    }
                }
            }
        ]

### Add a new TemplateElement [POST]

The following fields should be provided in the POST array

* ```type``` The type of element, i.e. TemplateElementTextItem or TemplateElementText
* ```fromdate``` The from date
* ```todate``` The to date
* ```elementorder``` The element order
* ```contactmethodelementid``` The ContactMethodElement id
* ```textitemid``` The TextItem id (required for type=TemplateElementTextItem only)
* ```text``` The text (required for type=TemplateElementText only)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/template/1/contactmethod/1/element/1

## TemplateElement Detail [/v2/template/{id}/contactmethod/{id2}/element/{id3}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Template
    + id2 (required, integer, `1`) ... The id of the TemplateContactMethod
    + id3 (required, integer, `1`) ... The id of the TemplateElement 

### Gets the details of a TemplateElement [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "type": "TemplateElementTextItem",
            "fromdate": "2014-01-01",
            "todate": "2030-03-31",
            "elementorder": 2,
            "contactmethodelement": {
                "id": 6,
                "contactmethodelement": "address",
                "description": "Address section of the letter"
            },
            "heightinmm": null,
            "textitem": {
                "id": 5,
                "name": "Booking customer address",
                "text": "{% if customers|length > 0 %}\n{% for customer in customers|slice(0, 1) %}\n{% if customer.address.line1|length > 0 %}\n<table class=\"table\">\n<tr><td>{{ customer.fullname }}</td></tr>\n<tr><td>{{ customer.address.line1 }}</td></tr>\n{% if customer.address.line2|length > 0 %}<tr><td>{{ customer.address.line2 }}</td></tr>{% endif %}\n{% if customer.address.line3|length > 0 %}<tr><td>{{ customer.address.line3 }}</td></tr>{% endif %}\n{% if customer.address.town|length > 0 %}<tr><td>{{ customer.address.town }}</td></tr>{% endif %}\n<tr><td>{{ customer.address.postcode }}</td></tr>\n<tr><td>{{ customer.address.country }}</td></tr>\n</table>\n<div style=\"clear: both;\"></div>\n{% endif %}\n{% endfor %}\n{% endif %}\n",
                "branding": "/v2/branding/3",
                "encoding": {
                    "id": 2,
                    "encoding": "HTML"
                },
                "language": {
                    "id": 1,
                    "code": "EN",
                    "name": "English"
                }
            }
        }

### Update a TemplateElement [PUT]

+ Request (application/x-www-form-urlencoded)

        fromdate=2014-01-01

+ Response 204

### Deletes a TemplateElement [DELETE]

+ Response 204



## TemplateContactMethod Index [/v2/template/{id}/contactmethod]

+ Parameters

    + id (required, integer, `1`) ... The id of the Template

### Retrieve a list of template contact methods. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "fromdate": "2014-01-01",
                "todate": "2077-12-31",
                "contactmethodtype": {
                    "id": 5,
                    "method": "Post",
                    "encoding": {
                        "id": 1,
                        "encoding": "Plain"
                    },
                    "characterlimit": 0,
                    "maximumaddresslength": 0,
                    "addressvalidationtype": "PAF",
                    "addressvalidation": "www.paf.co.uk"
                },
                "language": {
                    "id": 1,
                    "code": "EN",
                    "name": "English"
                },
                "attachments": [],
                "elements": [
                    {
                        "id": 1,
                        "type": "TemplateElementTextItem",
                        "fromdate": "2014-01-01",
                        "todate": "2030-03-31",
                        "elementorder": 2,
                        "contactmethodelement": {
                            "id": 6,
                            "contactmethodelement": "address",
                            "description": "Address section of the letter"
                        },
                        "heightinmm": 50,
                        "textitem": {
                            "id": 5,
                            "name": "Booking customer address",
                            "text": "{% if customers|length > 0 %}\n{% for customer in customers|slice(0, 1) %}\n{% if customer.address.line1|length > 0 %}\n<table class=\"table\">\n<tr><td>{{ customer.fullname }}</td></tr>\n<tr><td>{{ customer.address.line1 }}</td></tr>\n{% if customer.address.line2|length > 0 %}<tr><td>{{ customer.address.line2 }}</td></tr>{% endif %}\n{% if customer.address.line3|length > 0 %}<tr><td>{{ customer.address.line3 }}</td></tr>{% endif %}\n{% if customer.address.town|length > 0 %}<tr><td>{{ customer.address.town }}</td></tr>{% endif %}\n<tr><td>{{ customer.address.postcode }}</td></tr>\n<tr><td>{{ customer.address.country }}</td></tr>\n</table>\n<div style=\"clear: both;\"></div>\n{% endif %}\n{% endfor %}\n{% endif %}\n",
                            "branding": "/v2/branding/3",
                            "encoding": {
                                "id": 2,
                                "encoding": "HTML"
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "header": false,
                            "footer": false
                        }
                    },
                    {
                        "id": 2,
                        "type": "TemplateElementTextItem",
                        "fromdate": "2014-01-01",
                        "todate": "2030-03-31",
                        "elementorder": 5,
                        "contactmethodelement": {
                            "id": 7,
                            "contactmethodelement": "title",
                            "description": "Title section of the letter"
                        },
                        "heightinmm": 80,
                        "textitem": {
                            "id": 9,
                            "name": "Provisional Title",
                            "text": "<table class=\"table\">\n    <tr>\n        <td>Booking Ref:</td>\n        <td>\n            {{ idandreference }}\n        </td>\n    </tr>\n    <tr>\n        <td>Date:</td>\n        <td>\n            {{ bookeddate|date('j/M/Y') }}\n        </td>\n    </tr>\n</table>",
                            "branding": "/v2/branding/3",
                            "encoding": {
                                "id": 2,
                                "encoding": "HTML"
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "header": false,
                            "footer": false
                        }
                    },
                    {
                        "id": 3,
                        "type": "TemplateElementTextItem",
                        "fromdate": "2014-01-01",
                        "todate": "2030-03-31",
                        "elementorder": 10,
                        "contactmethodelement": {
                            "id": 8,
                            "contactmethodelement": "propertydetails",
                            "description": "Property details section of the letter"
                        },
                        "heightinmm": null,
                        "textitem": {
                            "id": 7,
                            "name": "Booking property breakdown",
                            "text": "<table class=\"table table-bordered\">\n    <tr><td width=\"30%\" class=\"bg\">Property details</td><td>{{ property.tabspropref }} {{ property.name }}</td></tr>\n    <tr><td width=\"30%\">Holiday Arrival</td><td>{{ fromdate|date('l jS F Y') }}</td></tr>\n    <tr><td width=\"30%\">Holiday Departure</td><td>{{ todate|date('l jS F Y') }}</td></tr>\n    <tr><td width=\"30%\">No. of Nights</td><td>{{ nights }}</td></tr>\n</table>\n",
                            "branding": "/v2/branding/3",
                            "encoding": {
                                "id": 2,
                                "encoding": "HTML"
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "header": false,
                            "footer": false
                        }
                    },
                    {
                        "id": 4,
                        "type": "TemplateElementTextItem",
                        "fromdate": "2014-01-01",
                        "todate": "2030-03-31",
                        "elementorder": 13,
                        "contactmethodelement": {
                            "id": 9,
                            "contactmethodelement": "partydetails",
                            "description": "Party details section of the letter"
                        },
                        "heightinmm": null,
                        "textitem": {
                            "id": 10,
                            "name": "Booking party size breakdown",
                            "text": "<table class=\"table table-bordered table-padded\">\n    <thead>\n        <tr>\n            <th colspan=\"2\" class=\"bg\">Party Details</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr><td width=\"70%\">Total Party Size</td><td>{{ partysize }}</td></tr>\n        <tr><td width=\"70%\">Adults</td><td>{{ adults }}</td></tr>\n        <tr><td width=\"70%\">Children</td><td>{{ children }}</td></tr>\n        <tr><td width=\"70%\">Infants</td><td>{{ infants }}</td></tr>\n    </tbody>\n</table>",
                            "branding": "/v2/branding/3",
                            "encoding": {
                                "id": 2,
                                "encoding": "HTML"
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "header": false,
                            "footer": false
                        }
                    },
                    {
                        "id": 5,
                        "type": "TemplateElementTextItem",
                        "fromdate": "2014-01-01",
                        "todate": "2030-03-31",
                        "elementorder": 16,
                        "contactmethodelement": {
                            "id": 1,
                            "contactmethodelement": "body",
                            "description": "Body of the letter"
                        },
                        "heightinmm": null,
                        "textitem": {
                            "id": 2,
                            "name": "Provisional booking intro",
                            "text": "<p>Dear {{ firstcustomer_fullname }},</p>\n<p>The details of your provisional reservation {{ idandreference }} for {{ fromdate|date('d/M/Y') }} are shown below. \n    Please check to ensure that the details are correct and contact us if there are any changes or you have any queries.</p>\n<p>To confirm your booking, please forward a deposit payment of one third of the total cost of your holiday\n    within five days together with names and ages of everyone in your party.</p>\n<p>We ask you to notify us immediately if you are unable to proceed with this booking.</p>\n<p>We look forward to hearing from you.</p>\n\n{{ TextItemInclude(13) }}",
                            "branding": "/v2/branding/3",
                            "encoding": {
                                "id": 2,
                                "encoding": "HTML"
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "header": false,
                            "footer": false
                        }
                    },
                    {
                        "id": 6,
                        "type": "TemplateElementTextItem",
                        "fromdate": "2014-01-01",
                        "todate": "2030-03-31",
                        "elementorder": 17,
                        "contactmethodelement": {
                            "id": 1,
                            "contactmethodelement": "body",
                            "description": "Body of the letter"
                        },
                        "heightinmm": null,
                        "textitem": {
                            "id": 3,
                            "name": "Booking price breakdown",
                            "text": "<table class=\"table table-bordered table-padded\">\n    <thead class=\"bg\">\n        <tr>\n            <th colspan=\"2\">Cost &amp; Extras</th>\n            <th>Amount (&pound;)</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Basic cost</td>\n            <td> </td>\n            <td width=\"20%\">&pound;{{ basiccost }}{% set totalextras = 0 %}</td>\n        </tr>\n        {% for extra in extras %}\n        <tr>\n            <td>{{ extra.quantity }}</td>\n            <td>{{ extra.description }}</td>\n            <td>&pound;{{ extra.price }}{% set totalextras = totalextras + extra.price %} </td>\n        </tr>\n        {% endfor %}\n        <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n        </tr>\n        <tr>\n        <td>Total Extras</td>\n            <td> </td>\n            <td colspan=\"2\">&pound;{{ totalextras }}</td>\n        </tr>\n        <tr {% if sdamount == 0 %}style=\"display: none;\"{% endif %}>\n            <td>Security deposit</td>\n            <td> </td>\n            <td>&pound;{{ sdamount }}</td>\n        </tr>\n    </tbody>\n    <tfoot class=\"bg\">\n        <tr>\n            <td>Total cost</td>\n            <td> </td>\n            <td>&pound;{{ totalcost }}</td>\n        </tr>\n        <tr {% if sdamount == 0 %}style=\"display: none;\"{% endif %}>\n            <td>Including Security deposit</td>\n            <td> </td>\n            <td>&pound;{{ totalcost + sdamount }}</td>\n        </tr>\n        <tr {% if depositpaiddate != '' %}style=\"display: none;\"{% endif %}>\n            <td> </td>\n            <td>Deposit due to be paid by {{ depositduedate|date('d/M/Y') }}</td>\n            <td>&pound;{{ depositdue }}</td>\n        </tr>\n        <tr {% if balancepaiddate != '' %}style=\"display: none;\"{% endif %}>\n            <td> </td>\n            <td>Balance due to be paid by {{ balanceduedate|date('d/M/Y') }}</td>\n            <td>&pound;{{ balancedue }}</td>\n        </tr>\n    </tfoot>\n</table>",
                            "branding": "/v2/branding/3",
                            "encoding": {
                                "id": 2,
                                "encoding": "HTML"
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "header": false,
                            "footer": false
                        }
                    }
                ]
            },
            {
                "id": 2,
                "fromdate": "2014-01-01",
                "todate": "2077-12-31",
                "contactmethodtype": {
                    "id": 4,
                    "method": "Email",
                    "encoding": {
                        "id": 2,
                        "encoding": "HTML"
                    },
                    "characterlimit": 0,
                    "maximumaddresslength": 0,
                    "addressvalidationtype": "",
                    "addressvalidation": ""
                },
                "language": {
                    "id": 1,
                    "code": "EN",
                    "name": "English"
                },
                "attachments": [
                    {
                        "id": 1,
                        "document": {
                            "id": 1,
                            "name": "Tabs 2 roadmap.pdf",
                            "filename": "Tabs 2 roadmap.pdf",
                            "timeadded": "2014-01-01 12:00:00",
                            "weight": 0,
                            "private": false,
                            "description": "A document",
                            "mimetype": {
                                "id": 1,
                                "name": "application/pdf",
                                "shortname": "pdf"
                            },
                            "file": "/v2/file/1"
                        },
                        "properties": [
                            {
                                "id": 1,
                                "property": {
                                    "id": 1,
                                    "type": "property",
                                    "tabspropref": "1105",
                                    "name": "Angler Cottage"
                                }
                            }
                        ]
                    },
                    {
                        "id": 2,
                        "templatecontactmethod": "/v2/template/1/contactmethod/1",
                        "properties": []
                    }
                ],
                "elements": [
                    {
                        "id": 7,
                        "type": "TemplateElementTextItem",
                        "fromdate": "2014-01-01",
                        "todate": "2030-03-31",
                        "elementorder": 16,
                        "contactmethodelement": {
                            "id": 1,
                            "contactmethodelement": "body",
                            "description": "Body of the letter"
                        },
                        "heightinmm": null,
                        "textitem": {
                            "id": 2,
                            "name": "Provisional booking intro",
                            "text": "<p>Dear {{ firstcustomer_fullname }},</p>\n<p>The details of your provisional reservation {{ idandreference }} for {{ fromdate|date('d/M/Y') }} are shown below. \n    Please check to ensure that the details are correct and contact us if there are any changes or you have any queries.</p>\n<p>To confirm your booking, please forward a deposit payment of one third of the total cost of your holiday\n    within five days together with names and ages of everyone in your party.</p>\n<p>We ask you to notify us immediately if you are unable to proceed with this booking.</p>\n<p>We look forward to hearing from you.</p>\n\n{{ TextItemInclude(13) }}",
                            "branding": "/v2/branding/3",
                            "encoding": {
                                "id": 2,
                                "encoding": "HTML"
                            },
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "header": false,
                            "footer": false
                        }
                    }
                ]
            }
        ]

### Add a new TemplateContactMethod [POST]
The following fields should be provided in the POST array

* ```fromdate``` The from date
* ```todate``` The to date
* ```description``` The description
* ```contactmethodtypeid``` The id of the ContactMethodType
* ```languageid``` The id of the language

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/template/1/contactmethod/2

## TemplateContactMethod Detail [/v2/template/{id}/contactmethod/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the Template
    + id2 (required, integer, `1`) ... The id of the TemplateContactMethod

### Gets the details of a TemplateContactMethod [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "fromdate": "2014-01-01",
            "todate": "2077-12-31",
            "contactmethodtype": {
                "id": 4,
                "method": "Email",
                "encoding": {
                    "id": 2,
                    "encoding": "HTML"
                },
                "characterlimit": 0,
                "maximumaddresslength": 0,
                "addressvalidationtype": "",
                "addressvalidation": ""
            },
            "language": {
                "id": 1,
                "code": "EN",
                "name": "English"
            },
            "attachments": [
                {
                    "id": 1,
                    "document": {
                        "id": 1,
                        "name": "Tabs 2 roadmap.pdf",
                        "filename": "Tabs 2 roadmap.pdf",
                        "timeadded": "2014-01-01 12:00:00",
                        "weight": 0,
                        "private": false,
                        "description": "A document",
                        "mimetype": {
                            "id": 1,
                            "name": "application/pdf",
                            "shortname": "pdf"
                        },
                        "file": "/v2/file/1"
                    },
                    "properties": [
                        {
                            "id": 1,
                            "property": {
                                "id": 1,
                                "type": "property",
                                "tabspropref": "1105",
                                "name": "Angler Cottage"
                            }
                        }
                    ]
                },
                {
                    "id": 2,
                    "templatecontactmethod": "/v2/template/1/contactmethod/1",
                    "properties": []
                }
            ],
            "elements": [
                {
                    "id": 7,
                    "type": "TemplateElementTextItem",
                    "fromdate": "2014-01-01",
                    "todate": "2030-03-31",
                    "elementorder": 16,
                    "contactmethodelement": {
                        "id": 1,
                        "contactmethodelement": "body",
                        "description": "Body of the letter"
                    },
                    "heightinmm": null,
                    "textitem": {
                        "id": 2,
                        "name": "Provisional booking intro",
                        "text": "<p>Dear {{ firstcustomer_fullname }},</p>\n<p>The details of your provisional reservation {{ idandreference }} for {{ fromdate|date('d/M/Y') }} are shown below. \n    Please check to ensure that the details are correct and contact us if there are any changes or you have any queries.</p>\n<p>To confirm your booking, please forward a deposit payment of one third of the total cost of your holiday\n    within five days together with names and ages of everyone in your party.</p>\n<p>We ask you to notify us immediately if you are unable to proceed with this booking.</p>\n<p>We look forward to hearing from you.</p>\n\n{{ TextItemInclude(13) }}",
                        "branding": "/v2/branding/3",
                        "encoding": {
                            "id": 2,
                            "encoding": "HTML"
                        },
                        "language": {
                            "id": 1,
                            "code": "EN",
                            "name": "English"
                        },
                        "header": false,
                        "footer": false
                    }
                }
            ]
        }

### Update a TemplateContactMethod [PUT]

+ Request (application/x-www-form-urlencoded)

        fromdate=2015-01-01

+ Response 204

### Deletes a TemplateContactMethod [DELETE]

+ Response 204




## TemplateSource Index [/v2/templatesource]
### Retrieve a list of Template Sources. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "templatesource": "Booking",
                "sourcesql": "SELECT * FROM BOOKING"
            },
            {
                "id": 2,
                "templatesource": "SecurityDeposit",
                "sourcesql": "SELECT b.*, sd.* FROM BOOKING b JOIN SECURITYDEPOSIT sd ON b.BOOKREF = sd.BOOKREF"
            },
            {
                "id": 3,
                "templatesource": "Customer",
                "sourcesql": "SELECT * FROM CUSTOMER"
            },
            {
                "id": 4,
                "templatesource": "Owner",
                "sourcesql": "SELECT * FROM OWNER"
            },
            {
                "id": 5,
                "templatesource": "Property",
                "sourcesql": "SELECT * FROM PROPERTY"
            },
            {
                "id": 6,
                "templatesource": "Supplier",
                "sourcesql": "SELECT * FROM SUPPLIER"
            },
            {
                "id": 7,
                "templatesource": "WorkOrder",
                "sourcesql": "SELECT * FROM WorkOrder"
            }
        ]

### Add a new TemplateSource [POST]
The following fields should be provided in the POST array

* ```templatesource``` The template source
* ```sourcesql``` The template source sql

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/templatesource/2

## TemplateSource Detail [/v2/templatesource/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the TemplateSource to get

### Gets the details of a TemplateSource [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "templatesource": "SecurityDeposit",
            "sourcesql": "SELECT b.*, sd.* FROM BOOKING b JOIN SECURITYDEPOSIT sd ON b.BOOKREF = sd.BOOKREF"
        }

### Update a TemplateSource [PUT]

+ Request (application/x-www-form-urlencoded)

        templatesource=SecurityDeposit

+ Response 204

### Deletes a TemplateSource [DELETE]

+ Response 204



## TemplateTarget Index [/v2/templatetarget]
### Retrieve a list of Template Targets. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "templatetarget": "Customer"
            },
            {
                "id": 2,
                "templatetarget": "Owner"
            },
            {
                "id": 3,
                "templatetarget": "Supplier"
            }
        ]

### Add a new TemplateTarget [POST]
The following fields should be provided in the POST array

* ```templatetarget``` The template target

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/templatetarget/2

## TemplateTarget Detail [/v2/templatetarget/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the TemplateTarget to get

### Gets the details of a TemplateTarget [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "templatetarget": "Owner"
        }

### Update a TemplateTarget [PUT]

+ Request (application/x-www-form-urlencoded)

        templatetarget=Owner

+ Response 204

### Deletes a TemplateTarget [DELETE]

+ Response 204



## TemplateTargetSource Index [/v2/templatetargetsource]
### Retrieve a list of Template Target Sources. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "templatesource": {
                    "id": 1,
                    "templatesource": "Booking",
                    "sourcesql": "SELECT * FROM BOOKING"
                },
                "templatetarget": {
                    "id": 1,
                    "templatetarget": "Customer"
                }
            },
            {
                "id": 2,
                "templatesource": {
                    "id": 3,
                    "templatesource": "Customer",
                    "sourcesql": "SELECT * FROM CUSTOMER"
                },
                "templatetarget": {
                    "id": 1,
                    "templatetarget": "Customer"
                }
            },
            {
                "id": 3,
                "templatesource": {
                    "id": 2,
                    "templatesource": "SecurityDeposit",
                    "sourcesql": "SELECT b.*, sd.* FROM BOOKING b JOIN SECURITYDEPOSIT sd ON b.BOOKREF = sd.BOOKREF"
                },
                "templatetarget": {
                    "id": 1,
                    "templatetarget": "Customer"
                }
            },
            {
                "id": 4,
                "templatesource": {
                    "id": 1,
                    "templatesource": "Booking",
                    "sourcesql": "SELECT * FROM BOOKING"
                },
                "templatetarget": {
                    "id": 3,
                    "templatetarget": "Supplier"
                }
            },
            {
                "id": 5,
                "templatesource": {
                    "id": 5,
                    "templatesource": "Property",
                    "sourcesql": "SELECT * FROM PROPERTY"
                },
                "templatetarget": {
                    "id": 3,
                    "templatetarget": "Supplier"
                }
            },
            {
                "id": 6,
                "templatesource": {
                    "id": 1,
                    "templatesource": "Booking",
                    "sourcesql": "SELECT * FROM BOOKING"
                },
                "templatetarget": {
                    "id": 2,
                    "templatetarget": "Owner"
                }
            },
            {
                "id": 7,
                "templatesource": {
                    "id": 5,
                    "templatesource": "Property",
                    "sourcesql": "SELECT * FROM PROPERTY"
                },
                "templatetarget": {
                    "id": 2,
                    "templatetarget": "Owner"
                }
            },
            {
                "id": 8,
                "templatesource": {
                    "id": 7,
                    "templatesource": "WorkOrder",
                    "sourcesql": "SELECT * FROM WorkOrder"
                },
                "templatetarget": {
                    "id": 3,
                    "templatetarget": "Supplier"
                }
            }
        ]

### Add a new TemplateTargetSource [POST]
The following fields should be provided in the POST array

* ```templatesourceid``` The TemplateSource id
* ```templatetargetid``` The TemplateTarget id

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/templatetargetsource/2

## TemplateTargetSource Detail [/v2/templatetargetsource/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the TemplateTargetSource to get

### Gets the details of a TemplateTargetSource [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "templatesource": {
                "id": 3,
                "templatesource": "Customer",
                "sourcesql": "SELECT * FROM CUSTOMER"
            },
            "templatetarget": {
                "id": 1,
                "templatetarget": "Customer"
            }
        }

### Update a TemplateTargetSource [PUT]

+ Request (application/x-www-form-urlencoded)

        templatetargetid=3

+ Response 204

### Deletes a TemplateTargetSource [DELETE]

+ Response 204



## TextItem Index [/v2/textitem]
### Retrieve a list of text items. [GET]

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 18,
            "page": 1,
            "count": 10,
            "limit": 10,
            "time": 0,
            "orderBy": null,
            "filter": "",
            "previous": null,
            "next": "/plato/app_dev.php/v2/textitem?page=2&limit=10",
            "elements": [
                {
                    "id": 1,
                    "name": "SD para",
                    "text": "A Security Deposit of {{ sdamount }} has been added to this booking",
                    "branding": "/v2/branding/3",
                    "encoding": {
                        "id": 2,
                        "encoding": "HTML"
                    },
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "header": false,
                    "footer": false
                },
                {
                    "id": 2,
                    "name": "Provisional booking intro",
                    "text": "<p>Dear {{ firstcustomer_fullname }},</p>\n<p>The details of your provisional reservation {{ idandreference }} for {{ fromdate|date('d/M/Y') }} are shown below. \n    Please check to ensure that the details are correct and contact us if there are any changes or you have any queries.</p>\n<p>To confirm your booking, please forward a deposit payment of one third of the total cost of your holiday\n    within five days together with names and ages of everyone in your party.</p>\n<p>We ask you to notify us immediately if you are unable to proceed with this booking.</p>\n<p>We look forward to hearing from you.</p>\n\n{{ TextItemInclude(13) }}",
                    "branding": "/v2/branding/3",
                    "encoding": {
                        "id": 2,
                        "encoding": "HTML"
                    },
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "header": false,
                    "footer": false
                },
                {
                    "id": 3,
                    "name": "Booking price breakdown",
                    "text": "<table class=\"table table-bordered table-padded\">\n    <thead class=\"bg\">\n        <tr>\n            <th colspan=\"2\">Cost &amp; Extras</th>\n            <th>Amount (&pound;)</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Basic cost</td>\n            <td> </td>\n            <td width=\"20%\">&pound;{{ basiccost }}{% set totalextras = 0 %}</td>\n        </tr>\n        {% for extra in extras %}\n        <tr>\n            <td>{{ extra.quantity }}</td>\n            <td>{{ extra.description }}</td>\n            <td>&pound;{{ extra.price }}{% set totalextras = totalextras + extra.price %} </td>\n        </tr>\n        {% endfor %}\n        <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n        </tr>\n        <tr>\n        <td>Total Extras</td>\n            <td> </td>\n            <td colspan=\"2\">&pound;{{ totalextras }}</td>\n        </tr>\n        <tr {% if sdamount == 0 %}style=\"display: none;\"{% endif %}>\n            <td>Security deposit</td>\n            <td> </td>\n            <td>&pound;{{ sdamount }}</td>\n        </tr>\n    </tbody>\n    <tfoot class=\"bg\">\n        <tr>\n            <td>Total cost</td>\n            <td> </td>\n            <td>&pound;{{ totalcost }}</td>\n        </tr>\n        <tr {% if sdamount == 0 %}style=\"display: none;\"{% endif %}>\n            <td>Including Security deposit</td>\n            <td> </td>\n            <td>&pound;{{ totalcost + sdamount }}</td>\n        </tr>\n        <tr {% if depositpaiddate != '' %}style=\"display: none;\"{% endif %}>\n            <td> </td>\n            <td>Deposit due to be paid by {{ depositduedate|date('d/M/Y') }}</td>\n            <td>&pound;{{ depositdue }}</td>\n        </tr>\n        <tr {% if balancepaiddate != '' %}style=\"display: none;\"{% endif %}>\n            <td> </td>\n            <td>Balance due to be paid by {{ balanceduedate|date('d/M/Y') }}</td>\n            <td>&pound;{{ balancedue }}</td>\n        </tr>\n    </tfoot>\n</table>",
                    "branding": "/v2/branding/3",
                    "encoding": {
                        "id": 2,
                        "encoding": "HTML"
                    },
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "header": false,
                    "footer": false
                },
                {
                    "id": 4,
                    "name": "Booking party breakdown",
                    "text": "{% if guests|length > 0 %}\n<table class=\"table table-bordered table-padded\">\n    <thead class=\"bg\">\n        <tr>\n            <th colspan=\"2\">Guests</th>\n        </tr>\n    </thead>\n    {% for guest in guests %}\n    <tr>\n        <td>{{ guest.type }}</td>\n        <td>{{ guest.name }} {{ guest.agerange }}</td>\n    </tr>\n    {% endfor %}\n</table>\n{% endif %}",
                    "branding": "/v2/branding/3",
                    "encoding": {
                        "id": 2,
                        "encoding": "HTML"
                    },
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "header": false,
                    "footer": false
                },
                {
                    "id": 5,
                    "name": "Booking customer address",
                    "text": "{% if customers|length > 0 %}\n{% for customer in customers|slice(0, 1) %}\n{% if customer.address.line1|length > 0 %}\n<table class=\"table\">\n<tr><td>{{ customer.fullname }}</td></tr>\n<tr><td>{{ customer.address.line1 }}</td></tr>\n{% if customer.address.line2|length > 0 %}<tr><td>{{ customer.address.line2 }}</td></tr>{% endif %}\n{% if customer.address.line3|length > 0 %}<tr><td>{{ customer.address.line3 }}</td></tr>{% endif %}\n{% if customer.address.town|length > 0 %}<tr><td>{{ customer.address.town }}</td></tr>{% endif %}\n<tr><td>{{ customer.address.postcode }}</td></tr>\n<tr><td>{{ customer.address.country }}</td></tr>\n</table>\n<div style=\"clear: both;\"></div>\n{% endif %}\n{% endfor %}\n{% endif %}\n",
                    "branding": "/v2/branding/3",
                    "encoding": {
                        "id": 2,
                        "encoding": "HTML"
                    },
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "header": false,
                    "footer": false
                },
                {
                    "id": 6,
                    "name": "Booking payment breakdown",
                    "text": "<table class=\"table table-bordered table-padded\">\n    <thead class=\"bg\">\n        <tr>\n            <th>Payments</th>\n            <th>Amount (&pound;)</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr><td width=\"30%\">Amount paid</td><td>&pound;{{ bookingpaid }}</td></tr>\n        <tr><td width=\"30%\">Amount outstanding</td><td>&pound;{{ bookingoutstanding }}</td></tr>\n        {% if sdamount > 0 %}\n        <tr><td width=\"30%\">Security deposit paid</td><td>&pound;{{ securitydepositpaid }}</td></tr>\n        <tr><td width=\"30%\">Security deposit outstanding</td><td>&pound;{{ securitydepositoutstanding }}</td></tr>\n        <tr><td width=\"30%\">Security deposit refunded</td><td>&pound;{{ securitydepositrefunded }}</td></tr>\n        {% endif %}\n    </tbody>\n    <tfoot class=\"bg\">\n        <tr><td>Total paid</td><td>&pound;{{ totalpaid }}</td></tr>\n        <tr><td>Total refunded</td><td>&pound;{{ totalrefunded }}</td></tr>\n        <tr><td>Total outstanding</td><td>&pound;{{ totaloutstanding }}</td></tr>\n    <tfoot>\n</table>",
                    "branding": "/v2/branding/3",
                    "encoding": {
                        "id": 2,
                        "encoding": "HTML"
                    },
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "header": false,
                    "footer": false
                },
                {
                    "id": 7,
                    "name": "Booking property breakdown",
                    "text": "<table class=\"table table-bordered\">\n    <tr><td width=\"30%\" class=\"bg\">Property details</td><td>{{ property.tabspropref }} {{ property.name }}</td></tr>\n    <tr><td width=\"30%\">Holiday Arrival</td><td>{{ fromdate|date('l jS F Y') }}</td></tr>\n    <tr><td width=\"30%\">Holiday Departure</td><td>{{ todate|date('l jS F Y') }}</td></tr>\n    <tr><td width=\"30%\">No. of Nights</td><td>{{ nights }}</td></tr>\n</table>\n",
                    "branding": "/v2/branding/3",
                    "encoding": {
                        "id": 2,
                        "encoding": "HTML"
                    },
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "header": false,
                    "footer": false
                },
                {
                    "id": 8,
                    "name": "Booking breakdown",
                    "text": "<h2>Your booking</h2>\n\n<table class=\"table table-bordered\">\n    <tr><td width=\"30%\">Dates</td><td>{{ fromdate|date('l jS F Y') }} to {{ todate|date('l jS F Y') }}</td></tr>\n    <tr><td width=\"30%\">Number of guests</td><td>{{ partysize }}</td></tr>\n</table>\n",
                    "branding": "/v2/branding/3",
                    "encoding": {
                        "id": 2,
                        "encoding": "HTML"
                    },
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "header": false,
                    "footer": false
                },
                {
                    "id": 9,
                    "name": "Provisional Title",
                    "text": "<table class=\"table\">\n    <tr>\n        <td>Booking Ref:</td>\n        <td>\n            {{ idandreference }}\n        </td>\n    </tr>\n    <tr>\n        <td>Date:</td>\n        <td>\n            {{ bookeddate|date('j/M/Y') }}\n        </td>\n    </tr>\n</table>",
                    "branding": "/v2/branding/3",
                    "encoding": {
                        "id": 2,
                        "encoding": "HTML"
                    },
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "header": false,
                    "footer": false
                },
                {
                    "id": 10,
                    "name": "Booking party size breakdown",
                    "text": "<table class=\"table table-bordered table-padded\">\n    <thead>\n        <tr>\n            <th colspan=\"2\" class=\"bg\">Party Details</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr><td width=\"70%\">Total Party Size</td><td>{{ partysize }}</td></tr>\n        <tr><td width=\"70%\">Adults</td><td>{{ adults }}</td></tr>\n        <tr><td width=\"70%\">Children</td><td>{{ children }}</td></tr>\n        <tr><td width=\"70%\">Infants</td><td>{{ infants }}</td></tr>\n    </tbody>\n</table>",
                    "branding": "/v2/branding/3",
                    "encoding": {
                        "id": 2,
                        "encoding": "HTML"
                    },
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "header": false,
                    "footer": false
                }
            ]
        }

### Add a new TextItem [POST]
The following fields should be provided in the POST array

* ```name``` The name
* ```text``` The text
* ```brandingid``` The Branding id (optional, if omitted, applies to all Brandings)
* ```encodingid``` The Encoding id
* ```languageid``` The Language id

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/textitem/2

## TextItem Detail [/v2/textitem/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the TextItem to get

### Gets the details of a TextItem [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "name": "Provisional booking intro",
            "text": "{% if customers|length > 0 %}\n{% for customer in customers|slice(0, 1) %}\n<p>Dear {{ customer.fullname }},</p>\n<p>The details of your provisional reservation {{ idandreference }} for {{ fromdate|date('d/M/Y') }} are shown below. \n    Please check to ensure that the details are correct and contact us if there are any changes or you have any queries.</p>\n<p>To confirm your booking, please forward a deposit payment of one third of the total cost of your holiday\n    within five days together with names and ages of everyone in your party.</p>\n<p>We ask you to notify us immediately if you are unable to proceed with this booking.</p>\n<p>We look forward to hearing from you.</p>\n\n{% endfor %}\n{% endif %}\n\n{{ TextItemInclude(13) }}",
            "branding": "/v2/branding/3",
            "encoding": {
                "id": 2,
                "encoding": "HTML"
            },
            "language": {
                "id": 1,
                "code": "EN",
                "name": "English"
            }
        }

### Update a TextItem [PUT]

+ Request (application/x-www-form-urlencoded)

        name=Outro

+ Response 204

### Deletes a TextItem [DELETE]

+ Response 204



## TextSubstitution Index [/v2/textsubstitution]
### Retrieve a list of text substitutions. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "fieldname": "BOOKREF",
                "sourceexpression": "b.BOOKREF",
                "description": "Booking reference",
                "example": "213123",
                "template": "/v2/template/1",
                "templatetargetsource": "/v2/templatetargetsource/1"
            },
            {
                "id": 2,
                "fieldname": "BASICCOST",
                "sourceexpression": "b.BASICCOST",
                "description": "Basic cost",
                "example": "125.00",
                "template": "/v2/template/1",
                "templatetargetsource": "/v2/templatetargetsource/1"
            }
        ]

### Add a new TextSubstitution [POST]
The following fields should be provided in the POST array

* ```fieldname``` The field name
* ```sourceexpression``` The source expression
* ```description``` The description
* ```example``` An example
* ```templateid``` The id of the Template
* ```templatetargetsourceid``` The id of the TemplateTargetSource

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/textsubstitution/2

## TextSubstitution Detail [/v2/textsubstitution/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the TextSubstitution to get

### Gets the details of a TextSubstitution [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "fieldname": "BASICCOST",
            "sourceexpression": "b.BASICCOST",
            "description": "Basic cost",
            "example": "125.00",
            "template": "/v2/template/1",
            "templatetargetsource": "/v2/templatetargetsource/1"
        }

### Update a TextSubstitution [PUT]

+ Request (application/x-www-form-urlencoded)

        fieldname=adults

+ Response 204

### Deletes a TextSubstitution [DELETE]

+ Response 204



## TriggerEvent Index [/v2/triggerevent]
### Retrieve a list of Trigger Events. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "triggerevent": "ProvisionalBooking",
                "eventdescription": "ProvisionalBooking"
            },
            {
                "id": 2,
                "triggerevent": "Confirmation",
                "eventdescription": "Confirmation"
            },
            {
                "id": 3,
                "triggerevent": "ProvisonalCancellation",
                "eventdescription": "ProvisonalCancellation"
            },
            {
                "id": 4,
                "triggerevent": "ConfirmedCancellation",
                "eventdescription": "ConfirmedCancellation"
            }
        ]

### Add a new TriggerEvent [POST]
The following fields should be provided in the POST array

* ```triggerevent``` The event
* ```eventdescription``` The TriggerEvent description

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/triggerevent/2

## TriggerEvent Detail [/v2/triggerevent/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the TriggerEvent to get

### Gets the details of a TriggerEvent [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "triggerevent": "Confirmation",
            "eventdescription": "Confirmation"
        }

### Update a TriggerEvent [PUT]

+ Request (application/x-www-form-urlencoded)

        eventdescription=Confirmation

+ Response 204

### Deletes a TriggerEvent [DELETE]

+ Response 204



# Group Users
## ActorSecurity index [/v2/actorsecurity]
### Retrieve a list of ActorSecurity entities [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "actor": "/v2/tabsuser/24",
                "type": "Role",
                "securityrole": {
                    "id": 11,
                    "name": "SYSTEMSETTINGS",
                    "description": "System Settings",
                    "symfonyroute": ""
                }
            },
            {
                "id": 2,
                "actor": "/v2/tabsuser/1",
                "type": "Role",
                "securityrole": {
                    "id": 17,
                    "name": "SUPER_ADMIN",
                    "description": "Super Admin",
                    "symfonyroute": ""
                }
            },
            {
                "id": 3,
                "actor": "/v2/tabsuser/2",
                "type": "Role",
                "securityrole": {
                    "id": 17,
                    "name": "SUPER_ADMIN",
                    "description": "Super Admin",
                    "symfonyroute": ""
                }
            },
            {
                "id": 4,
                "actor": "/v2/tabsuser/24",
                "type": "Group",
                "securitygroup": {
                    "id": 2,
                    "name": "Management",
                    "description": "Management with access to all areas except critical system settings",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "description": "Accounts",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "description": "Booking",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "description": "Customer",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "description": "Keys",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "description": "Managed Service",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "description": "Owner",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "description": "Pricing",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "description": "Property",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "description": "Settings",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "description": "Supplier",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "description": "Tabs User",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "description": "Work Order",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "description": "Reporting",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "description": "Marketing",
                            "symfonyroute": ""
                        }
                    ]
                }
            },
            {
                "id": 5,
                "actor": "/v2/tabsuser/2",
                "type": "Group",
                "securitygroup": {
                    "id": 3,
                    "name": "Administrator",
                    "description": "Administrator with full access to everything",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "description": "Accounts",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "description": "Booking",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "description": "Customer",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "description": "Keys",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "description": "Managed Service",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "description": "Owner",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "description": "Pricing",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "description": "Property",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "description": "Settings",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "description": "Supplier",
                            "symfonyroute": ""
                        },
                        {
                            "id": 11,
                            "name": "SYSTEMSETTINGS",
                            "description": "System Settings",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "description": "Tabs User",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "description": "Work Order",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "description": "Reporting",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "description": "Marketing",
                            "symfonyroute": ""
                        }
                    ]
                }
            }
        ]

### Create a new ActorSecurity [POST]
The following fields should be provided in the POST array

* ```actorid``` The id of the actor

Where `type` is Role:
* ```securityroleid``` The id of the SecurityRole

Where `type` is Group:
* ```securitygroupid``` The id of the SecurityGroup

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/actorsecurity/1

## ActorSecurity Detail [/v2/actorsecurity/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the ActorSecurity to get

### Gets the details of an ActorSecurity [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "actor": "/v2/tabsuser/24",
            "type": "Role",
            "securityrole": {
                "id": 11,
                "name": "SYSTEMSETTINGS",
                "description": "System Settings",
                "symfonyroute": ""
            }
        }

### Update the details of an ActorSecurity [PUT]

+ Request (application/x-www-form-urlencoded)

        actorid=24

+ Response 204

### Deletes an ActorSecurity [DELETE]

+ Response 204



## SecurityGroup Index [/v2/securitygroup]
### Retrieve a list of Security Groups. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Reservations",
                "description": "Reservations staff",
                "securityroles": [
                    {
                        "id": 2,
                        "name": "BOOKING",
                        "symfonyroute": ""
                    },
                    {
                        "id": 3,
                        "name": "CUSTOMER",
                        "symfonyroute": ""
                    },
                    {
                        "id": 6,
                        "name": "OWNER",
                        "symfonyroute": ""
                    },
                    {
                        "id": 8,
                        "name": "PROPERTY",
                        "symfonyroute": ""
                    },
                    {
                        "id": 10,
                        "name": "SUPPLIER",
                        "symfonyroute": ""
                    },
                    {
                        "id": 12,
                        "name": "TABSUSER",
                        "symfonyroute": ""
                    }
                ]
            },
            {
                "id": 2,
                "name": "Management",
                "description": "Management with access to all areas except critical system settings",
                "securityroles": [
                    {
                        "id": 1,
                        "name": "ACCOUNTS",
                        "symfonyroute": ""
                    },
                    {
                        "id": 2,
                        "name": "BOOKING",
                        "symfonyroute": ""
                    },
                    {
                        "id": 3,
                        "name": "CUSTOMER",
                        "symfonyroute": ""
                    },
                    {
                        "id": 4,
                        "name": "KEYS",
                        "symfonyroute": ""
                    },
                    {
                        "id": 5,
                        "name": "MANAGEDSERVICES",
                        "symfonyroute": ""
                    },
                    {
                        "id": 6,
                        "name": "OWNER",
                        "symfonyroute": ""
                    },
                    {
                        "id": 7,
                        "name": "PRICING",
                        "symfonyroute": ""
                    },
                    {
                        "id": 8,
                        "name": "PROPERTY",
                        "symfonyroute": ""
                    },
                    {
                        "id": 9,
                        "name": "SETTINGS",
                        "symfonyroute": ""
                    },
                    {
                        "id": 10,
                        "name": "SUPPLIER",
                        "symfonyroute": ""
                    },
                    {
                        "id": 12,
                        "name": "TABSUSER",
                        "symfonyroute": ""
                    },
                    {
                        "id": 13,
                        "name": "WORKORDER",
                        "symfonyroute": ""
                    },
                    {
                        "id": 14,
                        "name": "REPORTING",
                        "symfonyroute": ""
                    },
                    {
                        "id": 15,
                        "name": "MARKETING",
                        "symfonyroute": ""
                    }
                ]
            },
            {
                "id": 3,
                "name": "Administrator",
                "description": "Administrator with full access to everything",
                "securityroles": [
                    {
                        "id": 1,
                        "name": "ACCOUNTS",
                        "symfonyroute": ""
                    },
                    {
                        "id": 2,
                        "name": "BOOKING",
                        "symfonyroute": ""
                    },
                    {
                        "id": 3,
                        "name": "CUSTOMER",
                        "symfonyroute": ""
                    },
                    {
                        "id": 4,
                        "name": "KEYS",
                        "symfonyroute": ""
                    },
                    {
                        "id": 5,
                        "name": "MANAGEDSERVICES",
                        "symfonyroute": ""
                    },
                    {
                        "id": 6,
                        "name": "OWNER",
                        "symfonyroute": ""
                    },
                    {
                        "id": 7,
                        "name": "PRICING",
                        "symfonyroute": ""
                    },
                    {
                        "id": 8,
                        "name": "PROPERTY",
                        "symfonyroute": ""
                    },
                    {
                        "id": 9,
                        "name": "SETTINGS",
                        "symfonyroute": ""
                    },
                    {
                        "id": 10,
                        "name": "SUPPLIER",
                        "symfonyroute": ""
                    },
                    {
                        "id": 11,
                        "name": "SYSTEMSETTINGS",
                        "symfonyroute": ""
                    },
                    {
                        "id": 12,
                        "name": "TABSUSER",
                        "symfonyroute": ""
                    },
                    {
                        "id": 13,
                        "name": "WORKORDER",
                        "symfonyroute": ""
                    },
                    {
                        "id": 14,
                        "name": "REPORTING",
                        "symfonyroute": ""
                    },
                    {
                        "id": 15,
                        "name": "MARKETING",
                        "symfonyroute": ""
                    }
                ]
            }
        ]

### Add a new SecurityGroup [POST]
The following fields should be provided in the POST array

* ```name``` The name of the group
* ```description``` The description of the group 

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/securitygroup/2

## SecurityGroup Detail [/v2/securitygroup/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the SecurityGroup to get

### Gets the details of a SecurityGroup [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "name": "Management",
            "description": "Management with access to all areas except critical system settings",
            "securityroles": [
                {
                    "id": 1,
                    "name": "ACCOUNTS",
                    "symfonyroute": ""
                },
                {
                    "id": 2,
                    "name": "BOOKING",
                    "symfonyroute": ""
                },
                {
                    "id": 3,
                    "name": "CUSTOMER",
                    "symfonyroute": ""
                },
                {
                    "id": 4,
                    "name": "KEYS",
                    "symfonyroute": ""
                },
                {
                    "id": 5,
                    "name": "MANAGEDSERVICES",
                    "symfonyroute": ""
                },
                {
                    "id": 6,
                    "name": "OWNER",
                    "symfonyroute": ""
                },
                {
                    "id": 7,
                    "name": "PRICING",
                    "symfonyroute": ""
                },
                {
                    "id": 8,
                    "name": "PROPERTY",
                    "symfonyroute": ""
                },
                {
                    "id": 9,
                    "name": "SETTINGS",
                    "symfonyroute": ""
                },
                {
                    "id": 10,
                    "name": "SUPPLIER",
                    "symfonyroute": ""
                },
                {
                    "id": 12,
                    "name": "TABSUSER",
                    "symfonyroute": ""
                },
                {
                    "id": 13,
                    "name": "WORKORDER",
                    "symfonyroute": ""
                },
                {
                    "id": 14,
                    "name": "REPORTING",
                    "symfonyroute": ""
                },
                {
                    "id": 15,
                    "name": "MARKETING",
                    "symfonyroute": ""
                }
            ]
        }

### Update a SecurityGroup [PUT]

+ Request (application/x-www-form-urlencoded)

        name=Management

+ Response 204

### Deletes a SecurityGroup [DELETE]

+ Response 204



## SecurityGroupRole Index [/v2/securitygrouprole]
### Retrieve a list of Security Groups. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "securitygroup": {
                    "id": 1,
                    "name": "Reservations",
                    "description": "Reservations staff",
                    "securityroles": [
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 2,
                    "name": "BOOKING",
                    "symfonyroute": ""
                }
            },
            {
                "id": 2,
                "securitygroup": {
                    "id": 1,
                    "name": "Reservations",
                    "description": "Reservations staff",
                    "securityroles": [
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 3,
                    "name": "CUSTOMER",
                    "symfonyroute": ""
                }
            },
            {
                "id": 4,
                "securitygroup": {
                    "id": 1,
                    "name": "Reservations",
                    "description": "Reservations staff",
                    "securityroles": [
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 6,
                    "name": "OWNER",
                    "symfonyroute": ""
                }
            },
            {
                "id": 3,
                "securitygroup": {
                    "id": 1,
                    "name": "Reservations",
                    "description": "Reservations staff",
                    "securityroles": [
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 8,
                    "name": "PROPERTY",
                    "symfonyroute": ""
                }
            },
            {
                "id": 5,
                "securitygroup": {
                    "id": 1,
                    "name": "Reservations",
                    "description": "Reservations staff",
                    "securityroles": [
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 10,
                    "name": "SUPPLIER",
                    "symfonyroute": ""
                }
            },
            {
                "id": 6,
                "securitygroup": {
                    "id": 1,
                    "name": "Reservations",
                    "description": "Reservations staff",
                    "securityroles": [
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 12,
                    "name": "TABSUSER",
                    "symfonyroute": ""
                }
            },
            {
                "id": 7,
                "securitygroup": {
                    "id": 2,
                    "name": "Management",
                    "description": "Management with access to all areas except critical system settings",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 1,
                    "name": "ACCOUNTS",
                    "symfonyroute": ""
                }
            },
            {
                "id": 8,
                "securitygroup": {
                    "id": 2,
                    "name": "Management",
                    "description": "Management with access to all areas except critical system settings",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 2,
                    "name": "BOOKING",
                    "symfonyroute": ""
                }
            },
            {
                "id": 9,
                "securitygroup": {
                    "id": 2,
                    "name": "Management",
                    "description": "Management with access to all areas except critical system settings",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 3,
                    "name": "CUSTOMER",
                    "symfonyroute": ""
                }
            },
            {
                "id": 10,
                "securitygroup": {
                    "id": 2,
                    "name": "Management",
                    "description": "Management with access to all areas except critical system settings",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 4,
                    "name": "KEYS",
                    "symfonyroute": ""
                }
            },
            {
                "id": 11,
                "securitygroup": {
                    "id": 2,
                    "name": "Management",
                    "description": "Management with access to all areas except critical system settings",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 5,
                    "name": "MANAGEDSERVICES",
                    "symfonyroute": ""
                }
            },
            {
                "id": 12,
                "securitygroup": {
                    "id": 2,
                    "name": "Management",
                    "description": "Management with access to all areas except critical system settings",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 6,
                    "name": "OWNER",
                    "symfonyroute": ""
                }
            },
            {
                "id": 13,
                "securitygroup": {
                    "id": 2,
                    "name": "Management",
                    "description": "Management with access to all areas except critical system settings",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 7,
                    "name": "PRICING",
                    "symfonyroute": ""
                }
            },
            {
                "id": 14,
                "securitygroup": {
                    "id": 2,
                    "name": "Management",
                    "description": "Management with access to all areas except critical system settings",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 8,
                    "name": "PROPERTY",
                    "symfonyroute": ""
                }
            },
            {
                "id": 15,
                "securitygroup": {
                    "id": 2,
                    "name": "Management",
                    "description": "Management with access to all areas except critical system settings",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 9,
                    "name": "SETTINGS",
                    "symfonyroute": ""
                }
            },
            {
                "id": 16,
                "securitygroup": {
                    "id": 2,
                    "name": "Management",
                    "description": "Management with access to all areas except critical system settings",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 10,
                    "name": "SUPPLIER",
                    "symfonyroute": ""
                }
            },
            {
                "id": 17,
                "securitygroup": {
                    "id": 2,
                    "name": "Management",
                    "description": "Management with access to all areas except critical system settings",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 12,
                    "name": "TABSUSER",
                    "symfonyroute": ""
                }
            },
            {
                "id": 18,
                "securitygroup": {
                    "id": 2,
                    "name": "Management",
                    "description": "Management with access to all areas except critical system settings",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 13,
                    "name": "WORKORDER",
                    "symfonyroute": ""
                }
            },
            {
                "id": 19,
                "securitygroup": {
                    "id": 2,
                    "name": "Management",
                    "description": "Management with access to all areas except critical system settings",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 14,
                    "name": "REPORTING",
                    "symfonyroute": ""
                }
            },
            {
                "id": 20,
                "securitygroup": {
                    "id": 2,
                    "name": "Management",
                    "description": "Management with access to all areas except critical system settings",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 15,
                    "name": "MARKETING",
                    "symfonyroute": ""
                }
            },
            {
                "id": 21,
                "securitygroup": {
                    "id": 3,
                    "name": "Administrator",
                    "description": "Administrator with full access to everything",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 11,
                            "name": "SYSTEMSETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 1,
                    "name": "ACCOUNTS",
                    "symfonyroute": ""
                }
            },
            {
                "id": 22,
                "securitygroup": {
                    "id": 3,
                    "name": "Administrator",
                    "description": "Administrator with full access to everything",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 11,
                            "name": "SYSTEMSETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 2,
                    "name": "BOOKING",
                    "symfonyroute": ""
                }
            },
            {
                "id": 23,
                "securitygroup": {
                    "id": 3,
                    "name": "Administrator",
                    "description": "Administrator with full access to everything",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 11,
                            "name": "SYSTEMSETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 3,
                    "name": "CUSTOMER",
                    "symfonyroute": ""
                }
            },
            {
                "id": 24,
                "securitygroup": {
                    "id": 3,
                    "name": "Administrator",
                    "description": "Administrator with full access to everything",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 11,
                            "name": "SYSTEMSETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 4,
                    "name": "KEYS",
                    "symfonyroute": ""
                }
            },
            {
                "id": 25,
                "securitygroup": {
                    "id": 3,
                    "name": "Administrator",
                    "description": "Administrator with full access to everything",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 11,
                            "name": "SYSTEMSETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 5,
                    "name": "MANAGEDSERVICES",
                    "symfonyroute": ""
                }
            },
            {
                "id": 26,
                "securitygroup": {
                    "id": 3,
                    "name": "Administrator",
                    "description": "Administrator with full access to everything",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 11,
                            "name": "SYSTEMSETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 6,
                    "name": "OWNER",
                    "symfonyroute": ""
                }
            },
            {
                "id": 27,
                "securitygroup": {
                    "id": 3,
                    "name": "Administrator",
                    "description": "Administrator with full access to everything",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 11,
                            "name": "SYSTEMSETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 7,
                    "name": "PRICING",
                    "symfonyroute": ""
                }
            },
            {
                "id": 28,
                "securitygroup": {
                    "id": 3,
                    "name": "Administrator",
                    "description": "Administrator with full access to everything",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 11,
                            "name": "SYSTEMSETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 8,
                    "name": "PROPERTY",
                    "symfonyroute": ""
                }
            },
            {
                "id": 29,
                "securitygroup": {
                    "id": 3,
                    "name": "Administrator",
                    "description": "Administrator with full access to everything",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 11,
                            "name": "SYSTEMSETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 9,
                    "name": "SETTINGS",
                    "symfonyroute": ""
                }
            },
            {
                "id": 30,
                "securitygroup": {
                    "id": 3,
                    "name": "Administrator",
                    "description": "Administrator with full access to everything",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 11,
                            "name": "SYSTEMSETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 10,
                    "name": "SUPPLIER",
                    "symfonyroute": ""
                }
            },
            {
                "id": 31,
                "securitygroup": {
                    "id": 3,
                    "name": "Administrator",
                    "description": "Administrator with full access to everything",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 11,
                            "name": "SYSTEMSETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 11,
                    "name": "SYSTEMSETTINGS",
                    "symfonyroute": ""
                }
            },
            {
                "id": 32,
                "securitygroup": {
                    "id": 3,
                    "name": "Administrator",
                    "description": "Administrator with full access to everything",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 11,
                            "name": "SYSTEMSETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 12,
                    "name": "TABSUSER",
                    "symfonyroute": ""
                }
            },
            {
                "id": 33,
                "securitygroup": {
                    "id": 3,
                    "name": "Administrator",
                    "description": "Administrator with full access to everything",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 11,
                            "name": "SYSTEMSETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 13,
                    "name": "WORKORDER",
                    "symfonyroute": ""
                }
            },
            {
                "id": 34,
                "securitygroup": {
                    "id": 3,
                    "name": "Administrator",
                    "description": "Administrator with full access to everything",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 11,
                            "name": "SYSTEMSETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 14,
                    "name": "REPORTING",
                    "symfonyroute": ""
                }
            },
            {
                "id": 35,
                "securitygroup": {
                    "id": 3,
                    "name": "Administrator",
                    "description": "Administrator with full access to everything",
                    "securityroles": [
                        {
                            "id": 1,
                            "name": "ACCOUNTS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 2,
                            "name": "BOOKING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 3,
                            "name": "CUSTOMER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 4,
                            "name": "KEYS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 5,
                            "name": "MANAGEDSERVICES",
                            "symfonyroute": ""
                        },
                        {
                            "id": 6,
                            "name": "OWNER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 7,
                            "name": "PRICING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 8,
                            "name": "PROPERTY",
                            "symfonyroute": ""
                        },
                        {
                            "id": 9,
                            "name": "SETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 10,
                            "name": "SUPPLIER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 11,
                            "name": "SYSTEMSETTINGS",
                            "symfonyroute": ""
                        },
                        {
                            "id": 12,
                            "name": "TABSUSER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 13,
                            "name": "WORKORDER",
                            "symfonyroute": ""
                        },
                        {
                            "id": 14,
                            "name": "REPORTING",
                            "symfonyroute": ""
                        },
                        {
                            "id": 15,
                            "name": "MARKETING",
                            "symfonyroute": ""
                        }
                    ]
                },
                "securityrole": {
                    "id": 15,
                    "name": "MARKETING",
                    "symfonyroute": ""
                }
            }
        ]

### Add a new SecurityGroupRole [POST]
The following fields should be provided in the POST array

* ```securitygroupid``` The id of the SecurityGroup
* ```securityroleid``` The id of the SecurityRole

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/securitygrouprole/2

## SecurityGroupRole Detail [/v2/securitygrouprole/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the SecurityGroupRole to get

### Gets the details of a SecurityGroupRole [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "securitygroup": {
                "id": 1,
                "name": "Reservations",
                "description": "Reservations staff",
                "securityroles": [
                    {
                        "id": 2,
                        "name": "BOOKING",
                        "symfonyroute": ""
                    },
                    {
                        "id": 3,
                        "name": "CUSTOMER",
                        "symfonyroute": ""
                    },
                    {
                        "id": 6,
                        "name": "OWNER",
                        "symfonyroute": ""
                    },
                    {
                        "id": 8,
                        "name": "PROPERTY",
                        "symfonyroute": ""
                    },
                    {
                        "id": 10,
                        "name": "SUPPLIER",
                        "symfonyroute": ""
                    },
                    {
                        "id": 12,
                        "name": "TABSUSER",
                        "symfonyroute": ""
                    }
                ]
            },
            "securityrole": {
                "id": 3,
                "name": "CUSTOMER",
                "symfonyroute": ""
            }
        }

### Update a SecurityGroupRole [PUT]

+ Request (application/x-www-form-urlencoded)

        securitygroupid=2

+ Response 204

### Deletes a SecurityGroupRole [DELETE]

+ Response 204



## SecurityRole Index [/v2/securityrole]
### Retrieve a list of Security Roles. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "ACCOUNTS",
                "description": "Accounts",
                "symfonyroute": ""
            },
            {
                "id": 2,
                "name": "BOOKING",
                "description": "Booking",
                "symfonyroute": ""
            },
            {
                "id": 3,
                "name": "CUSTOMER",
                "description": "Customer",
                "symfonyroute": ""
            },
            {
                "id": 4,
                "name": "KEYS",
                "description": "Keys",
                "symfonyroute": ""
            },
            {
                "id": 5,
                "name": "MANAGEDSERVICES",
                "description": "Managed Service",
                "symfonyroute": ""
            },
            {
                "id": 6,
                "name": "OWNER",
                "description": "Owner",
                "symfonyroute": ""
            },
            {
                "id": 7,
                "name": "PRICING",
                "description": "Pricing",
                "symfonyroute": ""
            },
            {
                "id": 8,
                "name": "PROPERTY",
                "description": "Property",
                "symfonyroute": ""
            },
            {
                "id": 9,
                "name": "SETTINGS",
                "description": "Settings",
                "symfonyroute": ""
            },
            {
                "id": 10,
                "name": "SUPPLIER",
                "description": "Supplier",
                "symfonyroute": ""
            },
            {
                "id": 11,
                "name": "SYSTEMSETTINGS",
                "description": "System Settings",
                "symfonyroute": ""
            },
            {
                "id": 12,
                "name": "TABSUSER",
                "description": "Tabs User",
                "symfonyroute": ""
            },
            {
                "id": 13,
                "name": "WORKORDER",
                "description": "Work Order",
                "symfonyroute": ""
            },
            {
                "id": 14,
                "name": "REPORTING",
                "description": "Reporting",
                "symfonyroute": ""
            },
            {
                "id": 15,
                "name": "MARKETING",
                "description": "Marketing",
                "symfonyroute": ""
            },
            {
                "id": 16,
                "name": "ADMIN",
                "description": "Admin",
                "symfonyroute": ""
            },
            {
                "id": 17,
                "name": "SUPER_ADMIN",
                "description": "Super Admin",
                "symfonyroute": ""
            }
        ]

### Add a new SecurityRole [POST]
The following fields should be provided in the POST array

* ```name``` The name of the role
* ```description``` A description of the role
* ```symfonyroute``` The symfony route (unused)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/securityrole/2

## SecurityRole Detail [/v2/securityrole/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the SecurityRole to get

### Gets the details of a SecurityRole [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "name": "BOOKING",
            "description": "Booking",
            "symfonyroute": ""
        }

### Update a SecurityRole [PUT]

+ Request (application/x-www-form-urlencoded)

        name=BOOKING
        description=Booking

+ Response 204

### Deletes a SecurityRole [DELETE]

+ Response 204



# Group VAT  
## VAT Band Index [/v2/vatband]
### Get all VAT Bands [GET]

+ Response 200 (application/json)

        [
            {
                "id":1,
                "vatband":"Zero\/Exempt"
            },
            {
                "id":2,
                "vatband":"Standard"
            },
            {
                "id":3,
                "vatband":"Reduced"
            }
        ]

### Add a new VAT Band [POST]

The following fields should be provided in the POST array

* ```vatband``` The name of the VAT Band being added

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/vatband/2

## VAT Band Detail [/v2/vatband/{id}]
### Gets the details of a VAT Band [GET]
+ Parameters

    + id (required, integer, `3`) ... The id of the VAT Band to get

+ Response 200 (application/json)

        {
            "id":3,
            "vatband":"Reduced"
        }

### Update a VAT Band [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the VAT Band

+ Request (application/x-www-form-urlencoded)

        vatband="Reduced rate"

+ Response 204

### Deletes a VAT Band [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the VAT Rate

+ Response 204




## VAT Rate Index [/v2/vatrate]
### Get all VAT Rates [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "vatband": {
                    "id": 2,
                    "vatband":"Standard"
                },
                "fromdate": "1900-01-01",
                "todate": "2008-11-30",
                "percentage": 17.5
            },
            {
                "id": 2,
                "vatband": {
                    "id": 2,
                    "vatband":"Standard"
                },
                "fromdate": "2008-12-01",
                "todate": "2009-12-31",
                "percentage": 15
            },
            {
                "id": 3,
                "vatband": {
                    "id": 2,
                    "vatband":"Standard"
                },
                "fromdate": "2010-01-01",
                "todate": "2011-01-03",
                "percentage": 17.5
            },
            {
                "id": 4,
                "vatband": {
                    "id": 2,
                    "vatband":"Standard"
                },
                "fromdate": "2011-01-03",
                "todate": "2100-01-01",
                "percentage": 20
            },
            {
                "id": 5,
                "vatband": {
                    "id": 1,
                    "vatband":"Zero\/Exempt"
                },
                "fromdate": "2011-01-03",
                "todate": "2100-01-01",
                "percentage": 0
            },
            {
                "id": 6,
                "vatband": {
                    "id": 3,
                    "vatband":"Reduced"
                },
                "fromdate": "2011-01-03",
                "todate": "2100-01-01",
                "percentage": 5
            }
        ]

### Add a new VAT Rate [POST]

The following fields should be provided in the POST array

* ```vatband``` The VAT band, e.g. "Standard"
* ```fromdate``` The date the VAT Rate is applicable from
* ```todate``` The date the VAT Rate is applicable to
* ```percentage``` The percentage, e.g. 12 = 12%

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/vatrate/2

## VAT Rate Detail [/v2/vatrate/{id}]
### Gets the details of a VAT Rate [GET]
+ Parameters

    + id (required, integer, `3`) ... The id of the VAT Rate to get

+ Response 200 (application/json)

        {
            "id": 3,
            "vatband": {
                "id": 2,
                "vatband":"Standard"
            },
            "fromdate": "2010-01-01",
            "todate": "2011-01-03",
            "percentage": 17.5
        }

### Update a VAT Rate [PUT]
+ Parameters

    + id (required, integer, `1`) ... The id of the VAT Rate

+ Request (application/x-www-form-urlencoded)

        percentage=10

+ Response 204

### Deletes a VAT Rate [DELETE]
+ Parameters

    + id (required, integer, `1`) ... The id of the VAT Rate

+ Response 204




# Group Work Order
A Work Order represents work which needs doing related to a Property

## Supplier Invoice Index [/v2/supplierinvoice]
### Retrieves a list of SupplierInvoices. [GET]

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 3,
            "page": 1,
            "count": 3,
            "limit": 10,
            "time": 0,
            "orderBy": null,
            "filter": "",
            "previous": null,
            "next": null,
            "elements": [
                {
                    "id": 1,
                    "workordersupplier": {
                        "id": 1,
                        "supplier": {
                            "id": 14,
                            "type": "Supplier",
                            "actorcode": "",
                            "created": "2017-05-16",
                            "updated": "",
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "inactive": false,
                            "firstname": "Ian",
                            "surname": "Stamp",
                            "title": "Mr",
                            "salutation": "Ian",
                            "companyname": "",
                            "vatnumber": "",
                            "companynumber": "",
                            "contactdetails": [
                                {
                                    "id": 27,
                                    "type": "C",
                                    "contactmethodtype": "Email",
                                    "contactmethodsubtype": "Home",
                                    "value": "ian@stamp.com",
                                    "comment": "",
                                    "invalid": false,
                                    "invaliddatetime": "",
                                    "invalidreason": "",
                                    "contactpreferences": [],
                                    "dedupekey": "ot-ian@stamp.com"
                                },
                                {
                                    "id": 28,
                                    "type": "P",
                                    "contactmethodsubtype": "Play",
                                    "address": {
                                        "id": 20,
                                        "line1": "Carlton House",
                                        "line2": "Market Place",
                                        "line3": "",
                                        "town": "Reepham",
                                        "county": "Norfolk",
                                        "postcode": "NR10 4JJ",
                                        "country": {
                                            "alpha2": "GB",
                                            "alpha3": "GBR",
                                            "name": "United Kingdom"
                                        },
                                        "longitude": "1.652729",
                                        "latitude": "52.617954",
                                        "geohash": ""
                                    },
                                    "invalid": false,
                                    "invaliddatetime": "",
                                    "invalidreason": "",
                                    "contactpreferences": [
                                        {
                                            "id": 10,
                                            "branding": "/v2/branding/1",
                                            "rolereason": {
                                                "id": 1,
                                                "role": {
                                                    "id": 1,
                                                    "name": "Customer",
                                                    "donotdelete": true
                                                },
                                                "reason": {
                                                    "id": 1,
                                                    "name": "Booking Confirmation",
                                                    "donotdelete": true
                                                },
                                                "donotdelete": true,
                                                "required": true
                                            },
                                            "priority": 1,
                                            "donotuse": false
                                        }
                                    ],
                                    "dedupekey": "po-nr104jj"
                                }
                            ],
                            "bankaccounts": [],
                            "bacsbankaccount": {},
                            "documents": [],
                            "mergedinto": "",
                            "potentialduplicates": [],
                            "mergedactors": [],
                            "accountingreference": "",
                            "activities": [
                                {
                                    "id": 3,
                                    "managedactivity": {
                                        "id": 2,
                                        "name": "Keyholder",
                                        "description": "Being the keyholder for a property",
                                        "donotmodify": true
                                    },
                                    "fromdate": "2016-01-01",
                                    "todate": "2018-01-01"
                                }
                            ],
                            "defaultbrandinggroup": [],
                            "defaultbookingbrand": [],
                            "defaultbranding": []
                        },
                        "commissionpercent": 10,
                        "paymenttype": "Cheque",
                        "payeename": "Joe Bloggs",
                        "paymentadvice": "Please find cheque attached",
                        "hourlyrate": 43.5,
                        "calloutcharge": 75,
                        "defaultinvoiceto": "Owner"
                    },
                    "invoicedate": "2014-05-01",
                    "invoicenumber": "1234",
                    "description": "Blah blah blah blah",
                    "invoiceitems": [
                        {
                            "id": 1,
                            "description": "Blah blah blah blah",
                            "amountnet": "235.12",
                            "amountvat": "32.54",
                            "exchangerate": {
                                "id": 1,
                                "currency": {
                                    "id": 1,
                                    "code": "GBP",
                                    "name": "Pound Sterling",
                                    "decimalplaces": 2
                                },
                                "unitsperbaseunit": 1
                            },
                            "workorder": "/v2/workorder/3",
                            "ownercharged": false,
                            "supplierpaid": true,
                            "itempayments": [
                                {
                                    "id": 1,
                                    "supplierpayment": "/v2/supplierpayment/1",
                                    "amountnet": "235.12",
                                    "amountvat": "32.54",
                                    "commissionpercentage": "12.0000",
                                    "commissionnet": "17.00",
                                    "commissionvat": "3.54",
                                    "exchangerate": {
                                        "id": 1,
                                        "currency": {
                                            "id": 1,
                                            "code": "GBP",
                                            "name": "Pound Sterling",
                                            "decimalplaces": 2
                                        },
                                        "unitsperbaseunit": 1
                                    }
                                }
                            ],
                            "ownercharges": [
                                {
                                    "id": 5,
                                    "type": "OwnerChargeWorkOrder",
                                    "bookeddate": "2017-05-16",
                                    "workdonedate": "2016-10-20",
                                    "ownerchargecode": {
                                        "id": 1,
                                        "ownerchargecode": "ADM",
                                        "description": "Administration Charge",
                                        "vatband": {
                                            "id": 2,
                                            "vatband": "Standard"
                                        },
                                        "recharge": false
                                    },
                                    "description": "Blah blah money money",
                                    "amountnet": 19.44,
                                    "amountvat": 3.89,
                                    "exchangerate": {
                                        "id": 1,
                                        "currency": {
                                            "id": 1,
                                            "code": "GBP",
                                            "name": "Pound Sterling",
                                            "decimalplaces": 2
                                        },
                                        "unitsperbaseunit": 1
                                    },
                                    "ownerstatement": null,
                                    "created": "2017-05-16 10:00:06",
                                    "createdby": "/v2/tabsuser/24",
                                    "lastupdated": "2017-05-16 10:00:06",
                                    "cancelled": null,
                                    "cancelledby": null,
                                    "owner": "/v2/owner/16",
                                    "invoiceitem": "/v2/supplierinvoice/1/item/1"
                                }
                            ]
                        },
                        {
                            "id": 2,
                            "description": "Blah blah blah blah blah",
                            "amountnet": "175.12",
                            "amountvat": "42.54",
                            "exchangerate": {
                                "id": 1,
                                "currency": {
                                    "id": 1,
                                    "code": "GBP",
                                    "name": "Pound Sterling",
                                    "decimalplaces": 2
                                },
                                "unitsperbaseunit": 1
                            },
                            "workorder": "/v2/workorder/3",
                            "ownercharged": false,
                            "supplierpaid": false,
                            "itempayments": [],
                            "ownercharges": []
                        }
                    ]
                },
                {
                    "id": 2,
                    "workordersupplier": {
                        "id": 2,
                        "supplier": {
                            "id": 13,
                            "type": "Supplier",
                            "actorcode": "",
                            "created": "2017-05-16",
                            "updated": "",
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "inactive": false,
                            "firstname": "Jon",
                            "surname": "Beverley",
                            "title": "Mr",
                            "salutation": "",
                            "companyname": "Jon's Letting Agency",
                            "vatnumber": "",
                            "companynumber": "",
                            "contactdetails": [
                                {
                                    "id": 25,
                                    "type": "C",
                                    "contactmethodtype": "Email",
                                    "contactmethodsubtype": "Play",
                                    "value": "jon@lettings.com",
                                    "comment": "",
                                    "invalid": false,
                                    "invaliddatetime": "",
                                    "invalidreason": "",
                                    "contactpreferences": [],
                                    "dedupekey": "ot-jon@lettings.com"
                                },
                                {
                                    "id": 26,
                                    "type": "P",
                                    "contactmethodsubtype": "Home",
                                    "address": {
                                        "id": 19,
                                        "line1": "Carlton House",
                                        "line2": "Market Place",
                                        "line3": "",
                                        "town": "Reepham",
                                        "county": "Norfolk",
                                        "postcode": "NR10 4JJ",
                                        "country": {
                                            "alpha2": "GB",
                                            "alpha3": "GBR",
                                            "name": "United Kingdom"
                                        },
                                        "longitude": "1.652729",
                                        "latitude": "52.617954",
                                        "geohash": ""
                                    },
                                    "invalid": false,
                                    "invaliddatetime": "",
                                    "invalidreason": "",
                                    "contactpreferences": [],
                                    "dedupekey": "po-nr104jj"
                                }
                            ],
                            "bankaccounts": [],
                            "bacsbankaccount": {},
                            "documents": [],
                            "mergedinto": "",
                            "potentialduplicates": [],
                            "mergedactors": [],
                            "accountingreference": "",
                            "activities": [
                                {
                                    "id": 2,
                                    "managedactivity": {
                                        "id": 1,
                                        "name": "Cleaning",
                                        "description": "Cleaning a property",
                                        "donotmodify": true
                                    },
                                    "fromdate": "2016-01-01",
                                    "todate": "2018-01-01"
                                }
                            ],
                            "defaultbrandinggroup": [],
                            "defaultbookingbrand": [],
                            "defaultbranding": []
                        },
                        "commissionpercent": 10,
                        "paymenttype": "Cheque",
                        "payeename": "Joe Bloggs",
                        "paymentadvice": "Please find cheque attached",
                        "hourlyrate": 43.5,
                        "calloutcharge": 75,
                        "defaultinvoiceto": "Owner"
                    },
                    "invoicedate": "2014-05-01",
                    "invoicenumber": "12345",
                    "description": "Blah blah blah blah",
                    "invoiceitems": []
                },
                {
                    "id": 3,
                    "workordersupplier": {
                        "id": 3,
                        "supplier": {
                            "id": 21,
                            "type": "Supplier",
                            "actorcode": "",
                            "created": "2017-05-16",
                            "updated": "",
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "inactive": false,
                            "firstname": "Bob",
                            "surname": "Dylan",
                            "title": "Mr",
                            "salutation": "Sir",
                            "companyname": "",
                            "vatnumber": "",
                            "companynumber": "",
                            "contactdetails": [
                                {
                                    "id": 41,
                                    "type": "C",
                                    "contactmethodtype": "Email",
                                    "contactmethodsubtype": "Home",
                                    "value": "blonde@onblonde.com",
                                    "comment": "",
                                    "invalid": false,
                                    "invaliddatetime": "",
                                    "invalidreason": "",
                                    "contactpreferences": [],
                                    "dedupekey": "ot-blonde@onblonde.com"
                                },
                                {
                                    "id": 42,
                                    "type": "P",
                                    "contactmethodsubtype": "",
                                    "address": {
                                        "id": 29,
                                        "line1": "Highway 61",
                                        "line2": "Revisited",
                                        "line3": "",
                                        "town": "North Country",
                                        "county": "Duluth",
                                        "postcode": "NR10 4JJ",
                                        "country": {
                                            "alpha2": "GB",
                                            "alpha3": "GBR",
                                            "name": "United Kingdom"
                                        },
                                        "longitude": "1.652729",
                                        "latitude": "52.617954",
                                        "geohash": ""
                                    },
                                    "invalid": false,
                                    "invaliddatetime": "",
                                    "invalidreason": "",
                                    "contactpreferences": [
                                        {
                                            "id": 14,
                                            "branding": "/v2/branding/1",
                                            "rolereason": {
                                                "id": 1,
                                                "role": {
                                                    "id": 1,
                                                    "name": "Customer",
                                                    "donotdelete": true
                                                },
                                                "reason": {
                                                    "id": 1,
                                                    "name": "Booking Confirmation",
                                                    "donotdelete": true
                                                },
                                                "donotdelete": true,
                                                "required": true
                                            },
                                            "priority": 1,
                                            "donotuse": false
                                        }
                                    ],
                                    "dedupekey": "po-nr104jj"
                                }
                            ],
                            "bankaccounts": [],
                            "bacsbankaccount": {},
                            "documents": [],
                            "mergedinto": "",
                            "potentialduplicates": [],
                            "mergedactors": [],
                            "accountingreference": "",
                            "activities": [
                                {
                                    "id": 6,
                                    "managedactivity": {
                                        "id": 4,
                                        "name": "Inspections",
                                        "description": "Grading inspections such as VisitBritain",
                                        "donotmodify": true
                                    },
                                    "fromdate": "2016-01-01",
                                    "todate": "2018-01-01"
                                },
                                {
                                    "id": 7,
                                    "managedactivity": {
                                        "id": 5,
                                        "name": "Photography",
                                        "description": "All aspects of image creation and processing",
                                        "donotmodify": false
                                    },
                                    "fromdate": "2016-01-01",
                                    "todate": "2018-01-01"
                                },
                                {
                                    "id": 8,
                                    "managedactivity": {
                                        "id": 6,
                                        "name": "Safety",
                                        "description": "Gas and electrical safety",
                                        "donotmodify": false
                                    },
                                    "fromdate": "2016-01-01",
                                    "todate": "2018-01-01"
                                }
                            ],
                            "defaultbrandinggroup": [],
                            "defaultbookingbrand": [],
                            "defaultbranding": []
                        },
                        "commissionpercent": 12.33,
                        "paymenttype": "Tobacco",
                        "payeename": "Constant Sorrow",
                        "paymentadvice": "Don't think twice",
                        "hourlyrate": 9999.99,
                        "calloutcharge": 99.99,
                        "defaultinvoiceto": "Owner"
                    },
                    "invoicedate": "2014-05-01",
                    "invoicenumber": "12345",
                    "description": "Blah blah blah blah",
                    "invoiceitems": [
                        {
                            "id": 3,
                            "description": "Blah blah blah blah blah",
                            "amountnet": "175.12",
                            "amountvat": "42.54",
                            "exchangerate": {
                                "id": 1,
                                "currency": {
                                    "id": 1,
                                    "code": "GBP",
                                    "name": "Pound Sterling",
                                    "decimalplaces": 2
                                },
                                "unitsperbaseunit": 1
                            },
                            "workorder": "/v2/workorder/3",
                            "ownercharged": false,
                            "supplierpaid": false,
                            "itempayments": [],
                            "ownercharges": []
                        }
                    ]
                }
            ]
        }

### Add a new WorkOrderSupplier [POST]

The following fields should be provided in the POST array

* ```workordersupplier``` The id of the WorkOrderSupplier
* ```invoicedate``` The invoice date
* ```invoicenumber``` The invoice number (optional)
* ```description``` Description of what the invoice relates to (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/supplierinvoice/2


## Supplier Invoice Detail [/v2/supplierinvoice/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the SupplierInvoice

### Retrieves details of a SupplierInvoice [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "workordersupplier": {
                "id": 2,
                "supplier": {
                    "id": 13,
                    "type": "Supplier",
                    "actorcode": "",
                    "created": "2017-05-16",
                    "updated": "",
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "inactive": false,
                    "firstname": "Jon",
                    "surname": "Beverley",
                    "title": "Mr",
                    "salutation": "",
                    "companyname": "Jon's Letting Agency",
                    "vatnumber": "",
                    "companynumber": "",
                    "contactdetails": [
                        {
                            "id": 25,
                            "type": "C",
                            "contactmethodtype": "Email",
                            "contactmethodsubtype": "Play",
                            "value": "jon@lettings.com",
                            "comment": "",
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [],
                            "dedupekey": "ot-jon@lettings.com"
                        },
                        {
                            "id": 26,
                            "type": "P",
                            "contactmethodsubtype": "Home",
                            "address": {
                                "id": 19,
                                "line1": "Carlton House",
                                "line2": "Market Place",
                                "line3": "",
                                "town": "Reepham",
                                "county": "Norfolk",
                                "postcode": "NR10 4JJ",
                                "country": {
                                    "alpha2": "GB",
                                    "alpha3": "GBR",
                                    "name": "United Kingdom"
                                },
                                "longitude": "1.652729",
                                "latitude": "52.617954",
                                "geohash": ""
                            },
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [],
                            "dedupekey": "po-nr104jj"
                        }
                    ],
                    "bankaccounts": [],
                    "bacsbankaccount": {},
                    "documents": [],
                    "mergedinto": "",
                    "potentialduplicates": [],
                    "mergedactors": [],
                    "accountingreference": "",
                    "activities": [
                        {
                            "id": 2,
                            "managedactivity": {
                                "id": 1,
                                "name": "Cleaning",
                                "description": "Cleaning a property",
                                "donotmodify": true
                            },
                            "fromdate": "2016-01-01",
                            "todate": "2018-01-01"
                        }
                    ],
                    "defaultbrandinggroup": [],
                    "defaultbookingbrand": [],
                    "defaultbranding": []
                },
                "commissionpercent": 10,
                "paymenttype": "Cheque",
                "payeename": "Joe Bloggs",
                "paymentadvice": "Please find cheque attached",
                "hourlyrate": 43.5,
                "calloutcharge": 75,
                "defaultinvoiceto": "Owner"
            },
            "invoicedate": "2014-05-01",
            "invoicenumber": "12345",
            "description": "Blah blah blah blah",
            "invoiceitems": []
        }

### Update a SupplierInvoice [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. description=Painting

+ Response 204

### Delete a SupplierInvoice [DELETE]

+ Response 204



## Supplier Invoice Item Index [/v2/supplierinvoice/{id}/item]

+ Parameters

    + id (required, integer, `1`) ... The id of the SupplierInvoice

### Retrieves a list of all Items for a SupplierInvoice [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "description": "Blah blah blah blah",
                "amountnet": "235.12",
                "amountvat": "32.54",
                "exchangerate": {
                    "id": 1,
                    "currency": {
                        "id": 1,
                        "code": "GBP",
                        "name": "Pound Sterling",
                        "decimalplaces": 2
                    },
                    "unitsperbaseunit": 1
                },
                "workorder": "/v2/workorder/3",
                "ownercharged": false,
                "supplierpaid": true,
                "itempayments": [
                    {
                        "id": 1,
                        "supplierpayment": "/v2/supplierpayment/1",
                        "amountnet": "235.12",
                        "amountvat": "32.54",
                        "commissionpercentage": "12.0000",
                        "commissionnet": "17.00",
                        "commissionvat": "3.54",
                        "exchangerate": {
                            "id": 1,
                            "currency": {
                                "id": 1,
                                "code": "GBP",
                                "name": "Pound Sterling",
                                "decimalplaces": 2
                            },
                            "unitsperbaseunit": 1
                        }
                    }
                ],
                "ownercharges": [
                    {
                        "id": 5,
                        "type": "OwnerChargeWorkOrder",
                        "bookeddate": "2017-02-23",
                        "workdonedate": "2016-10-20",
                        "ownerchargecode": {
                            "id": 1,
                            "ownerchargecode": "ADM",
                            "description": "Administration Charge",
                            "vatband": {
                                "id": 2,
                                "vatband": "Standard"
                            },
                            "recharge": false
                        },
                        "description": "Blah blah money money",
                        "amountnet": 19.44,
                        "amountvat": 3.89,
                        "exchangerate": {
                            "id": 1,
                            "currency": {
                                "id": 1,
                                "code": "GBP",
                                "name": "Pound Sterling",
                                "decimalplaces": 2
                            },
                            "unitsperbaseunit": 1
                        },
                        "ownerstatement": null,
                        "created": "2017-02-23 14:10:29",
                        "createdby": "/v2/tabsuser/24",
                        "lastupdated": "2017-02-23 14:10:29",
                        "cancelled": null,
                        "cancelledby": null,
                        "invoiceitem": "/v2/supplierinvoice/1/item/1"
                    }
                ]
            },
            {
                "id": 2,
                "description": "Blah blah blah blah blah",
                "amountnet": "175.12",
                "amountvat": "42.54",
                "exchangerate": {
                    "id": 1,
                    "currency": {
                        "id": 1,
                        "code": "GBP",
                        "name": "Pound Sterling",
                        "decimalplaces": 2
                    },
                    "unitsperbaseunit": 1
                },
                "workorder": "/v2/workorder/3",
                "ownercharged": false,
                "supplierpaid": false,
                "itempayments": [],
                "ownercharges": []
            }
        ]

### Add a new SupplierInvoiceItem [POST]
The following fields should be provided in the POST array

* ```description``` Description of the item (optional)
* ```amountnet``` The Net amount of the item
* ```amountvat``` The amount of Vat
* ```exchangerateid``` The id of the exchange rate that applies to the item
* ```workorderinstanceid``` The id of the Work Order Instance that this item relates to
* ```updatedbyactorid``` The id of the actor creating or updating the item

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/supplierinvoice/1/item/1

## Supplier Invoice Item Detail [/v2/supplierinvoice/{id}/item/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the SupplierInvoice
    + id2 (required, integer, `1`) ... The id of the Item to get

### Retrieves details of a SupplierInvoice Item [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "description": "Blah blah blah blah",
            "amountnet": "235.12",
            "amountvat": "32.54",
            "exchangerate": {
                "id": 1,
                "currency": {
                    "id": 1,
                    "code": "GBP",
                    "name": "Pound Sterling",
                    "decimalplaces": 2
                },
                "unitsperbaseunit": 1
            },
            "workorder": "/v2/workorder/3",
            "ownercharged": false,
            "supplierpaid": true,
            "itempayments": [
                {
                    "id": 1,
                    "supplierpayment": "/v2/supplierpayment/1",
                    "amountnet": "235.12",
                    "amountvat": "32.54",
                    "commissionpercentage": "12.0000",
                    "commissionnet": "17.00",
                    "commissionvat": "3.54",
                    "exchangerate": {
                        "id": 1,
                        "currency": {
                            "id": 1,
                            "code": "GBP",
                            "name": "Pound Sterling",
                            "decimalplaces": 2
                        },
                        "unitsperbaseunit": 1
                    }
                }
            ],
            "ownercharges": [
                {
                    "id": 5,
                    "type": "OwnerChargeWorkOrder",
                    "bookeddate": "2017-02-23",
                    "workdonedate": "2016-10-20",
                    "ownerchargecode": {
                        "id": 1,
                        "ownerchargecode": "ADM",
                        "description": "Administration Charge",
                        "vatband": {
                            "id": 2,
                            "vatband": "Standard"
                        },
                        "recharge": false
                    },
                    "description": "Blah blah money money",
                    "amountnet": 19.44,
                    "amountvat": 3.89,
                    "exchangerate": {
                        "id": 1,
                        "currency": {
                            "id": 1,
                            "code": "GBP",
                            "name": "Pound Sterling",
                            "decimalplaces": 2
                        },
                        "unitsperbaseunit": 1
                    },
                    "ownerstatement": null,
                    "created": "2017-02-23 14:10:29",
                    "createdby": "/v2/tabsuser/24",
                    "lastupdated": "2017-02-23 14:10:29",
                    "cancelled": null,
                    "cancelledby": null,
                    "invoiceitem": "/v2/supplierinvoice/1/item/1"
                }
            ]
        }

### Update the details of a SupplierInvoice Item [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output.

    e.g. amountnet=11.43

+ Response 204

### Delete a SupplierInvoiceItem [DELETE]

+ Response 204



## Supplier Invoice Item Payment Index [/v2/supplierinvoice/{id}/item/{id2}/payment]

+ Parameters

    + id (required, integer, `1`) ... The id of the SupplierInvoice
    + id2 (required, integer, `1`) ... The id of the SupplierInvoiceItem

### Retrieves a list of all Items for a SupplierInvoiceItemPayment [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "supplierpayment": "/v2/supplierpayment/1",
                "amountnet": "235.12",
                "amountvat": "32.54",
                "commissionpercentage": "12.0000",
                "commissionnet": "17.00",
                "commissionvat": "3.54",
                "exchangerate": {
                    "id": 1,
                    "currency": {
                        "id": 1,
                        "code": "GBP",
                        "name": "Pound Sterling",
                        "decimalplaces": 2
                    },
                    "unitsperbaseunit": 1
                }
            }
        ]

### Add a new SupplierInvoiceItemPayment [POST]
The following fields should be provided in the POST array

* ```supplierpaymentid``` The id of the SupplierPayment
* ```amountnet``` The Net amount of the item (optional)
* ```amountvat``` The amount of VAT (optional)
* ```commissionpercentage``` The commission percentage (optional)
* ```commissionnet``` The Net amount of commission (optional)
* ```commissionvat``` The amount of VAT on the commission (optional)
* ```exchangerateid``` The id of the exchange rate that applies to the item
* ```updatedbyactorid``` Id of the tabs user who updated the payment item

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/supplierinvoice/1/item/1/payment/1

## Supplier Invoice Item Detail [/v2/supplierinvoice/{id}/item/{id2}/payment/{id3}]

+ Parameters

    + id (required, integer, `1`) ... The id of the SupplierInvoice
    + id2 (required, integer, `1`) ... The id of the SupplierInvoiceItem to get
    + id3 (required, integer, `1`) ... The id of the SupplierInvoiceItemPayment to get

### Retrieves details of a SupplierInvoiceItemPayment [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "supplierpayment": "/v2/supplierpayment/1",
            "amountnet": "235.12",
            "amountvat": "32.54",
            "commissionpercentage": "12.0000",
            "commissionnet": "17.00",
            "commissionvat": "3.54",
            "exchangerate": {
                "id": 1,
                "currency": {
                    "id": 1,
                    "code": "GBP",
                    "name": "Pound Sterling",
                    "decimalplaces": 2
                },
                "unitsperbaseunit": 1
            }
        }

### Update the details of a SupplierInvoiceItemPayment [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output.

    e.g. amountnet=11.43

+ Response 204

### Delete a SupplierInvoiceItemPayment [DELETE]

+ Response 204



## SupplierPayment Index [/v2/supplierpayment]
### Retrieves a list of supplier payments. [GET]

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 1,
            "page": 1,
            "count": 1,
            "limit": 10,
            "time": 0,
            "orderBy": null,
            "filter": "",
            "previous": null,
            "next": null,
            "elements": [
                {
                    "id": 1,
                    "workordersupplier": {
                        "id": 1,
                        "supplier": {
                            "id": 14,
                            "type": "Supplier",
                            "actorcode": "",
                            "created": "2017-05-16",
                            "updated": "",
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "inactive": false,
                            "firstname": "Ian",
                            "surname": "Stamp",
                            "title": "Mr",
                            "salutation": "Ian",
                            "companyname": "",
                            "vatnumber": "",
                            "companynumber": "",
                            "contactdetails": [
                                {
                                    "id": 27,
                                    "type": "C",
                                    "contactmethodtype": "Email",
                                    "contactmethodsubtype": "Home",
                                    "value": "ian@stamp.com",
                                    "comment": "",
                                    "invalid": false,
                                    "invaliddatetime": "",
                                    "invalidreason": "",
                                    "contactpreferences": [],
                                    "dedupekey": "ot-ian@stamp.com"
                                },
                                {
                                    "id": 28,
                                    "type": "P",
                                    "contactmethodsubtype": "Play",
                                    "address": {
                                        "id": 20,
                                        "line1": "Carlton House",
                                        "line2": "Market Place",
                                        "line3": "",
                                        "town": "Reepham",
                                        "county": "Norfolk",
                                        "postcode": "NR10 4JJ",
                                        "country": {
                                            "alpha2": "GB",
                                            "alpha3": "GBR",
                                            "name": "United Kingdom"
                                        },
                                        "longitude": "1.652729",
                                        "latitude": "52.617954",
                                        "geohash": ""
                                    },
                                    "invalid": false,
                                    "invaliddatetime": "",
                                    "invalidreason": "",
                                    "contactpreferences": [
                                        {
                                            "id": 10,
                                            "branding": "/v2/branding/1",
                                            "rolereason": {
                                                "id": 1,
                                                "role": {
                                                    "id": 1,
                                                    "name": "Customer",
                                                    "donotdelete": true
                                                },
                                                "reason": {
                                                    "id": 1,
                                                    "name": "Booking Confirmation",
                                                    "donotdelete": true
                                                },
                                                "donotdelete": true,
                                                "required": true
                                            },
                                            "priority": 1,
                                            "donotuse": false
                                        }
                                    ],
                                    "dedupekey": "po-nr104jj"
                                }
                            ],
                            "bankaccounts": [],
                            "bacsbankaccount": {},
                            "documents": [],
                            "mergedinto": "",
                            "potentialduplicates": [],
                            "mergedactors": [],
                            "accountingreference": "",
                            "activities": [
                                {
                                    "id": 3,
                                    "managedactivity": {
                                        "id": 2,
                                        "name": "Keyholder",
                                        "description": "Being the keyholder for a property",
                                        "donotmodify": true
                                    },
                                    "fromdate": "2016-01-01",
                                    "todate": "2018-01-01"
                                }
                            ],
                            "defaultbrandinggroup": [],
                            "defaultbookingbrand": [],
                            "defaultbranding": []
                        },
                        "commissionpercent": 10,
                        "paymenttype": "Cheque",
                        "payeename": "Joe Bloggs",
                        "paymentadvice": "Please find cheque attached",
                        "hourlyrate": 43.5,
                        "calloutcharge": 75,
                        "defaultinvoiceto": "Owner"
                    },
                    "paymentdate": "2014-04-02",
                    "remark": "Cheque enclosed",
                    "sortcode": "20-01-32",
                    "accountnumber": "67000633",
                    "chequenumber": "1000453",
                    "tabsuser": "/v2/tabsuser/24"
                }
            ]
        }

### Add a new SupplierPayment [POST]

The following fields should be provided in the POST array

* ```workordersupplierid``` The id of the WorkOrderSupplier
* ```paymentdate``` The payment date
* ```remark``` The remark (optional)
* ```sortcode``` The sort code (optional)
* ```accountnumber``` The account number (optional)
* ```chequenumber``` The cheque number (optional)
* ```tabsuserid``` The TabsUser id

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/supplierpayment/1


## SupplierPayment Detail [/v2/supplierpayment/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the SupplierPayment

### Retrieves details of a SupplierPayment [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "workordersupplier": {
                "id": 1,
                "supplier": {
                    "id": 14,
                    "type": "Supplier",
                    "actorcode": "",
                    "created": "2017-05-16",
                    "updated": "",
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "inactive": false,
                    "firstname": "Ian",
                    "surname": "Stamp",
                    "title": "Mr",
                    "salutation": "Ian",
                    "companyname": "",
                    "vatnumber": "",
                    "companynumber": "",
                    "contactdetails": [
                        {
                            "id": 27,
                            "type": "C",
                            "contactmethodtype": "Email",
                            "contactmethodsubtype": "Home",
                            "value": "ian@stamp.com",
                            "comment": "",
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [],
                            "dedupekey": "ot-ian@stamp.com"
                        },
                        {
                            "id": 28,
                            "type": "P",
                            "contactmethodsubtype": "Play",
                            "address": {
                                "id": 20,
                                "line1": "Carlton House",
                                "line2": "Market Place",
                                "line3": "",
                                "town": "Reepham",
                                "county": "Norfolk",
                                "postcode": "NR10 4JJ",
                                "country": {
                                    "alpha2": "GB",
                                    "alpha3": "GBR",
                                    "name": "United Kingdom"
                                },
                                "longitude": "1.652729",
                                "latitude": "52.617954",
                                "geohash": ""
                            },
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [
                                {
                                    "id": 10,
                                    "branding": "/v2/branding/1",
                                    "rolereason": {
                                        "id": 1,
                                        "role": {
                                            "id": 1,
                                            "name": "Customer",
                                            "donotdelete": true
                                        },
                                        "reason": {
                                            "id": 1,
                                            "name": "Booking Confirmation",
                                            "donotdelete": true
                                        },
                                        "donotdelete": true,
                                        "required": true
                                    },
                                    "priority": 1,
                                    "donotuse": false
                                }
                            ],
                            "dedupekey": "po-nr104jj"
                        }
                    ],
                    "bankaccounts": [],
                    "bacsbankaccount": {},
                    "documents": [],
                    "mergedinto": "",
                    "potentialduplicates": [],
                    "mergedactors": [],
                    "accountingreference": "",
                    "activities": [
                        {
                            "id": 3,
                            "managedactivity": {
                                "id": 2,
                                "name": "Keyholder",
                                "description": "Being the keyholder for a property",
                                "donotmodify": true
                            },
                            "fromdate": "2016-01-01",
                            "todate": "2018-01-01"
                        }
                    ],
                    "defaultbrandinggroup": [],
                    "defaultbookingbrand": [],
                    "defaultbranding": []
                },
                "commissionpercent": 10,
                "paymenttype": "Cheque",
                "payeename": "Joe Bloggs",
                "paymentadvice": "Please find cheque attached",
                "hourlyrate": 43.5,
                "calloutcharge": 75,
                "defaultinvoiceto": "Owner"
            },
            "paymentdate": "2014-04-02",
            "remark": "Cheque enclosed",
            "sortcode": "20-01-32",
            "accountnumber": "67000633",
            "chequenumber": "1000453",
            "tabsuser": "/v2/tabsuser/24"
        }

### Update a SupplierPayment [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. remark=trousers

+ Response 204

### Delete a SupplierPayment [DELETE]

+ Response 204




## Work Order Index [/v2/workorder]
### Retrieves a list of WorkOrders. [GET]

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 4,
            "page": 1,
            "count": 4,
            "limit": 10,
            "time": 0,
            "orderBy": "",
            "filter": "",
            "previous": null,
            "next": null,
            "elements": [
                {
                    "id": 1,
                    "type": "Template",
                    "status": "Template",
                    "property": "/v2/property/1",
                    "workordersupplier": {
                        "id": 1,
                        "supplier": {
                            "id": 14,
                            "type": "Supplier",
                            "actorcode": "",
                            "created": "2017-05-16",
                            "updated": "",
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "inactive": false,
                            "firstname": "Ian",
                            "surname": "Stamp",
                            "title": "Mr",
                            "salutation": "Ian",
                            "companyname": "",
                            "vatnumber": "",
                            "companynumber": "",
                            "contactdetails": [
                                {
                                    "id": 27,
                                    "type": "C",
                                    "contactmethodtype": "Email",
                                    "contactmethodsubtype": "Home",
                                    "value": "ian@stamp.com",
                                    "comment": "",
                                    "invalid": false,
                                    "invaliddatetime": "",
                                    "invalidreason": "",
                                    "contactpreferences": [],
                                    "dedupekey": "ot-ian@stamp.com"
                                },
                                {
                                    "id": 28,
                                    "type": "P",
                                    "contactmethodsubtype": "Play",
                                    "address": {
                                        "id": 20,
                                        "line1": "Carlton House",
                                        "line2": "Market Place",
                                        "line3": "",
                                        "town": "Reepham",
                                        "county": "Norfolk",
                                        "postcode": "NR10 4JJ",
                                        "country": {
                                            "alpha2": "GB",
                                            "alpha3": "GBR",
                                            "name": "United Kingdom"
                                        },
                                        "longitude": "1.652729",
                                        "latitude": "52.617954",
                                        "geohash": ""
                                    },
                                    "invalid": false,
                                    "invaliddatetime": "",
                                    "invalidreason": "",
                                    "contactpreferences": [
                                        {
                                            "id": 10,
                                            "branding": "/v2/branding/1",
                                            "rolereason": {
                                                "id": 1,
                                                "role": {
                                                    "id": 1,
                                                    "name": "Customer",
                                                    "donotdelete": true
                                                },
                                                "reason": {
                                                    "id": 1,
                                                    "name": "Booking Confirmation",
                                                    "donotdelete": true
                                                },
                                                "donotdelete": true,
                                                "required": true
                                            },
                                            "priority": 1,
                                            "donotuse": false
                                        }
                                    ],
                                    "dedupekey": "po-nr104jj"
                                }
                            ],
                            "bankaccounts": [],
                            "bacsbankaccount": {},
                            "documents": [],
                            "mergedinto": "",
                            "potentialduplicates": [],
                            "mergedactors": [],
                            "accountingreference": "",
                            "activities": [
                                {
                                    "id": 3,
                                    "managedactivity": {
                                        "id": 2,
                                        "name": "Keyholder",
                                        "description": "Being the keyholder for a property",
                                        "donotmodify": true
                                    },
                                    "fromdate": "2016-01-01",
                                    "todate": "2018-01-01"
                                }
                            ],
                            "defaultbrandinggroup": [],
                            "defaultbookingbrand": [],
                            "defaultbranding": []
                        },
                        "commissionpercent": 10,
                        "paymenttype": "Cheque",
                        "payeename": "Joe Bloggs",
                        "paymentadvice": "Please find cheque attached",
                        "hourlyrate": 43.5,
                        "calloutcharge": 75,
                        "defaultinvoiceto": "Owner"
                    },
                    "createddatetime": "2017-05-16 09:59:58",
                    "rating": "High",
                    "shortdescription": "Paint Ceilings",
                    "fulldescription": "Paint ceilings in all rooms white",
                    "invoiceto": "Agency",
                    "labourhours": 6,
                    "labourrate": 43.5,
                    "accesscontacttype": "Agency",
                    "accesscontactdetails": "01277 212121",
                    "cancelleddatetime": "",
                    "statushistory": [
                        {
                            "id": 1,
                            "from": "2017-05-16 09:59:58",
                            "status": "Template",
                            "setby": "/v2/tabsuser/24"
                        }
                    ],
                    "documents": [],
                    "period": "Month",
                    "frequency": 2,
                    "dayofweek": "",
                    "weekofmonth": 0,
                    "dayofmonth": 20,
                    "month": 0,
                    "numberofinstances": 0,
                    "maximuminstances": 13,
                    "autogenerate": true,
                    "exclusionstartdate": "",
                    "exclusionenddate": ""
                },
                {
                    "id": 2,
                    "type": "Template",
                    "status": "Template",
                    "property": "/v2/property/1",
                    "workordersupplier": {
                        "id": 1,
                        "supplier": {
                            "id": 14,
                            "type": "Supplier",
                            "actorcode": "",
                            "created": "2017-05-16",
                            "updated": "",
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "inactive": false,
                            "firstname": "Ian",
                            "surname": "Stamp",
                            "title": "Mr",
                            "salutation": "Ian",
                            "companyname": "",
                            "vatnumber": "",
                            "companynumber": "",
                            "contactdetails": [
                                {
                                    "id": 27,
                                    "type": "C",
                                    "contactmethodtype": "Email",
                                    "contactmethodsubtype": "Home",
                                    "value": "ian@stamp.com",
                                    "comment": "",
                                    "invalid": false,
                                    "invaliddatetime": "",
                                    "invalidreason": "",
                                    "contactpreferences": [],
                                    "dedupekey": "ot-ian@stamp.com"
                                },
                                {
                                    "id": 28,
                                    "type": "P",
                                    "contactmethodsubtype": "Play",
                                    "address": {
                                        "id": 20,
                                        "line1": "Carlton House",
                                        "line2": "Market Place",
                                        "line3": "",
                                        "town": "Reepham",
                                        "county": "Norfolk",
                                        "postcode": "NR10 4JJ",
                                        "country": {
                                            "alpha2": "GB",
                                            "alpha3": "GBR",
                                            "name": "United Kingdom"
                                        },
                                        "longitude": "1.652729",
                                        "latitude": "52.617954",
                                        "geohash": ""
                                    },
                                    "invalid": false,
                                    "invaliddatetime": "",
                                    "invalidreason": "",
                                    "contactpreferences": [
                                        {
                                            "id": 10,
                                            "branding": "/v2/branding/1",
                                            "rolereason": {
                                                "id": 1,
                                                "role": {
                                                    "id": 1,
                                                    "name": "Customer",
                                                    "donotdelete": true
                                                },
                                                "reason": {
                                                    "id": 1,
                                                    "name": "Booking Confirmation",
                                                    "donotdelete": true
                                                },
                                                "donotdelete": true,
                                                "required": true
                                            },
                                            "priority": 1,
                                            "donotuse": false
                                        }
                                    ],
                                    "dedupekey": "po-nr104jj"
                                }
                            ],
                            "bankaccounts": [],
                            "bacsbankaccount": {},
                            "documents": [],
                            "mergedinto": "",
                            "potentialduplicates": [],
                            "mergedactors": [],
                            "accountingreference": "",
                            "activities": [
                                {
                                    "id": 3,
                                    "managedactivity": {
                                        "id": 2,
                                        "name": "Keyholder",
                                        "description": "Being the keyholder for a property",
                                        "donotmodify": true
                                    },
                                    "fromdate": "2016-01-01",
                                    "todate": "2018-01-01"
                                }
                            ],
                            "defaultbrandinggroup": [],
                            "defaultbookingbrand": [],
                            "defaultbranding": []
                        },
                        "commissionpercent": 10,
                        "paymenttype": "Cheque",
                        "payeename": "Joe Bloggs",
                        "paymentadvice": "Please find cheque attached",
                        "hourlyrate": 43.5,
                        "calloutcharge": 75,
                        "defaultinvoiceto": "Owner"
                    },
                    "createddatetime": "2017-05-16 09:59:58",
                    "rating": "High",
                    "shortdescription": "Linen and Towels",
                    "fulldescription": "Collect, launder and replace all linen and towels",
                    "invoiceto": "Owner",
                    "labourhours": 6,
                    "labourrate": 17.45,
                    "accesscontacttype": "Agency",
                    "accesscontactdetails": "01277 212121",
                    "cancelleddatetime": "",
                    "statushistory": [
                        {
                            "id": 4,
                            "from": "2017-05-16 09:59:58",
                            "status": "Template",
                            "setby": "/v2/tabsuser/24"
                        }
                    ],
                    "documents": [],
                    "period": "As Required",
                    "frequency": 0,
                    "dayofweek": "",
                    "weekofmonth": 0,
                    "dayofmonth": 0,
                    "month": 0,
                    "numberofinstances": 0,
                    "maximuminstances": 999,
                    "autogenerate": true,
                    "exclusionstartdate": "",
                    "exclusionenddate": ""
                },
                {
                    "id": 3,
                    "type": "Instance",
                    "status": "Invoiced",
                    "property": "/v2/property/1",
                    "workordersupplier": {
                        "id": 1,
                        "supplier": {
                            "id": 14,
                            "type": "Supplier",
                            "actorcode": "",
                            "created": "2017-05-16",
                            "updated": "",
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "inactive": false,
                            "firstname": "Ian",
                            "surname": "Stamp",
                            "title": "Mr",
                            "salutation": "Ian",
                            "companyname": "",
                            "vatnumber": "",
                            "companynumber": "",
                            "contactdetails": [
                                {
                                    "id": 27,
                                    "type": "C",
                                    "contactmethodtype": "Email",
                                    "contactmethodsubtype": "Home",
                                    "value": "ian@stamp.com",
                                    "comment": "",
                                    "invalid": false,
                                    "invaliddatetime": "",
                                    "invalidreason": "",
                                    "contactpreferences": [],
                                    "dedupekey": "ot-ian@stamp.com"
                                },
                                {
                                    "id": 28,
                                    "type": "P",
                                    "contactmethodsubtype": "Play",
                                    "address": {
                                        "id": 20,
                                        "line1": "Carlton House",
                                        "line2": "Market Place",
                                        "line3": "",
                                        "town": "Reepham",
                                        "county": "Norfolk",
                                        "postcode": "NR10 4JJ",
                                        "country": {
                                            "alpha2": "GB",
                                            "alpha3": "GBR",
                                            "name": "United Kingdom"
                                        },
                                        "longitude": "1.652729",
                                        "latitude": "52.617954",
                                        "geohash": ""
                                    },
                                    "invalid": false,
                                    "invaliddatetime": "",
                                    "invalidreason": "",
                                    "contactpreferences": [
                                        {
                                            "id": 10,
                                            "branding": "/v2/branding/1",
                                            "rolereason": {
                                                "id": 1,
                                                "role": {
                                                    "id": 1,
                                                    "name": "Customer",
                                                    "donotdelete": true
                                                },
                                                "reason": {
                                                    "id": 1,
                                                    "name": "Booking Confirmation",
                                                    "donotdelete": true
                                                },
                                                "donotdelete": true,
                                                "required": true
                                            },
                                            "priority": 1,
                                            "donotuse": false
                                        }
                                    ],
                                    "dedupekey": "po-nr104jj"
                                }
                            ],
                            "bankaccounts": [],
                            "bacsbankaccount": {},
                            "documents": [],
                            "mergedinto": "",
                            "potentialduplicates": [],
                            "mergedactors": [],
                            "accountingreference": "",
                            "activities": [
                                {
                                    "id": 3,
                                    "managedactivity": {
                                        "id": 2,
                                        "name": "Keyholder",
                                        "description": "Being the keyholder for a property",
                                        "donotmodify": true
                                    },
                                    "fromdate": "2016-01-01",
                                    "todate": "2018-01-01"
                                }
                            ],
                            "defaultbrandinggroup": [],
                            "defaultbookingbrand": [],
                            "defaultbranding": []
                        },
                        "commissionpercent": 10,
                        "paymenttype": "Cheque",
                        "payeename": "Joe Bloggs",
                        "paymentadvice": "Please find cheque attached",
                        "hourlyrate": 43.5,
                        "calloutcharge": 75,
                        "defaultinvoiceto": "Owner"
                    },
                    "createddatetime": "2017-05-16 09:59:58",
                    "rating": "High",
                    "shortdescription": "Paint Ceilings",
                    "fulldescription": "Paint ceilings in all rooms white",
                    "invoiceto": "Agency",
                    "labourhours": 6,
                    "labourrate": 43.5,
                    "accesscontacttype": "Agency",
                    "accesscontactdetails": "01277 212121",
                    "cancelleddatetime": "",
                    "statushistory": [
                        {
                            "id": 2,
                            "from": "2017-05-16 09:59:58",
                            "status": "Approved",
                            "setby": "/v2/tabsuser/24"
                        }
                    ],
                    "documents": [
                        {
                            "id": 20,
                            "created": "2017-05-16 09:59:58",
                            "document": {
                                "id": 1,
                                "name": "Tabs 2 roadmap.pdf",
                                "filename": "Tabs 2 roadmap.pdf",
                                "timeadded": "2014-01-01 12:00:00",
                                "weight": 0,
                                "private": false,
                                "description": "A document",
                                "mimetype": {
                                    "id": 1,
                                    "name": "application/pdf",
                                    "shortname": "pdf"
                                },
                                "file": "/v2/file/1"
                            }
                        }
                    ],
                    "workordertemplate": "",
                    "reporteddate": "2014-01-01",
                    "preferredstartdate": "",
                    "requiredbydate": "2014-07-01",
                    "estimaterequired": false,
                    "estimate": 0,
                    "approveddate": "2014-02-01",
                    "starteddate": "",
                    "completeddate": "",
                    "propertysupplierservice": "",
                    "booking": null
                },
                {
                    "id": 4,
                    "type": "Instance",
                    "status": "Approved",
                    "property": "/v2/property/1",
                    "workordersupplier": {
                        "id": 1,
                        "supplier": {
                            "id": 14,
                            "type": "Supplier",
                            "actorcode": "",
                            "created": "2017-05-16",
                            "updated": "",
                            "language": {
                                "id": 1,
                                "code": "EN",
                                "name": "English"
                            },
                            "inactive": false,
                            "firstname": "Ian",
                            "surname": "Stamp",
                            "title": "Mr",
                            "salutation": "Ian",
                            "companyname": "",
                            "vatnumber": "",
                            "companynumber": "",
                            "contactdetails": [
                                {
                                    "id": 27,
                                    "type": "C",
                                    "contactmethodtype": "Email",
                                    "contactmethodsubtype": "Home",
                                    "value": "ian@stamp.com",
                                    "comment": "",
                                    "invalid": false,
                                    "invaliddatetime": "",
                                    "invalidreason": "",
                                    "contactpreferences": [],
                                    "dedupekey": "ot-ian@stamp.com"
                                },
                                {
                                    "id": 28,
                                    "type": "P",
                                    "contactmethodsubtype": "Play",
                                    "address": {
                                        "id": 20,
                                        "line1": "Carlton House",
                                        "line2": "Market Place",
                                        "line3": "",
                                        "town": "Reepham",
                                        "county": "Norfolk",
                                        "postcode": "NR10 4JJ",
                                        "country": {
                                            "alpha2": "GB",
                                            "alpha3": "GBR",
                                            "name": "United Kingdom"
                                        },
                                        "longitude": "1.652729",
                                        "latitude": "52.617954",
                                        "geohash": ""
                                    },
                                    "invalid": false,
                                    "invaliddatetime": "",
                                    "invalidreason": "",
                                    "contactpreferences": [
                                        {
                                            "id": 10,
                                            "branding": "/v2/branding/1",
                                            "rolereason": {
                                                "id": 1,
                                                "role": {
                                                    "id": 1,
                                                    "name": "Customer",
                                                    "donotdelete": true
                                                },
                                                "reason": {
                                                    "id": 1,
                                                    "name": "Booking Confirmation",
                                                    "donotdelete": true
                                                },
                                                "donotdelete": true,
                                                "required": true
                                            },
                                            "priority": 1,
                                            "donotuse": false
                                        }
                                    ],
                                    "dedupekey": "po-nr104jj"
                                }
                            ],
                            "bankaccounts": [],
                            "bacsbankaccount": {},
                            "documents": [],
                            "mergedinto": "",
                            "potentialduplicates": [],
                            "mergedactors": [],
                            "accountingreference": "",
                            "activities": [
                                {
                                    "id": 3,
                                    "managedactivity": {
                                        "id": 2,
                                        "name": "Keyholder",
                                        "description": "Being the keyholder for a property",
                                        "donotmodify": true
                                    },
                                    "fromdate": "2016-01-01",
                                    "todate": "2018-01-01"
                                }
                            ],
                            "defaultbrandinggroup": [],
                            "defaultbookingbrand": [],
                            "defaultbranding": []
                        },
                        "commissionpercent": 10,
                        "paymenttype": "Cheque",
                        "payeename": "Joe Bloggs",
                        "paymentadvice": "Please find cheque attached",
                        "hourlyrate": 43.5,
                        "calloutcharge": 75,
                        "defaultinvoiceto": "Owner"
                    },
                    "createddatetime": "2017-05-16 09:59:58",
                    "rating": "High",
                    "shortdescription": "Paint Ceilings",
                    "fulldescription": "Paint ceilings in all rooms white again",
                    "invoiceto": "Agency",
                    "labourhours": 6,
                    "labourrate": 43.5,
                    "accesscontacttype": "Agency",
                    "accesscontactdetails": "01277 212121",
                    "cancelleddatetime": "",
                    "statushistory": [
                        {
                            "id": 3,
                            "from": "2017-05-16 09:59:58",
                            "status": "Approved",
                            "setby": "/v2/tabsuser/24"
                        }
                    ],
                    "documents": [],
                    "workordertemplate": "",
                    "reporteddate": "2014-01-01",
                    "preferredstartdate": "",
                    "requiredbydate": "2014-07-01",
                    "estimaterequired": false,
                    "estimate": 0,
                    "approveddate": "2014-02-01",
                    "starteddate": "",
                    "completeddate": "",
                    "propertysupplierservice": "",
                    "booking": null
                }
            ]
        }

### Add a new WorkOrder [POST]

The following fields should be provided in the POST array

* ```type``` The type of work order - Template or Instance
* ```propertyid``` The id of the Property
* ```workordersupplierid``` The id of the Work Order Supplier
* ```createddatetime``` The date and time the Work Order was created
* ```rating``` How urgent the work is
* ```shortdescription``` A short description of the work to be done, short enough to appear on the owner statement
* ```fulldescription``` The full description of the work to be done, which could be several paragraphs (optional)
* ```invoiceto``` Who is paying for the work: 'Owner', 'Agency', or 'None (zero cost)'
* ```labourhours``` The number of hours labour the work requires (optional)
* ```labourrate``` The hourly rate charged for labour (optional)
* ```accesscontacttype``` Whether the Owner, Agency or some Other person will provide access
* ```accesscontactdetails``` The contact details of the person providing access (optional)
* ```cancelleddatetime``` the date and time the work order was cancelled (optional)
* ```updatedbyactorid``` Id of the tabs user who updated the work order

The following fields only apply where `type` = Instance
* ```workordertemplateid``` the id of the Template Work Order this Instance is based on (optional)
* ```reporteddate``` The date the issue was reported (optional)
* ```preferredstartdate``` The date the work should start by (optional)
* ```requiredbydate``` The date the work must be completed by (optional)
* ```estimaterequired``` Whether an estimate is required or not (optional)
* ```estimate``` The estimate (optional)
* ```approveddate``` Date the work order was approved (optional)
* ```starteddate``` Date the work was started (optional)
* ```completeddate``` Date the work was completed (optional)
* ```propertysupplierserviceid``` The id of the Property Supplier Service related to the Work Order
* ```bookingid``` The id of the Booking related to the Work Order

The following fields only apply where `type` = Template
* ```period``` The period the work recurrs: Week, Month, Year etc
* ```frequency``` How often the work recurrs, e.g. 2 = every 2 periods
* ```dayofweek``` For Period = Week, which day of the week, e.g. Monday (optional)
* ```weekofmonth``` For Period = Month, which week of the month (optional)
* ```dayofmonth``` For Period = Month, which day of the month (optional, 99 = last day)
* ```month``` For Period = Year, which month of the year, 1-12 (optional)
* ```maximuminstances``` The maximum number of instances which should be outstanding at any time
* ```autogenerate``` Whether instances should be generated automatically, or when requested (optional)
* ```exclusionstartdate``` The month and day indicating the start of the period in which no work orders should be generated, e.g. 10-01 (optional)
* ```exclusionenddate``` The month and day indicating the end of the period in which no work orders should be generated, e.g. 03-31 (optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/workorder/3


## Work Order Detail [/v2/workorder/{id}]

+ Parameters

    + id (required, integer, `3`) ... The id of the WorkOrder

### Retrieves details of a WorkOrder [GET]

+ Response 200 (application/json)

        {
            "id": 3,
            "type": "Instance",
            "status": "Invoiced",
            "property": "/v2/property/1",
            "workordersupplier": {
                "id": 1,
                "supplier": {
                    "id": 14,
                    "type": "Supplier",
                    "actorcode": "",
                    "created": "2017-05-16",
                    "updated": "",
                    "language": {
                        "id": 1,
                        "code": "EN",
                        "name": "English"
                    },
                    "inactive": false,
                    "firstname": "Ian",
                    "surname": "Stamp",
                    "title": "Mr",
                    "salutation": "Ian",
                    "companyname": "",
                    "vatnumber": "",
                    "companynumber": "",
                    "contactdetails": [
                        {
                            "id": 27,
                            "type": "C",
                            "contactmethodtype": "Email",
                            "contactmethodsubtype": "Home",
                            "value": "ian@stamp.com",
                            "comment": "",
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [],
                            "dedupekey": "ot-ian@stamp.com"
                        },
                        {
                            "id": 28,
                            "type": "P",
                            "contactmethodsubtype": "Play",
                            "address": {
                                "id": 20,
                                "line1": "Carlton House",
                                "line2": "Market Place",
                                "line3": "",
                                "town": "Reepham",
                                "county": "Norfolk",
                                "postcode": "NR10 4JJ",
                                "country": {
                                    "alpha2": "GB",
                                    "alpha3": "GBR",
                                    "name": "United Kingdom"
                                },
                                "longitude": "1.652729",
                                "latitude": "52.617954",
                                "geohash": ""
                            },
                            "invalid": false,
                            "invaliddatetime": "",
                            "invalidreason": "",
                            "contactpreferences": [
                                {
                                    "id": 10,
                                    "branding": "/v2/branding/1",
                                    "rolereason": {
                                        "id": 1,
                                        "role": {
                                            "id": 1,
                                            "name": "Customer",
                                            "donotdelete": true
                                        },
                                        "reason": {
                                            "id": 1,
                                            "name": "Booking Confirmation",
                                            "donotdelete": true
                                        },
                                        "donotdelete": true,
                                        "required": true
                                    },
                                    "priority": 1,
                                    "donotuse": false
                                }
                            ],
                            "dedupekey": "po-nr104jj"
                        }
                    ],
                    "bankaccounts": [],
                    "bacsbankaccount": {},
                    "documents": [],
                    "mergedinto": "",
                    "potentialduplicates": [],
                    "mergedactors": [],
                    "accountingreference": "",
                    "activities": [
                        {
                            "id": 3,
                            "managedactivity": {
                                "id": 2,
                                "name": "Keyholder",
                                "description": "Being the keyholder for a property",
                                "donotmodify": true
                            },
                            "fromdate": "2016-01-01",
                            "todate": "2018-01-01"
                        }
                    ],
                    "defaultbrandinggroup": [],
                    "defaultbookingbrand": [],
                    "defaultbranding": []
                },
                "commissionpercent": 10,
                "paymenttype": "Cheque",
                "payeename": "Joe Bloggs",
                "paymentadvice": "Please find cheque attached",
                "hourlyrate": 43.5,
                "calloutcharge": 75,
                "defaultinvoiceto": "Owner"
            },
            "createddatetime": "2017-05-16 09:59:58",
            "rating": "High",
            "shortdescription": "Paint Ceilings",
            "fulldescription": "Paint ceilings in all rooms white",
            "invoiceto": "Agency",
            "labourhours": 6,
            "labourrate": 43.5,
            "accesscontacttype": "Agency",
            "accesscontactdetails": "01277 212121",
            "cancelleddatetime": "",
            "statushistory": [
                {
                    "id": 2,
                    "from": "2017-05-16 09:59:58",
                    "status": "Approved",
                    "setby": "/v2/tabsuser/24"
                }
            ],
            "documents": [
                {
                    "id": 20,
                    "created": "2017-05-16 09:59:58",
                    "document": {
                        "id": 1,
                        "name": "Tabs 2 roadmap.pdf",
                        "filename": "Tabs 2 roadmap.pdf",
                        "timeadded": "2014-01-01 12:00:00",
                        "weight": 0,
                        "private": false,
                        "description": "A document",
                        "mimetype": {
                            "id": 1,
                            "name": "application/pdf",
                            "shortname": "pdf"
                        },
                        "file": "/v2/file/1"
                    }
                }
            ],
            "workordertemplate": "",
            "reporteddate": "2014-01-01",
            "preferredstartdate": "",
            "requiredbydate": "2014-07-01",
            "estimaterequired": false,
            "estimate": 0,
            "approveddate": "2014-02-01",
            "starteddate": "",
            "completeddate": "",
            "propertysupplierservice": "",
            "booking": null
        }

### Update a WorkOrder [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. fulldescription='A very long description with lots of words'

+ Response 204

### Delete a WorkOrder [DELETE]

+ Response 204



## Work Order Expense Index [/v2/workorder/{id}/expense]

+ Parameters

    + id (required, integer, `1`) ... The id of the workorder

### Retrieves a list of all Expenses for a WorkOrder [GET]

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "description": "Whatever needed to be done",
                "amountnet": 97.2,
                "amountvat": 5.72,
                "currency": {
                    "id": 2,
                    "code": "EUR",
                    "name": "Euro",
                    "decimalplaces": 2
                },
                "vatband": {
                    "id": 1,
                    "vatband": "Zero/Exempt"
                }
            }
        ]

### Add a new WorkOrderExpense [POST]
The following fields should be provided in the POST array

* ```description``` Description of the expense (optional)
* ```amountnet``` The Net amount of the expense
* ```amountvat``` The amount of Vat
* ```currencyid``` The id of the currency that applies to the expense
* ```vatbandid``` The id of the vat band that applies to the expense

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/workorder/1/expense/1

## Work Order Expense Detail [/v2/workorder/{id}/expense/{id2}]

+ Parameters

    + id (required, integer, `1`) ... The id of the WorkOrder
    + id2 (required, integer, `1`) ... The id of the Expense to get

### Retrieves details of a WorkOrder Expense [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "description": "Whatever needed to be done",
            "amountnet": 97.2,
            "amountvat": 5.72,
            "currency": {
                "id": 2,
                "code": "EUR",
                "name": "Euro",
                "decimalplaces": 2
            },
            "vatband": {
                "id": 1,
                "vatband": "Zero/Exempt"
            }
        }

### Update the details of a WorkOrder Expense [PUT]
Updated fields should be sent as POST parameters with names matching the name of the field in the output.

    e.g. amountnet=11.43

+ Response 204

### Delete a WorkOrderExpense [DELETE]

+ Response 204



## Work Order Owner Index [/v2/workorderowner]
### Retrieves a list of WorkOrderOwners. [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "owner": "/v2/owner/15",
                "markuppercent": 10.00,
                "showchargesseparately": true
            }
        ]

### Add a new WorkOrderSupplier [POST]

The following fields should be provided in the POST array

* ```ownerid``` The id of the Owner
* ```markuppercent``` The percentage of markup (Optional)
* ```showchargesseparately``` Whether charges should be shown separately (Optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/workorderowner/2


## Work Order Owner Detail [/v2/workorderowner/{id}]

+ Parameters

    + id (required, integer, `1`) ... The id of the WorkOrderOwner

### Retrieves details of a WorkOrderOwner [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "owner": "/v2/owner/15",
            "markuppercent": 10.00,
            "showchargesseparately": true
        }

### Update a WorkOrderOwner [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. markuppercent=11.43

+ Response 204

### Delete a WorkOrderOwner [DELETE]

+ Response 204



## Work Order Supplier Index [/v2/workordersupplier]
### Retrieves a list of WorkOrderSuppliers. [GET]

+ Response 200 (application/json)

        {
            "searchId": 0,
            "total": 3,
            "page": 1,
            "count": 3,
            "limit": 10,
            "time": 0,
            "orderBy": null,
            "filter": "",
            "previous": null,
            "next": null,
            "elements": [
                {
                    "id": 1,
                    "supplier": {
                        "id": 14,
                        "type": "Supplier",
                        "actorcode": "",
                        "created": "2017-05-16",
                        "updated": "",
                        "language": {
                            "id": 1,
                            "code": "EN",
                            "name": "English"
                        },
                        "inactive": false,
                        "firstname": "Ian",
                        "surname": "Stamp",
                        "title": "Mr",
                        "salutation": "Ian",
                        "companyname": "",
                        "vatnumber": "",
                        "companynumber": "",
                        "contactdetails": [
                            {
                                "id": 27,
                                "type": "C",
                                "contactmethodtype": "Email",
                                "contactmethodsubtype": "Home",
                                "value": "ian@stamp.com",
                                "comment": "",
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [],
                                "dedupekey": "ot-ian@stamp.com"
                            },
                            {
                                "id": 28,
                                "type": "P",
                                "contactmethodsubtype": "Play",
                                "address": {
                                    "id": 20,
                                    "line1": "Carlton House",
                                    "line2": "Market Place",
                                    "line3": "",
                                    "town": "Reepham",
                                    "county": "Norfolk",
                                    "postcode": "NR10 4JJ",
                                    "country": {
                                        "alpha2": "GB",
                                        "alpha3": "GBR",
                                        "name": "United Kingdom"
                                    },
                                    "longitude": "1.652729",
                                    "latitude": "52.617954",
                                    "geohash": ""
                                },
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [
                                    {
                                        "id": 10,
                                        "branding": "/v2/branding/1",
                                        "rolereason": {
                                            "id": 1,
                                            "role": {
                                                "id": 1,
                                                "name": "Customer",
                                                "donotdelete": true
                                            },
                                            "reason": {
                                                "id": 1,
                                                "name": "Booking Confirmation",
                                                "donotdelete": true
                                            },
                                            "donotdelete": true,
                                            "required": true
                                        },
                                        "priority": 1,
                                        "donotuse": false
                                    }
                                ],
                                "dedupekey": "po-nr104jj"
                            }
                        ],
                        "bankaccounts": [],
                        "bacsbankaccount": {},
                        "documents": [],
                        "mergedinto": "",
                        "potentialduplicates": [],
                        "mergedactors": [],
                        "accountingreference": "",
                        "activities": [
                            {
                                "id": 3,
                                "managedactivity": {
                                    "id": 2,
                                    "name": "Keyholder",
                                    "description": "Being the keyholder for a property",
                                    "donotmodify": true
                                },
                                "fromdate": "2016-01-01",
                                "todate": "2018-01-01"
                            }
                        ],
                        "defaultbrandinggroup": [],
                        "defaultbookingbrand": [],
                        "defaultbranding": []
                    },
                    "commissionpercent": 10,
                    "paymenttype": "Cheque",
                    "payeename": "Joe Bloggs",
                    "paymentadvice": "Please find cheque attached",
                    "hourlyrate": 43.5,
                    "calloutcharge": 75,
                    "defaultinvoiceto": "Owner"
                },
                {
                    "id": 2,
                    "supplier": {
                        "id": 13,
                        "type": "Supplier",
                        "actorcode": "",
                        "created": "2017-05-16",
                        "updated": "",
                        "language": {
                            "id": 1,
                            "code": "EN",
                            "name": "English"
                        },
                        "inactive": false,
                        "firstname": "Jon",
                        "surname": "Beverley",
                        "title": "Mr",
                        "salutation": "",
                        "companyname": "Jon's Letting Agency",
                        "vatnumber": "",
                        "companynumber": "",
                        "contactdetails": [
                            {
                                "id": 25,
                                "type": "C",
                                "contactmethodtype": "Email",
                                "contactmethodsubtype": "Play",
                                "value": "jon@lettings.com",
                                "comment": "",
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [],
                                "dedupekey": "ot-jon@lettings.com"
                            },
                            {
                                "id": 26,
                                "type": "P",
                                "contactmethodsubtype": "Home",
                                "address": {
                                    "id": 19,
                                    "line1": "Carlton House",
                                    "line2": "Market Place",
                                    "line3": "",
                                    "town": "Reepham",
                                    "county": "Norfolk",
                                    "postcode": "NR10 4JJ",
                                    "country": {
                                        "alpha2": "GB",
                                        "alpha3": "GBR",
                                        "name": "United Kingdom"
                                    },
                                    "longitude": "1.652729",
                                    "latitude": "52.617954",
                                    "geohash": ""
                                },
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [],
                                "dedupekey": "po-nr104jj"
                            }
                        ],
                        "bankaccounts": [],
                        "bacsbankaccount": {},
                        "documents": [],
                        "mergedinto": "",
                        "potentialduplicates": [],
                        "mergedactors": [],
                        "accountingreference": "",
                        "activities": [
                            {
                                "id": 2,
                                "managedactivity": {
                                    "id": 1,
                                    "name": "Cleaning",
                                    "description": "Cleaning a property",
                                    "donotmodify": true
                                },
                                "fromdate": "2016-01-01",
                                "todate": "2018-01-01"
                            }
                        ],
                        "defaultbrandinggroup": [],
                        "defaultbookingbrand": [],
                        "defaultbranding": []
                    },
                    "commissionpercent": 10,
                    "paymenttype": "Cheque",
                    "payeename": "Joe Bloggs",
                    "paymentadvice": "Please find cheque attached",
                    "hourlyrate": 43.5,
                    "calloutcharge": 75,
                    "defaultinvoiceto": "Owner"
                },
                {
                    "id": 3,
                    "supplier": {
                        "id": 21,
                        "type": "Supplier",
                        "actorcode": "",
                        "created": "2017-05-16",
                        "updated": "",
                        "language": {
                            "id": 1,
                            "code": "EN",
                            "name": "English"
                        },
                        "inactive": false,
                        "firstname": "Bob",
                        "surname": "Dylan",
                        "title": "Mr",
                        "salutation": "Sir",
                        "companyname": "",
                        "vatnumber": "",
                        "companynumber": "",
                        "contactdetails": [
                            {
                                "id": 41,
                                "type": "C",
                                "contactmethodtype": "Email",
                                "contactmethodsubtype": "Home",
                                "value": "blonde@onblonde.com",
                                "comment": "",
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [],
                                "dedupekey": "ot-blonde@onblonde.com"
                            },
                            {
                                "id": 42,
                                "type": "P",
                                "contactmethodsubtype": "",
                                "address": {
                                    "id": 29,
                                    "line1": "Highway 61",
                                    "line2": "Revisited",
                                    "line3": "",
                                    "town": "North Country",
                                    "county": "Duluth",
                                    "postcode": "NR10 4JJ",
                                    "country": {
                                        "alpha2": "GB",
                                        "alpha3": "GBR",
                                        "name": "United Kingdom"
                                    },
                                    "longitude": "1.652729",
                                    "latitude": "52.617954",
                                    "geohash": ""
                                },
                                "invalid": false,
                                "invaliddatetime": "",
                                "invalidreason": "",
                                "contactpreferences": [
                                    {
                                        "id": 14,
                                        "branding": "/v2/branding/1",
                                        "rolereason": {
                                            "id": 1,
                                            "role": {
                                                "id": 1,
                                                "name": "Customer",
                                                "donotdelete": true
                                            },
                                            "reason": {
                                                "id": 1,
                                                "name": "Booking Confirmation",
                                                "donotdelete": true
                                            },
                                            "donotdelete": true,
                                            "required": true
                                        },
                                        "priority": 1,
                                        "donotuse": false
                                    }
                                ],
                                "dedupekey": "po-nr104jj"
                            }
                        ],
                        "bankaccounts": [],
                        "bacsbankaccount": {},
                        "documents": [],
                        "mergedinto": "",
                        "potentialduplicates": [],
                        "mergedactors": [],
                        "accountingreference": "",
                        "activities": [
                            {
                                "id": 6,
                                "managedactivity": {
                                    "id": 4,
                                    "name": "Inspections",
                                    "description": "Grading inspections such as VisitBritain",
                                    "donotmodify": true
                                },
                                "fromdate": "2016-01-01",
                                "todate": "2018-01-01"
                            },
                            {
                                "id": 7,
                                "managedactivity": {
                                    "id": 5,
                                    "name": "Photography",
                                    "description": "All aspects of image creation and processing",
                                    "donotmodify": false
                                },
                                "fromdate": "2016-01-01",
                                "todate": "2018-01-01"
                            },
                            {
                                "id": 8,
                                "managedactivity": {
                                    "id": 6,
                                    "name": "Safety",
                                    "description": "Gas and electrical safety",
                                    "donotmodify": false
                                },
                                "fromdate": "2016-01-01",
                                "todate": "2018-01-01"
                            }
                        ],
                        "defaultbrandinggroup": [],
                        "defaultbookingbrand": [],
                        "defaultbranding": []
                    },
                    "commissionpercent": 12.33,
                    "paymenttype": "Tobacco",
                    "payeename": "Constant Sorrow",
                    "paymentadvice": "Don't think twice",
                    "hourlyrate": 9999.99,
                    "calloutcharge": 99.99,
                    "defaultinvoiceto": "Owner"
                }
            ]
        }

### Add a new WorkOrderSupplier [POST]

The following fields should be provided in the POST array

* ```supplierid``` The id of the Supplier
* ```commissionpercent``` The percentage of commission charged (Optional)
* ```paymenttype``` The method of payment required (Optional)
* ```payeename``` The name of the Payee (Optional)
* ```paymentadvice``` Payment advice to appear on invoice (Optional)
* ```hourlyrate``` The hourly rate (Optional)
* ```calloutcharge``` The callout charge (Optional)
* ```defaultinvoiceto``` Who to invoice for the work: 'Owner', 'Agency', or 'None (zero cost)' (Optional)

+ Response 201
    + Headers

            Location: http://plato.apiary.io/v2/workordersupplier/4


## Work Order Supplier Detail [/v2/workordersupplier/{id}]

+ Parameters

    + id (required, integer, `2`) ... The id of the WorkOrderSupplier

### Retrieves details of a WorkOrderSupplier [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "supplier": {
                "id": 13,
                "type": "Supplier",
                "actorcode": "",
                "created": "2017-05-16",
                "updated": "",
                "language": {
                    "id": 1,
                    "code": "EN",
                    "name": "English"
                },
                "inactive": false,
                "firstname": "Jon",
                "surname": "Beverley",
                "title": "Mr",
                "salutation": "",
                "companyname": "Jon's Letting Agency",
                "vatnumber": "",
                "companynumber": "",
                "contactdetails": [
                    {
                        "id": 25,
                        "type": "C",
                        "contactmethodtype": "Email",
                        "contactmethodsubtype": "Play",
                        "value": "jon@lettings.com",
                        "comment": "",
                        "invalid": false,
                        "invaliddatetime": "",
                        "invalidreason": "",
                        "contactpreferences": [],
                        "dedupekey": "ot-jon@lettings.com"
                    },
                    {
                        "id": 26,
                        "type": "P",
                        "contactmethodsubtype": "Home",
                        "address": {
                            "id": 19,
                            "line1": "Carlton House",
                            "line2": "Market Place",
                            "line3": "",
                            "town": "Reepham",
                            "county": "Norfolk",
                            "postcode": "NR10 4JJ",
                            "country": {
                                "alpha2": "GB",
                                "alpha3": "GBR",
                                "name": "United Kingdom"
                            },
                            "longitude": "1.652729",
                            "latitude": "52.617954",
                            "geohash": ""
                        },
                        "invalid": false,
                        "invaliddatetime": "",
                        "invalidreason": "",
                        "contactpreferences": [],
                        "dedupekey": "po-nr104jj"
                    }
                ],
                "bankaccounts": [],
                "bacsbankaccount": {},
                "documents": [],
                "mergedinto": "",
                "potentialduplicates": [],
                "mergedactors": [],
                "accountingreference": "",
                "activities": [
                    {
                        "id": 2,
                        "managedactivity": {
                            "id": 1,
                            "name": "Cleaning",
                            "description": "Cleaning a property",
                            "donotmodify": true
                        },
                        "fromdate": "2016-01-01",
                        "todate": "2018-01-01"
                    }
                ],
                "defaultbrandinggroup": [],
                "defaultbookingbrand": [],
                "defaultbranding": []
            },
            "commissionpercent": 10,
            "paymenttype": "Cheque",
            "payeename": "Joe Bloggs",
            "paymentadvice": "Please find cheque attached",
            "hourlyrate": 43.5,
            "calloutcharge": 75,
            "defaultinvoiceto": "Owner"
        }

### Update a WorkOrderSupplier [PUT]
Updated fields should be sent as PUT parameters with names matching the name of the field in the output. Any omitted fields will be left as is. eg:

    e.g. paymenttype='Cash'

+ Response 204

### Delete a WorkOrderSupplier [DELETE]

+ Response 204